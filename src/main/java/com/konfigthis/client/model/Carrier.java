/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202403202303
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.CarrierAdvancedOption;
import com.konfigthis.client.model.PackageType;
import com.konfigthis.client.model.Service;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * A carrier object that represents a provider such as UPS, USPS, DHL, etc that has been tied to the current account. 
 */
@ApiModel(description = "A carrier object that represents a provider such as UPS, USPS, DHL, etc that has been tied to the current account. ")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Carrier {
  public static final String SERIALIZED_NAME_CARRIER_ID = "carrier_id";
  @SerializedName(SERIALIZED_NAME_CARRIER_ID)
  private String carrierId;

  public static final String SERIALIZED_NAME_CARRIER_CODE = "carrier_code";
  @SerializedName(SERIALIZED_NAME_CARRIER_CODE)
  private String carrierCode;

  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "account_number";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_REQUIRES_FUNDED_AMOUNT = "requires_funded_amount";
  @SerializedName(SERIALIZED_NAME_REQUIRES_FUNDED_AMOUNT)
  private Boolean requiresFundedAmount;

  public static final String SERIALIZED_NAME_BALANCE = "balance";
  @SerializedName(SERIALIZED_NAME_BALANCE)
  private Double balance;

  public static final String SERIALIZED_NAME_NICKNAME = "nickname";
  @SerializedName(SERIALIZED_NAME_NICKNAME)
  private String nickname;

  public static final String SERIALIZED_NAME_FRIENDLY_NAME = "friendly_name";
  @SerializedName(SERIALIZED_NAME_FRIENDLY_NAME)
  private String friendlyName;

  public static final String SERIALIZED_NAME_PRIMARY = "primary";
  @SerializedName(SERIALIZED_NAME_PRIMARY)
  private Boolean primary;

  public static final String SERIALIZED_NAME_HAS_MULTI_PACKAGE_SUPPORTING_SERVICES = "has_multi_package_supporting_services";
  @SerializedName(SERIALIZED_NAME_HAS_MULTI_PACKAGE_SUPPORTING_SERVICES)
  private Boolean hasMultiPackageSupportingServices;

  public static final String SERIALIZED_NAME_SUPPORTS_LABEL_MESSAGES = "supports_label_messages";
  @SerializedName(SERIALIZED_NAME_SUPPORTS_LABEL_MESSAGES)
  private Boolean supportsLabelMessages;

  public static final String SERIALIZED_NAME_DISABLED_BY_BILLING_PLAN = "disabled_by_billing_plan";
  @SerializedName(SERIALIZED_NAME_DISABLED_BY_BILLING_PLAN)
  private Boolean disabledByBillingPlan;

  public static final String SERIALIZED_NAME_SERVICES = "services";
  @SerializedName(SERIALIZED_NAME_SERVICES)
  private List<Service> services = null;

  public static final String SERIALIZED_NAME_PACKAGES = "packages";
  @SerializedName(SERIALIZED_NAME_PACKAGES)
  private List<PackageType> packages = null;

  public static final String SERIALIZED_NAME_OPTIONS = "options";
  @SerializedName(SERIALIZED_NAME_OPTIONS)
  private List<CarrierAdvancedOption> options = null;

  public Carrier() {
  }

  
  public Carrier(
     String accountNumber, 
     Boolean requiresFundedAmount, 
     Double balance, 
     String nickname, 
     String friendlyName, 
     Boolean primary, 
     Boolean hasMultiPackageSupportingServices, 
     Boolean supportsLabelMessages, 
     Boolean disabledByBillingPlan, 
     List<Service> services, 
     List<PackageType> packages, 
     List<CarrierAdvancedOption> options
  ) {
    this();
    this.accountNumber = accountNumber;
    this.requiresFundedAmount = requiresFundedAmount;
    this.balance = balance;
    this.nickname = nickname;
    this.friendlyName = friendlyName;
    this.primary = primary;
    this.hasMultiPackageSupportingServices = hasMultiPackageSupportingServices;
    this.supportsLabelMessages = supportsLabelMessages;
    this.disabledByBillingPlan = disabledByBillingPlan;
    this.services = services;
    this.packages = packages;
    this.options = options;
  }

  public Carrier carrierId(String carrierId) {
    
    
    if (carrierId != null && carrierId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for carrierId. Length must be greater than or equal to 1.");
    }
    
    this.carrierId = carrierId;
    return this;
  }

   /**
   * A string that uniquely identifies a ShipEngine resource, such as a carrier, label, shipment, etc.
   * @return carrierId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "se-28529731", value = "A string that uniquely identifies a ShipEngine resource, such as a carrier, label, shipment, etc.")

  public String getCarrierId() {
    return carrierId;
  }


  public void setCarrierId(String carrierId) {
    
    
    if (carrierId != null && carrierId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for carrierId. Length must be greater than or equal to 1.");
    }
    this.carrierId = carrierId;
  }


  public Carrier carrierCode(String carrierCode) {
    
    
    
    
    this.carrierCode = carrierCode;
    return this;
  }

   /**
   * A [shipping carrier](https://www.shipengine.com/docs/carriers/setup/), such as &#x60;fedex&#x60;, &#x60;dhl_express&#x60;, &#x60;stamps_com&#x60;, etc. 
   * @return carrierCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "dhl_express", value = "A [shipping carrier](https://www.shipengine.com/docs/carriers/setup/), such as `fedex`, `dhl_express`, `stamps_com`, etc. ")

  public String getCarrierCode() {
    return carrierCode;
  }


  public void setCarrierCode(String carrierCode) {
    
    
    
    this.carrierCode = carrierCode;
  }


   /**
   * The account number that the carrier is connected to.
   * @return accountNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "account_570827", value = "The account number that the carrier is connected to.")

  public String getAccountNumber() {
    return accountNumber;
  }




   /**
   * Indicates whether the carrier requires funding to use its services
   * @return requiresFundedAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates whether the carrier requires funding to use its services")

  public Boolean getRequiresFundedAmount() {
    return requiresFundedAmount;
  }




   /**
   * Current available balance
   * minimum: 0
   * @return balance
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3799.52", value = "Current available balance")

  public Double getBalance() {
    return balance;
  }




   /**
   * Nickname given to the account when initially setting up the carrier.
   * @return nickname
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ShipEngine Account - Stamps.com", value = "Nickname given to the account when initially setting up the carrier.")

  public String getNickname() {
    return nickname;
  }




   /**
   * Screen readable name
   * @return friendlyName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Stamps.com", value = "Screen readable name")

  public String getFriendlyName() {
    return friendlyName;
  }




   /**
   * Is this the primary carrier that is used by default when no carrier is specified in label/shipment creation
   * @return primary
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Is this the primary carrier that is used by default when no carrier is specified in label/shipment creation")

  public Boolean getPrimary() {
    return primary;
  }




   /**
   * Carrier supports multiple packages per shipment
   * @return hasMultiPackageSupportingServices
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Carrier supports multiple packages per shipment")

  public Boolean getHasMultiPackageSupportingServices() {
    return hasMultiPackageSupportingServices;
  }




   /**
   * The carrier supports adding custom label messages to an order.
   * @return supportsLabelMessages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The carrier supports adding custom label messages to an order.")

  public Boolean getSupportsLabelMessages() {
    return supportsLabelMessages;
  }




   /**
   * The carrier is disabled by the current ShipEngine account&#39;s billing plan.
   * @return disabledByBillingPlan
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The carrier is disabled by the current ShipEngine account's billing plan.")

  public Boolean getDisabledByBillingPlan() {
    return disabledByBillingPlan;
  }




   /**
   * A list of services that are offered by the carrier
   * @return services
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of services that are offered by the carrier")

  public List<Service> getServices() {
    return services;
  }




   /**
   * A list of package types that are supported by the carrier
   * @return packages
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of package types that are supported by the carrier")

  public List<PackageType> getPackages() {
    return packages;
  }




   /**
   * A list of options that are available to that carrier
   * @return options
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of options that are available to that carrier")

  public List<CarrierAdvancedOption> getOptions() {
    return options;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Carrier instance itself
   */
  public Carrier putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Carrier carrier = (Carrier) o;
    return Objects.equals(this.carrierId, carrier.carrierId) &&
        Objects.equals(this.carrierCode, carrier.carrierCode) &&
        Objects.equals(this.accountNumber, carrier.accountNumber) &&
        Objects.equals(this.requiresFundedAmount, carrier.requiresFundedAmount) &&
        Objects.equals(this.balance, carrier.balance) &&
        Objects.equals(this.nickname, carrier.nickname) &&
        Objects.equals(this.friendlyName, carrier.friendlyName) &&
        Objects.equals(this.primary, carrier.primary) &&
        Objects.equals(this.hasMultiPackageSupportingServices, carrier.hasMultiPackageSupportingServices) &&
        Objects.equals(this.supportsLabelMessages, carrier.supportsLabelMessages) &&
        Objects.equals(this.disabledByBillingPlan, carrier.disabledByBillingPlan) &&
        Objects.equals(this.services, carrier.services) &&
        Objects.equals(this.packages, carrier.packages) &&
        Objects.equals(this.options, carrier.options)&&
        Objects.equals(this.additionalProperties, carrier.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(carrierId, carrierCode, accountNumber, requiresFundedAmount, balance, nickname, friendlyName, primary, hasMultiPackageSupportingServices, supportsLabelMessages, disabledByBillingPlan, services, packages, options, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Carrier {\n");
    sb.append("    carrierId: ").append(toIndentedString(carrierId)).append("\n");
    sb.append("    carrierCode: ").append(toIndentedString(carrierCode)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    requiresFundedAmount: ").append(toIndentedString(requiresFundedAmount)).append("\n");
    sb.append("    balance: ").append(toIndentedString(balance)).append("\n");
    sb.append("    nickname: ").append(toIndentedString(nickname)).append("\n");
    sb.append("    friendlyName: ").append(toIndentedString(friendlyName)).append("\n");
    sb.append("    primary: ").append(toIndentedString(primary)).append("\n");
    sb.append("    hasMultiPackageSupportingServices: ").append(toIndentedString(hasMultiPackageSupportingServices)).append("\n");
    sb.append("    supportsLabelMessages: ").append(toIndentedString(supportsLabelMessages)).append("\n");
    sb.append("    disabledByBillingPlan: ").append(toIndentedString(disabledByBillingPlan)).append("\n");
    sb.append("    services: ").append(toIndentedString(services)).append("\n");
    sb.append("    packages: ").append(toIndentedString(packages)).append("\n");
    sb.append("    options: ").append(toIndentedString(options)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("carrier_id");
    openapiFields.add("carrier_code");
    openapiFields.add("account_number");
    openapiFields.add("requires_funded_amount");
    openapiFields.add("balance");
    openapiFields.add("nickname");
    openapiFields.add("friendly_name");
    openapiFields.add("primary");
    openapiFields.add("has_multi_package_supporting_services");
    openapiFields.add("supports_label_messages");
    openapiFields.add("disabled_by_billing_plan");
    openapiFields.add("services");
    openapiFields.add("packages");
    openapiFields.add("options");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Carrier
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Carrier.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Carrier is not found in the empty JSON string", Carrier.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("carrier_id") != null && !jsonObj.get("carrier_id").isJsonNull()) && !jsonObj.get("carrier_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier_id").toString()));
      }
      if ((jsonObj.get("carrier_code") != null && !jsonObj.get("carrier_code").isJsonNull()) && !jsonObj.get("carrier_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier_code").toString()));
      }
      if ((jsonObj.get("account_number") != null && !jsonObj.get("account_number").isJsonNull()) && !jsonObj.get("account_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_number").toString()));
      }
      if ((jsonObj.get("nickname") != null && !jsonObj.get("nickname").isJsonNull()) && !jsonObj.get("nickname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nickname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nickname").toString()));
      }
      if ((jsonObj.get("friendly_name") != null && !jsonObj.get("friendly_name").isJsonNull()) && !jsonObj.get("friendly_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `friendly_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("friendly_name").toString()));
      }
      if (jsonObj.get("services") != null && !jsonObj.get("services").isJsonNull()) {
        JsonArray jsonArrayservices = jsonObj.getAsJsonArray("services");
        if (jsonArrayservices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("services").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `services` to be an array in the JSON string but got `%s`", jsonObj.get("services").toString()));
          }

          // validate the optional field `services` (array)
          for (int i = 0; i < jsonArrayservices.size(); i++) {
            Service.validateJsonObject(jsonArrayservices.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("packages") != null && !jsonObj.get("packages").isJsonNull()) {
        JsonArray jsonArraypackages = jsonObj.getAsJsonArray("packages");
        if (jsonArraypackages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("packages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `packages` to be an array in the JSON string but got `%s`", jsonObj.get("packages").toString()));
          }

          // validate the optional field `packages` (array)
          for (int i = 0; i < jsonArraypackages.size(); i++) {
            PackageType.validateJsonObject(jsonArraypackages.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("options") != null && !jsonObj.get("options").isJsonNull()) {
        JsonArray jsonArrayoptions = jsonObj.getAsJsonArray("options");
        if (jsonArrayoptions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("options").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `options` to be an array in the JSON string but got `%s`", jsonObj.get("options").toString()));
          }

          // validate the optional field `options` (array)
          for (int i = 0; i < jsonArrayoptions.size(); i++) {
            CarrierAdvancedOption.validateJsonObject(jsonArrayoptions.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Carrier.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Carrier' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Carrier> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Carrier.class));

       return (TypeAdapter<T>) new TypeAdapter<Carrier>() {
           @Override
           public void write(JsonWriter out, Carrier value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Carrier read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Carrier instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Carrier given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Carrier
  * @throws IOException if the JSON string is invalid with respect to Carrier
  */
  public static Carrier fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Carrier.class);
  }

 /**
  * Convert an instance of Carrier to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

