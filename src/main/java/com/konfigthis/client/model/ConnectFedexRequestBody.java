/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202403202303
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * A Fedex account information request body
 */
@ApiModel(description = "A Fedex account information request body")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ConnectFedexRequestBody {
  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "account_number";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_ADDRESS1 = "address1";
  @SerializedName(SERIALIZED_NAME_ADDRESS1)
  private String address1;

  public static final String SERIALIZED_NAME_ADDRESS2 = "address2";
  @SerializedName(SERIALIZED_NAME_ADDRESS2)
  private String address2;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COMPANY = "company";
  @SerializedName(SERIALIZED_NAME_COMPANY)
  private String company;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "country_code";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_PHONE = "phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private String phone;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postal_code";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_NICKNAME = "nickname";
  @SerializedName(SERIALIZED_NAME_NICKNAME)
  private String nickname;

  public static final String SERIALIZED_NAME_AGREE_TO_EULA = "agree_to_eula";
  @SerializedName(SERIALIZED_NAME_AGREE_TO_EULA)
  private Boolean agreeToEula;

  public static final String SERIALIZED_NAME_METER_NUMBER = "meter_number";
  @SerializedName(SERIALIZED_NAME_METER_NUMBER)
  private String meterNumber;

  public ConnectFedexRequestBody() {
  }

  public ConnectFedexRequestBody accountNumber(String accountNumber) {
    
    
    if (accountNumber != null && accountNumber.length() < 1) {
      throw new IllegalArgumentException("Invalid value for accountNumber. Length must be greater than or equal to 1.");
    }
    
    this.accountNumber = accountNumber;
    return this;
  }

   /**
   * Account number
   * @return accountNumber
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Account number")

  public String getAccountNumber() {
    return accountNumber;
  }


  public void setAccountNumber(String accountNumber) {
    
    
    if (accountNumber != null && accountNumber.length() < 1) {
      throw new IllegalArgumentException("Invalid value for accountNumber. Length must be greater than or equal to 1.");
    }
    this.accountNumber = accountNumber;
  }


  public ConnectFedexRequestBody address1(String address1) {
    
    
    if (address1 != null && address1.length() < 1) {
      throw new IllegalArgumentException("Invalid value for address1. Length must be greater than or equal to 1.");
    }
    
    this.address1 = address1;
    return this;
  }

   /**
   * Address
   * @return address1
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Address")

  public String getAddress1() {
    return address1;
  }


  public void setAddress1(String address1) {
    
    
    if (address1 != null && address1.length() < 1) {
      throw new IllegalArgumentException("Invalid value for address1. Length must be greater than or equal to 1.");
    }
    this.address1 = address1;
  }


  public ConnectFedexRequestBody address2(String address2) {
    
    
    if (address2 != null && address2.length() < 1) {
      throw new IllegalArgumentException("Invalid value for address2. Length must be greater than or equal to 1.");
    }
    
    this.address2 = address2;
    return this;
  }

   /**
   * Address
   * @return address2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Address")

  public String getAddress2() {
    return address2;
  }


  public void setAddress2(String address2) {
    
    
    if (address2 != null && address2.length() < 1) {
      throw new IllegalArgumentException("Invalid value for address2. Length must be greater than or equal to 1.");
    }
    this.address2 = address2;
  }


  public ConnectFedexRequestBody city(String city) {
    
    
    if (city != null && city.length() < 1) {
      throw new IllegalArgumentException("Invalid value for city. Length must be greater than or equal to 1.");
    }
    
    this.city = city;
    return this;
  }

   /**
   * The city
   * @return city
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The city")

  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    
    
    if (city != null && city.length() < 1) {
      throw new IllegalArgumentException("Invalid value for city. Length must be greater than or equal to 1.");
    }
    this.city = city;
  }


  public ConnectFedexRequestBody company(String company) {
    
    
    if (company != null && company.length() < 1) {
      throw new IllegalArgumentException("Invalid value for company. Length must be greater than or equal to 1.");
    }
    
    this.company = company;
    return this;
  }

   /**
   * The company
   * @return company
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The company")

  public String getCompany() {
    return company;
  }


  public void setCompany(String company) {
    
    
    if (company != null && company.length() < 1) {
      throw new IllegalArgumentException("Invalid value for company. Length must be greater than or equal to 1.");
    }
    this.company = company;
  }


  public ConnectFedexRequestBody countryCode(String countryCode) {
    
    
    if (countryCode != null && countryCode.length() < 1) {
      throw new IllegalArgumentException("Invalid value for countryCode. Length must be greater than or equal to 1.");
    }
    
    this.countryCode = countryCode;
    return this;
  }

   /**
   * Country code
   * @return countryCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Country code")

  public String getCountryCode() {
    return countryCode;
  }


  public void setCountryCode(String countryCode) {
    
    
    if (countryCode != null && countryCode.length() < 1) {
      throw new IllegalArgumentException("Invalid value for countryCode. Length must be greater than or equal to 1.");
    }
    this.countryCode = countryCode;
  }


  public ConnectFedexRequestBody email(String email) {
    
    
    if (email != null && email.length() < 1) {
      throw new IllegalArgumentException("Invalid value for email. Length must be greater than or equal to 1.");
    }
    
    this.email = email;
    return this;
  }

   /**
   * An email address.
   * @return email
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "john.doe@example.com", required = true, value = "An email address.")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    
    
    if (email != null && email.length() < 1) {
      throw new IllegalArgumentException("Invalid value for email. Length must be greater than or equal to 1.");
    }
    this.email = email;
  }


  public ConnectFedexRequestBody firstName(String firstName) {
    
    
    if (firstName != null && firstName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for firstName. Length must be greater than or equal to 1.");
    }
    
    this.firstName = firstName;
    return this;
  }

   /**
   * First name
   * @return firstName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "First name")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    
    
    if (firstName != null && firstName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for firstName. Length must be greater than or equal to 1.");
    }
    this.firstName = firstName;
  }


  public ConnectFedexRequestBody lastName(String lastName) {
    
    
    if (lastName != null && lastName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for lastName. Length must be greater than or equal to 1.");
    }
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Last name
   * @return lastName
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Last name")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    
    
    if (lastName != null && lastName.length() < 1) {
      throw new IllegalArgumentException("Invalid value for lastName. Length must be greater than or equal to 1.");
    }
    this.lastName = lastName;
  }


  public ConnectFedexRequestBody phone(String phone) {
    
    
    if (phone != null && phone.length() < 1) {
      throw new IllegalArgumentException("Invalid value for phone. Length must be greater than or equal to 1.");
    }
    
    this.phone = phone;
    return this;
  }

   /**
   * Phone number
   * @return phone
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Phone number")

  public String getPhone() {
    return phone;
  }


  public void setPhone(String phone) {
    
    
    if (phone != null && phone.length() < 1) {
      throw new IllegalArgumentException("Invalid value for phone. Length must be greater than or equal to 1.");
    }
    this.phone = phone;
  }


  public ConnectFedexRequestBody postalCode(String postalCode) {
    
    
    if (postalCode != null && postalCode.length() < 1) {
      throw new IllegalArgumentException("Invalid value for postalCode. Length must be greater than or equal to 1.");
    }
    
    this.postalCode = postalCode;
    return this;
  }

   /**
   * Postal Code
   * @return postalCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Postal Code")

  public String getPostalCode() {
    return postalCode;
  }


  public void setPostalCode(String postalCode) {
    
    
    if (postalCode != null && postalCode.length() < 1) {
      throw new IllegalArgumentException("Invalid value for postalCode. Length must be greater than or equal to 1.");
    }
    this.postalCode = postalCode;
  }


  public ConnectFedexRequestBody state(String state) {
    
    
    if (state != null && state.length() < 1) {
      throw new IllegalArgumentException("Invalid value for state. Length must be greater than or equal to 1.");
    }
    
    this.state = state;
    return this;
  }

   /**
   * State
   * @return state
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "State")

  public String getState() {
    return state;
  }


  public void setState(String state) {
    
    
    if (state != null && state.length() < 1) {
      throw new IllegalArgumentException("Invalid value for state. Length must be greater than or equal to 1.");
    }
    this.state = state;
  }


  public ConnectFedexRequestBody nickname(String nickname) {
    
    
    if (nickname != null && nickname.length() < 1) {
      throw new IllegalArgumentException("Invalid value for nickname. Length must be greater than or equal to 1.");
    }
    
    this.nickname = nickname;
    return this;
  }

   /**
   * Nickname
   * @return nickname
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Nickname")

  public String getNickname() {
    return nickname;
  }


  public void setNickname(String nickname) {
    
    
    if (nickname != null && nickname.length() < 1) {
      throw new IllegalArgumentException("Invalid value for nickname. Length must be greater than or equal to 1.");
    }
    this.nickname = nickname;
  }


  public ConnectFedexRequestBody agreeToEula(Boolean agreeToEula) {
    
    
    
    
    this.agreeToEula = agreeToEula;
    return this;
  }

   /**
   * Boolean signaling agreement to the Fedex End User License Agreement
   * @return agreeToEula
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Boolean signaling agreement to the Fedex End User License Agreement")

  public Boolean getAgreeToEula() {
    return agreeToEula;
  }


  public void setAgreeToEula(Boolean agreeToEula) {
    
    
    
    this.agreeToEula = agreeToEula;
  }


  public ConnectFedexRequestBody meterNumber(String meterNumber) {
    
    
    if (meterNumber != null && meterNumber.length() < 1) {
      throw new IllegalArgumentException("Invalid value for meterNumber. Length must be greater than or equal to 1.");
    }
    
    this.meterNumber = meterNumber;
    return this;
  }

   /**
   * Meter number
   * @return meterNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Meter number")

  public String getMeterNumber() {
    return meterNumber;
  }


  public void setMeterNumber(String meterNumber) {
    
    
    if (meterNumber != null && meterNumber.length() < 1) {
      throw new IllegalArgumentException("Invalid value for meterNumber. Length must be greater than or equal to 1.");
    }
    this.meterNumber = meterNumber;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ConnectFedexRequestBody instance itself
   */
  public ConnectFedexRequestBody putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectFedexRequestBody connectFedexRequestBody = (ConnectFedexRequestBody) o;
    return Objects.equals(this.accountNumber, connectFedexRequestBody.accountNumber) &&
        Objects.equals(this.address1, connectFedexRequestBody.address1) &&
        Objects.equals(this.address2, connectFedexRequestBody.address2) &&
        Objects.equals(this.city, connectFedexRequestBody.city) &&
        Objects.equals(this.company, connectFedexRequestBody.company) &&
        Objects.equals(this.countryCode, connectFedexRequestBody.countryCode) &&
        Objects.equals(this.email, connectFedexRequestBody.email) &&
        Objects.equals(this.firstName, connectFedexRequestBody.firstName) &&
        Objects.equals(this.lastName, connectFedexRequestBody.lastName) &&
        Objects.equals(this.phone, connectFedexRequestBody.phone) &&
        Objects.equals(this.postalCode, connectFedexRequestBody.postalCode) &&
        Objects.equals(this.state, connectFedexRequestBody.state) &&
        Objects.equals(this.nickname, connectFedexRequestBody.nickname) &&
        Objects.equals(this.agreeToEula, connectFedexRequestBody.agreeToEula) &&
        Objects.equals(this.meterNumber, connectFedexRequestBody.meterNumber)&&
        Objects.equals(this.additionalProperties, connectFedexRequestBody.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountNumber, address1, address2, city, company, countryCode, email, firstName, lastName, phone, postalCode, state, nickname, agreeToEula, meterNumber, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectFedexRequestBody {\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    address1: ").append(toIndentedString(address1)).append("\n");
    sb.append("    address2: ").append(toIndentedString(address2)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    nickname: ").append(toIndentedString(nickname)).append("\n");
    sb.append("    agreeToEula: ").append(toIndentedString(agreeToEula)).append("\n");
    sb.append("    meterNumber: ").append(toIndentedString(meterNumber)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_number");
    openapiFields.add("address1");
    openapiFields.add("address2");
    openapiFields.add("city");
    openapiFields.add("company");
    openapiFields.add("country_code");
    openapiFields.add("email");
    openapiFields.add("first_name");
    openapiFields.add("last_name");
    openapiFields.add("phone");
    openapiFields.add("postal_code");
    openapiFields.add("state");
    openapiFields.add("nickname");
    openapiFields.add("agree_to_eula");
    openapiFields.add("meter_number");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("account_number");
    openapiRequiredFields.add("address1");
    openapiRequiredFields.add("city");
    openapiRequiredFields.add("country_code");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("first_name");
    openapiRequiredFields.add("last_name");
    openapiRequiredFields.add("phone");
    openapiRequiredFields.add("postal_code");
    openapiRequiredFields.add("state");
    openapiRequiredFields.add("nickname");
    openapiRequiredFields.add("agree_to_eula");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConnectFedexRequestBody
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ConnectFedexRequestBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectFedexRequestBody is not found in the empty JSON string", ConnectFedexRequestBody.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConnectFedexRequestBody.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("account_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_number").toString()));
      }
      if (!jsonObj.get("address1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address1").toString()));
      }
      if ((jsonObj.get("address2") != null && !jsonObj.get("address2").isJsonNull()) && !jsonObj.get("address2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address2").toString()));
      }
      if (!jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("company") != null && !jsonObj.get("company").isJsonNull()) && !jsonObj.get("company").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company").toString()));
      }
      if (!jsonObj.get("country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_code").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
      }
      if (!jsonObj.get("last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_name").toString()));
      }
      if (!jsonObj.get("phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone").toString()));
      }
      if (!jsonObj.get("postal_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postal_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postal_code").toString()));
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if (!jsonObj.get("nickname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nickname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nickname").toString()));
      }
      if ((jsonObj.get("meter_number") != null && !jsonObj.get("meter_number").isJsonNull()) && !jsonObj.get("meter_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meter_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meter_number").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectFedexRequestBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectFedexRequestBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectFedexRequestBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectFedexRequestBody.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectFedexRequestBody>() {
           @Override
           public void write(JsonWriter out, ConnectFedexRequestBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectFedexRequestBody read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ConnectFedexRequestBody instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConnectFedexRequestBody given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConnectFedexRequestBody
  * @throws IOException if the JSON string is invalid with respect to ConnectFedexRequestBody
  */
  public static ConnectFedexRequestBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectFedexRequestBody.class);
  }

 /**
  * Convert an instance of ConnectFedexRequestBody to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

