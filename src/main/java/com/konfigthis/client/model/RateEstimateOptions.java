/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202403202303
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AddressResidentialIndicator;
import com.konfigthis.client.model.DeliveryConfirmation;
import com.konfigthis.client.model.Dimensions;
import com.konfigthis.client.model.Weight;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * RateEstimateOptions
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class RateEstimateOptions {
  public static final String SERIALIZED_NAME_FROM_COUNTRY_CODE = "from_country_code";
  @SerializedName(SERIALIZED_NAME_FROM_COUNTRY_CODE)
  private String fromCountryCode;

  public static final String SERIALIZED_NAME_FROM_POSTAL_CODE = "from_postal_code";
  @SerializedName(SERIALIZED_NAME_FROM_POSTAL_CODE)
  private String fromPostalCode;

  public static final String SERIALIZED_NAME_FROM_CITY_LOCALITY = "from_city_locality";
  @SerializedName(SERIALIZED_NAME_FROM_CITY_LOCALITY)
  private String fromCityLocality;

  public static final String SERIALIZED_NAME_FROM_STATE_PROVINCE = "from_state_province";
  @SerializedName(SERIALIZED_NAME_FROM_STATE_PROVINCE)
  private String fromStateProvince;

  public static final String SERIALIZED_NAME_TO_COUNTRY_CODE = "to_country_code";
  @SerializedName(SERIALIZED_NAME_TO_COUNTRY_CODE)
  private String toCountryCode;

  public static final String SERIALIZED_NAME_TO_POSTAL_CODE = "to_postal_code";
  @SerializedName(SERIALIZED_NAME_TO_POSTAL_CODE)
  private String toPostalCode;

  public static final String SERIALIZED_NAME_TO_CITY_LOCALITY = "to_city_locality";
  @SerializedName(SERIALIZED_NAME_TO_CITY_LOCALITY)
  private String toCityLocality;

  public static final String SERIALIZED_NAME_TO_STATE_PROVINCE = "to_state_province";
  @SerializedName(SERIALIZED_NAME_TO_STATE_PROVINCE)
  private String toStateProvince;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Weight weight;

  public static final String SERIALIZED_NAME_DIMENSIONS = "dimensions";
  @SerializedName(SERIALIZED_NAME_DIMENSIONS)
  private Dimensions dimensions;

  public static final String SERIALIZED_NAME_CONFIRMATION = "confirmation";
  @SerializedName(SERIALIZED_NAME_CONFIRMATION)
  private DeliveryConfirmation confirmation;

  public static final String SERIALIZED_NAME_ADDRESS_RESIDENTIAL_INDICATOR = "address_residential_indicator";
  @SerializedName(SERIALIZED_NAME_ADDRESS_RESIDENTIAL_INDICATOR)
  private AddressResidentialIndicator addressResidentialIndicator;

  public static final String SERIALIZED_NAME_SHIP_DATE = "ship_date";
  @SerializedName(SERIALIZED_NAME_SHIP_DATE)
  private OffsetDateTime shipDate;

  public RateEstimateOptions() {
  }

  public RateEstimateOptions fromCountryCode(String fromCountryCode) {
    
    
    if (fromCountryCode != null && fromCountryCode.length() < 2) {
      throw new IllegalArgumentException("Invalid value for fromCountryCode. Length must be greater than or equal to 2.");
    }
    
    this.fromCountryCode = fromCountryCode;
    return this;
  }

   /**
   * A two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1) 
   * @return fromCountryCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CA", value = "A two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1) ")

  public String getFromCountryCode() {
    return fromCountryCode;
  }


  public void setFromCountryCode(String fromCountryCode) {
    
    
    if (fromCountryCode != null && fromCountryCode.length() < 2) {
      throw new IllegalArgumentException("Invalid value for fromCountryCode. Length must be greater than or equal to 2.");
    }
    this.fromCountryCode = fromCountryCode;
  }


  public RateEstimateOptions fromPostalCode(String fromPostalCode) {
    
    
    if (fromPostalCode != null && fromPostalCode.length() < 1) {
      throw new IllegalArgumentException("Invalid value for fromPostalCode. Length must be greater than or equal to 1.");
    }
    
    this.fromPostalCode = fromPostalCode;
    return this;
  }

   /**
   * postal code
   * @return fromPostalCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "78756-3717", value = "postal code")

  public String getFromPostalCode() {
    return fromPostalCode;
  }


  public void setFromPostalCode(String fromPostalCode) {
    
    
    if (fromPostalCode != null && fromPostalCode.length() < 1) {
      throw new IllegalArgumentException("Invalid value for fromPostalCode. Length must be greater than or equal to 1.");
    }
    this.fromPostalCode = fromPostalCode;
  }


  public RateEstimateOptions fromCityLocality(String fromCityLocality) {
    
    
    if (fromCityLocality != null && fromCityLocality.length() < 1) {
      throw new IllegalArgumentException("Invalid value for fromCityLocality. Length must be greater than or equal to 1.");
    }
    
    this.fromCityLocality = fromCityLocality;
    return this;
  }

   /**
   * from postal code
   * @return fromCityLocality
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Austin", value = "from postal code")

  public String getFromCityLocality() {
    return fromCityLocality;
  }


  public void setFromCityLocality(String fromCityLocality) {
    
    
    if (fromCityLocality != null && fromCityLocality.length() < 1) {
      throw new IllegalArgumentException("Invalid value for fromCityLocality. Length must be greater than or equal to 1.");
    }
    this.fromCityLocality = fromCityLocality;
  }


  public RateEstimateOptions fromStateProvince(String fromStateProvince) {
    
    
    if (fromStateProvince != null && fromStateProvince.length() < 1) {
      throw new IllegalArgumentException("Invalid value for fromStateProvince. Length must be greater than or equal to 1.");
    }
    
    this.fromStateProvince = fromStateProvince;
    return this;
  }

   /**
   * From state province
   * @return fromStateProvince
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Austin", value = "From state province")

  public String getFromStateProvince() {
    return fromStateProvince;
  }


  public void setFromStateProvince(String fromStateProvince) {
    
    
    if (fromStateProvince != null && fromStateProvince.length() < 1) {
      throw new IllegalArgumentException("Invalid value for fromStateProvince. Length must be greater than or equal to 1.");
    }
    this.fromStateProvince = fromStateProvince;
  }


  public RateEstimateOptions toCountryCode(String toCountryCode) {
    
    
    if (toCountryCode != null && toCountryCode.length() < 2) {
      throw new IllegalArgumentException("Invalid value for toCountryCode. Length must be greater than or equal to 2.");
    }
    
    this.toCountryCode = toCountryCode;
    return this;
  }

   /**
   * A two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1) 
   * @return toCountryCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CA", value = "A two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1) ")

  public String getToCountryCode() {
    return toCountryCode;
  }


  public void setToCountryCode(String toCountryCode) {
    
    
    if (toCountryCode != null && toCountryCode.length() < 2) {
      throw new IllegalArgumentException("Invalid value for toCountryCode. Length must be greater than or equal to 2.");
    }
    this.toCountryCode = toCountryCode;
  }


  public RateEstimateOptions toPostalCode(String toPostalCode) {
    
    
    if (toPostalCode != null && toPostalCode.length() < 1) {
      throw new IllegalArgumentException("Invalid value for toPostalCode. Length must be greater than or equal to 1.");
    }
    
    this.toPostalCode = toPostalCode;
    return this;
  }

   /**
   * postal code
   * @return toPostalCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "78756-3717", value = "postal code")

  public String getToPostalCode() {
    return toPostalCode;
  }


  public void setToPostalCode(String toPostalCode) {
    
    
    if (toPostalCode != null && toPostalCode.length() < 1) {
      throw new IllegalArgumentException("Invalid value for toPostalCode. Length must be greater than or equal to 1.");
    }
    this.toPostalCode = toPostalCode;
  }


  public RateEstimateOptions toCityLocality(String toCityLocality) {
    
    
    if (toCityLocality != null && toCityLocality.length() < 1) {
      throw new IllegalArgumentException("Invalid value for toCityLocality. Length must be greater than or equal to 1.");
    }
    
    this.toCityLocality = toCityLocality;
    return this;
  }

   /**
   * The city locality the package is being shipped to
   * @return toCityLocality
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Austin", value = "The city locality the package is being shipped to")

  public String getToCityLocality() {
    return toCityLocality;
  }


  public void setToCityLocality(String toCityLocality) {
    
    
    if (toCityLocality != null && toCityLocality.length() < 1) {
      throw new IllegalArgumentException("Invalid value for toCityLocality. Length must be greater than or equal to 1.");
    }
    this.toCityLocality = toCityLocality;
  }


  public RateEstimateOptions toStateProvince(String toStateProvince) {
    
    
    if (toStateProvince != null && toStateProvince.length() < 1) {
      throw new IllegalArgumentException("Invalid value for toStateProvince. Length must be greater than or equal to 1.");
    }
    
    this.toStateProvince = toStateProvince;
    return this;
  }

   /**
   * To state province
   * @return toStateProvince
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Houston", value = "To state province")

  public String getToStateProvince() {
    return toStateProvince;
  }


  public void setToStateProvince(String toStateProvince) {
    
    
    if (toStateProvince != null && toStateProvince.length() < 1) {
      throw new IllegalArgumentException("Invalid value for toStateProvince. Length must be greater than or equal to 1.");
    }
    this.toStateProvince = toStateProvince;
  }


  public RateEstimateOptions weight(Weight weight) {
    
    
    
    
    this.weight = weight;
    return this;
  }

   /**
   * The weight of the package
   * @return weight
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The weight of the package")

  public Weight getWeight() {
    return weight;
  }


  public void setWeight(Weight weight) {
    
    
    
    this.weight = weight;
  }


  public RateEstimateOptions dimensions(Dimensions dimensions) {
    
    
    
    
    this.dimensions = dimensions;
    return this;
  }

   /**
   * The dimensions of the package
   * @return dimensions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The dimensions of the package")

  public Dimensions getDimensions() {
    return dimensions;
  }


  public void setDimensions(Dimensions dimensions) {
    
    
    
    this.dimensions = dimensions;
  }


  public RateEstimateOptions confirmation(DeliveryConfirmation confirmation) {
    
    
    
    
    this.confirmation = confirmation;
    return this;
  }

   /**
   * Get confirmation
   * @return confirmation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DeliveryConfirmation getConfirmation() {
    return confirmation;
  }


  public void setConfirmation(DeliveryConfirmation confirmation) {
    
    
    
    this.confirmation = confirmation;
  }


  public RateEstimateOptions addressResidentialIndicator(AddressResidentialIndicator addressResidentialIndicator) {
    
    
    
    
    this.addressResidentialIndicator = addressResidentialIndicator;
    return this;
  }

   /**
   * Get addressResidentialIndicator
   * @return addressResidentialIndicator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AddressResidentialIndicator getAddressResidentialIndicator() {
    return addressResidentialIndicator;
  }


  public void setAddressResidentialIndicator(AddressResidentialIndicator addressResidentialIndicator) {
    
    
    
    this.addressResidentialIndicator = addressResidentialIndicator;
  }


  public RateEstimateOptions shipDate(OffsetDateTime shipDate) {
    
    
    
    
    this.shipDate = shipDate;
    return this;
  }

   /**
   * An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date and time. 
   * @return shipDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2018-09-23T15:00Z", value = "An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date and time. ")

  public OffsetDateTime getShipDate() {
    return shipDate;
  }


  public void setShipDate(OffsetDateTime shipDate) {
    
    
    
    this.shipDate = shipDate;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the RateEstimateOptions instance itself
   */
  public RateEstimateOptions putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RateEstimateOptions rateEstimateOptions = (RateEstimateOptions) o;
    return Objects.equals(this.fromCountryCode, rateEstimateOptions.fromCountryCode) &&
        Objects.equals(this.fromPostalCode, rateEstimateOptions.fromPostalCode) &&
        Objects.equals(this.fromCityLocality, rateEstimateOptions.fromCityLocality) &&
        Objects.equals(this.fromStateProvince, rateEstimateOptions.fromStateProvince) &&
        Objects.equals(this.toCountryCode, rateEstimateOptions.toCountryCode) &&
        Objects.equals(this.toPostalCode, rateEstimateOptions.toPostalCode) &&
        Objects.equals(this.toCityLocality, rateEstimateOptions.toCityLocality) &&
        Objects.equals(this.toStateProvince, rateEstimateOptions.toStateProvince) &&
        Objects.equals(this.weight, rateEstimateOptions.weight) &&
        Objects.equals(this.dimensions, rateEstimateOptions.dimensions) &&
        Objects.equals(this.confirmation, rateEstimateOptions.confirmation) &&
        Objects.equals(this.addressResidentialIndicator, rateEstimateOptions.addressResidentialIndicator) &&
        Objects.equals(this.shipDate, rateEstimateOptions.shipDate)&&
        Objects.equals(this.additionalProperties, rateEstimateOptions.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fromCountryCode, fromPostalCode, fromCityLocality, fromStateProvince, toCountryCode, toPostalCode, toCityLocality, toStateProvince, weight, dimensions, confirmation, addressResidentialIndicator, shipDate, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RateEstimateOptions {\n");
    sb.append("    fromCountryCode: ").append(toIndentedString(fromCountryCode)).append("\n");
    sb.append("    fromPostalCode: ").append(toIndentedString(fromPostalCode)).append("\n");
    sb.append("    fromCityLocality: ").append(toIndentedString(fromCityLocality)).append("\n");
    sb.append("    fromStateProvince: ").append(toIndentedString(fromStateProvince)).append("\n");
    sb.append("    toCountryCode: ").append(toIndentedString(toCountryCode)).append("\n");
    sb.append("    toPostalCode: ").append(toIndentedString(toPostalCode)).append("\n");
    sb.append("    toCityLocality: ").append(toIndentedString(toCityLocality)).append("\n");
    sb.append("    toStateProvince: ").append(toIndentedString(toStateProvince)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    dimensions: ").append(toIndentedString(dimensions)).append("\n");
    sb.append("    confirmation: ").append(toIndentedString(confirmation)).append("\n");
    sb.append("    addressResidentialIndicator: ").append(toIndentedString(addressResidentialIndicator)).append("\n");
    sb.append("    shipDate: ").append(toIndentedString(shipDate)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("from_country_code");
    openapiFields.add("from_postal_code");
    openapiFields.add("from_city_locality");
    openapiFields.add("from_state_province");
    openapiFields.add("to_country_code");
    openapiFields.add("to_postal_code");
    openapiFields.add("to_city_locality");
    openapiFields.add("to_state_province");
    openapiFields.add("weight");
    openapiFields.add("dimensions");
    openapiFields.add("confirmation");
    openapiFields.add("address_residential_indicator");
    openapiFields.add("ship_date");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RateEstimateOptions
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RateEstimateOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RateEstimateOptions is not found in the empty JSON string", RateEstimateOptions.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("from_country_code") != null && !jsonObj.get("from_country_code").isJsonNull()) && !jsonObj.get("from_country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from_country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from_country_code").toString()));
      }
      if ((jsonObj.get("from_postal_code") != null && !jsonObj.get("from_postal_code").isJsonNull()) && !jsonObj.get("from_postal_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from_postal_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from_postal_code").toString()));
      }
      if ((jsonObj.get("from_city_locality") != null && !jsonObj.get("from_city_locality").isJsonNull()) && !jsonObj.get("from_city_locality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from_city_locality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from_city_locality").toString()));
      }
      if ((jsonObj.get("from_state_province") != null && !jsonObj.get("from_state_province").isJsonNull()) && !jsonObj.get("from_state_province").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from_state_province` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from_state_province").toString()));
      }
      if ((jsonObj.get("to_country_code") != null && !jsonObj.get("to_country_code").isJsonNull()) && !jsonObj.get("to_country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to_country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to_country_code").toString()));
      }
      if ((jsonObj.get("to_postal_code") != null && !jsonObj.get("to_postal_code").isJsonNull()) && !jsonObj.get("to_postal_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to_postal_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to_postal_code").toString()));
      }
      if ((jsonObj.get("to_city_locality") != null && !jsonObj.get("to_city_locality").isJsonNull()) && !jsonObj.get("to_city_locality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to_city_locality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to_city_locality").toString()));
      }
      if ((jsonObj.get("to_state_province") != null && !jsonObj.get("to_state_province").isJsonNull()) && !jsonObj.get("to_state_province").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to_state_province` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to_state_province").toString()));
      }
      // validate the optional field `weight`
      if (jsonObj.get("weight") != null && !jsonObj.get("weight").isJsonNull()) {
        Weight.validateJsonObject(jsonObj.getAsJsonObject("weight"));
      }
      // validate the optional field `dimensions`
      if (jsonObj.get("dimensions") != null && !jsonObj.get("dimensions").isJsonNull()) {
        Dimensions.validateJsonObject(jsonObj.getAsJsonObject("dimensions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RateEstimateOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RateEstimateOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RateEstimateOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RateEstimateOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<RateEstimateOptions>() {
           @Override
           public void write(JsonWriter out, RateEstimateOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public RateEstimateOptions read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             RateEstimateOptions instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RateEstimateOptions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RateEstimateOptions
  * @throws IOException if the JSON string is invalid with respect to RateEstimateOptions
  */
  public static RateEstimateOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RateEstimateOptions.class);
  }

 /**
  * Convert an instance of RateEstimateOptions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

