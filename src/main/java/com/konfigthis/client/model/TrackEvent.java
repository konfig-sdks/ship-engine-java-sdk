/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202403202303
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.StatusCode;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * A track event
 */
@ApiModel(description = "A track event")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TrackEvent {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_OCCURRED_AT = "occurred_at";
  @SerializedName(SERIALIZED_NAME_OCCURRED_AT)
  private OffsetDateTime occurredAt;

  public static final String SERIALIZED_NAME_CARRIER_OCCURRED_AT = "carrier_occurred_at";
  @SerializedName(SERIALIZED_NAME_CARRIER_OCCURRED_AT)
  private OffsetDateTime carrierOccurredAt;

  public static final String SERIALIZED_NAME_CITY_LOCALITY = "city_locality";
  @SerializedName(SERIALIZED_NAME_CITY_LOCALITY)
  private String cityLocality;

  public static final String SERIALIZED_NAME_STATE_PROVINCE = "state_province";
  @SerializedName(SERIALIZED_NAME_STATE_PROVINCE)
  private String stateProvince;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postal_code";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "country_code";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "company_name";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_SIGNER = "signer";
  @SerializedName(SERIALIZED_NAME_SIGNER)
  private String signer;

  public static final String SERIALIZED_NAME_EVENT_CODE = "event_code";
  @SerializedName(SERIALIZED_NAME_EVENT_CODE)
  private String eventCode;

  public static final String SERIALIZED_NAME_CARRIER_DETAIL_CODE = "carrier_detail_code";
  @SerializedName(SERIALIZED_NAME_CARRIER_DETAIL_CODE)
  private String carrierDetailCode;

  public static final String SERIALIZED_NAME_STATUS_CODE = "status_code";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private StatusCode statusCode;

  public static final String SERIALIZED_NAME_STATUS_DESCRIPTION = "status_description";
  @SerializedName(SERIALIZED_NAME_STATUS_DESCRIPTION)
  private String statusDescription;

  public static final String SERIALIZED_NAME_CARRIER_STATUS_CODE = "carrier_status_code";
  @SerializedName(SERIALIZED_NAME_CARRIER_STATUS_CODE)
  private String carrierStatusCode;

  public static final String SERIALIZED_NAME_CARRIER_STATUS_DESCRIPTION = "carrier_status_description";
  @SerializedName(SERIALIZED_NAME_CARRIER_STATUS_DESCRIPTION)
  private String carrierStatusDescription;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private Double latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private Double longitude;

  public TrackEvent() {
  }

  
  public TrackEvent(
     String description, 
     String cityLocality, 
     String stateProvince, 
     String postalCode, 
     String companyName, 
     String signer, 
     String carrierDetailCode, 
     String statusDescription, 
     String carrierStatusCode, 
     String carrierStatusDescription
  ) {
    this();
    this.description = description;
    this.cityLocality = cityLocality;
    this.stateProvince = stateProvince;
    this.postalCode = postalCode;
    this.companyName = companyName;
    this.signer = signer;
    this.carrierDetailCode = carrierDetailCode;
    this.statusDescription = statusDescription;
    this.carrierStatusCode = carrierStatusCode;
    this.carrierStatusDescription = carrierStatusDescription;
  }

   /**
   * Event description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Delivered, In/At Mailbox", value = "Event description")

  public String getDescription() {
    return description;
  }




  public TrackEvent occurredAt(OffsetDateTime occurredAt) {
    
    
    
    
    this.occurredAt = occurredAt;
    return this;
  }

   /**
   * An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date and time. 
   * @return occurredAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2018-09-23T15:00Z", required = true, value = "An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date and time. ")

  public OffsetDateTime getOccurredAt() {
    return occurredAt;
  }


  public void setOccurredAt(OffsetDateTime occurredAt) {
    
    
    
    this.occurredAt = occurredAt;
  }


  public TrackEvent carrierOccurredAt(OffsetDateTime carrierOccurredAt) {
    
    
    
    
    this.carrierOccurredAt = carrierOccurredAt;
    return this;
  }

   /**
   * An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date and time. 
   * @return carrierOccurredAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2018-09-23T15:00Z", value = "An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date and time. ")

  public OffsetDateTime getCarrierOccurredAt() {
    return carrierOccurredAt;
  }


  public void setCarrierOccurredAt(OffsetDateTime carrierOccurredAt) {
    
    
    
    this.carrierOccurredAt = carrierOccurredAt;
  }


   /**
   * City locality
   * @return cityLocality
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "AUSTIN", required = true, value = "City locality")

  public String getCityLocality() {
    return cityLocality;
  }




   /**
   * State province
   * @return stateProvince
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "TX", required = true, value = "State province")

  public String getStateProvince() {
    return stateProvince;
  }




   /**
   * Postal code
   * @return postalCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "78756", required = true, value = "Postal code")

  public String getPostalCode() {
    return postalCode;
  }




  public TrackEvent countryCode(String countryCode) {
    
    
    if (countryCode != null && countryCode.length() < 2) {
      throw new IllegalArgumentException("Invalid value for countryCode. Length must be greater than or equal to 2.");
    }
    
    this.countryCode = countryCode;
    return this;
  }

   /**
   * A two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1) 
   * @return countryCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CA", value = "A two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1) ")

  public String getCountryCode() {
    return countryCode;
  }


  public void setCountryCode(String countryCode) {
    
    
    if (countryCode != null && countryCode.length() < 2) {
      throw new IllegalArgumentException("Invalid value for countryCode. Length must be greater than or equal to 2.");
    }
    this.countryCode = countryCode;
  }


   /**
   * Company Name
   * @return companyName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Stamps.com", value = "Company Name")

  public String getCompanyName() {
    return companyName;
  }




   /**
   * Signer information
   * @return signer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Signer information")

  public String getSigner() {
    return signer;
  }




  public TrackEvent eventCode(String eventCode) {
    
    
    if (eventCode != null && eventCode.length() < 0) {
      throw new IllegalArgumentException("Invalid value for eventCode. Length must be greater than or equal to 0.");
    }
    
    this.eventCode = eventCode;
    return this;
  }

   /**
   * Event Code
   * @return eventCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Event Code")

  public String getEventCode() {
    return eventCode;
  }


  public void setEventCode(String eventCode) {
    
    
    if (eventCode != null && eventCode.length() < 0) {
      throw new IllegalArgumentException("Invalid value for eventCode. Length must be greater than or equal to 0.");
    }
    this.eventCode = eventCode;
  }


   /**
   * Carrier detail code
   * @return carrierDetailCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "OT", required = true, value = "Carrier detail code")

  public String getCarrierDetailCode() {
    return carrierDetailCode;
  }




  public TrackEvent statusCode(StatusCode statusCode) {
    
    
    
    
    this.statusCode = statusCode;
    return this;
  }

   /**
   * Get statusCode
   * @return statusCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public StatusCode getStatusCode() {
    return statusCode;
  }


  public void setStatusCode(StatusCode statusCode) {
    
    
    
    this.statusCode = statusCode;
  }


   /**
   * Event Status Description
   * @return statusDescription
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "In Transit", required = true, value = "Event Status Description")

  public String getStatusDescription() {
    return statusDescription;
  }




   /**
   * Carrier status code
   * @return carrierStatusCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1", required = true, value = "Carrier status code")

  public String getCarrierStatusCode() {
    return carrierStatusCode;
  }




   /**
   * carrier status description
   * @return carrierStatusDescription
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Your item was delivered in or at the mailbox at 9:10 am on March", required = true, value = "carrier status description")

  public String getCarrierStatusDescription() {
    return carrierStatusDescription;
  }




  public TrackEvent latitude(Double latitude) {
    if (latitude != null && latitude < -90) {
      throw new IllegalArgumentException("Invalid value for latitude. Must be greater than or equal to -90.");
    }
    if (latitude != null && latitude > 90) {
      throw new IllegalArgumentException("Invalid value for latitude. Must be less than or equal to 90.");
    }
    
    
    this.latitude = latitude;
    return this;
  }

   /**
   * Latitude coordinate of tracking event.
   * minimum: -90
   * maximum: 90
   * @return latitude
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Latitude coordinate of tracking event.")

  public Double getLatitude() {
    return latitude;
  }


  public void setLatitude(Double latitude) {
    if (latitude != null && latitude < -90) {
      throw new IllegalArgumentException("Invalid value for latitude. Must be greater than or equal to -90.");
    }
    if (latitude != null && latitude > 90) {
      throw new IllegalArgumentException("Invalid value for latitude. Must be less than or equal to 90.");
    }
    
    this.latitude = latitude;
  }


  public TrackEvent longitude(Double longitude) {
    if (longitude != null && longitude < -180) {
      throw new IllegalArgumentException("Invalid value for longitude. Must be greater than or equal to -180.");
    }
    if (longitude != null && longitude > 180) {
      throw new IllegalArgumentException("Invalid value for longitude. Must be less than or equal to 180.");
    }
    
    
    this.longitude = longitude;
    return this;
  }

   /**
   * Longitude coordinate of tracking event.
   * minimum: -180
   * maximum: 180
   * @return longitude
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Longitude coordinate of tracking event.")

  public Double getLongitude() {
    return longitude;
  }


  public void setLongitude(Double longitude) {
    if (longitude != null && longitude < -180) {
      throw new IllegalArgumentException("Invalid value for longitude. Must be greater than or equal to -180.");
    }
    if (longitude != null && longitude > 180) {
      throw new IllegalArgumentException("Invalid value for longitude. Must be less than or equal to 180.");
    }
    
    this.longitude = longitude;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TrackEvent instance itself
   */
  public TrackEvent putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrackEvent trackEvent = (TrackEvent) o;
    return Objects.equals(this.description, trackEvent.description) &&
        Objects.equals(this.occurredAt, trackEvent.occurredAt) &&
        Objects.equals(this.carrierOccurredAt, trackEvent.carrierOccurredAt) &&
        Objects.equals(this.cityLocality, trackEvent.cityLocality) &&
        Objects.equals(this.stateProvince, trackEvent.stateProvince) &&
        Objects.equals(this.postalCode, trackEvent.postalCode) &&
        Objects.equals(this.countryCode, trackEvent.countryCode) &&
        Objects.equals(this.companyName, trackEvent.companyName) &&
        Objects.equals(this.signer, trackEvent.signer) &&
        Objects.equals(this.eventCode, trackEvent.eventCode) &&
        Objects.equals(this.carrierDetailCode, trackEvent.carrierDetailCode) &&
        Objects.equals(this.statusCode, trackEvent.statusCode) &&
        Objects.equals(this.statusDescription, trackEvent.statusDescription) &&
        Objects.equals(this.carrierStatusCode, trackEvent.carrierStatusCode) &&
        Objects.equals(this.carrierStatusDescription, trackEvent.carrierStatusDescription) &&
        Objects.equals(this.latitude, trackEvent.latitude) &&
        Objects.equals(this.longitude, trackEvent.longitude)&&
        Objects.equals(this.additionalProperties, trackEvent.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, occurredAt, carrierOccurredAt, cityLocality, stateProvince, postalCode, countryCode, companyName, signer, eventCode, carrierDetailCode, statusCode, statusDescription, carrierStatusCode, carrierStatusDescription, latitude, longitude, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrackEvent {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    occurredAt: ").append(toIndentedString(occurredAt)).append("\n");
    sb.append("    carrierOccurredAt: ").append(toIndentedString(carrierOccurredAt)).append("\n");
    sb.append("    cityLocality: ").append(toIndentedString(cityLocality)).append("\n");
    sb.append("    stateProvince: ").append(toIndentedString(stateProvince)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    signer: ").append(toIndentedString(signer)).append("\n");
    sb.append("    eventCode: ").append(toIndentedString(eventCode)).append("\n");
    sb.append("    carrierDetailCode: ").append(toIndentedString(carrierDetailCode)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    statusDescription: ").append(toIndentedString(statusDescription)).append("\n");
    sb.append("    carrierStatusCode: ").append(toIndentedString(carrierStatusCode)).append("\n");
    sb.append("    carrierStatusDescription: ").append(toIndentedString(carrierStatusDescription)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("occurred_at");
    openapiFields.add("carrier_occurred_at");
    openapiFields.add("city_locality");
    openapiFields.add("state_province");
    openapiFields.add("postal_code");
    openapiFields.add("country_code");
    openapiFields.add("company_name");
    openapiFields.add("signer");
    openapiFields.add("event_code");
    openapiFields.add("carrier_detail_code");
    openapiFields.add("status_code");
    openapiFields.add("status_description");
    openapiFields.add("carrier_status_code");
    openapiFields.add("carrier_status_description");
    openapiFields.add("latitude");
    openapiFields.add("longitude");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("occurred_at");
    openapiRequiredFields.add("city_locality");
    openapiRequiredFields.add("state_province");
    openapiRequiredFields.add("postal_code");
    openapiRequiredFields.add("carrier_detail_code");
    openapiRequiredFields.add("status_code");
    openapiRequiredFields.add("status_description");
    openapiRequiredFields.add("carrier_status_code");
    openapiRequiredFields.add("carrier_status_description");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TrackEvent
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TrackEvent.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrackEvent is not found in the empty JSON string", TrackEvent.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TrackEvent.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("city_locality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city_locality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city_locality").toString()));
      }
      if (!jsonObj.get("state_province").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state_province` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state_province").toString()));
      }
      if (!jsonObj.get("postal_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postal_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postal_code").toString()));
      }
      if ((jsonObj.get("country_code") != null && !jsonObj.get("country_code").isJsonNull()) && !jsonObj.get("country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_code").toString()));
      }
      if ((jsonObj.get("company_name") != null && !jsonObj.get("company_name").isJsonNull()) && !jsonObj.get("company_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_name").toString()));
      }
      if ((jsonObj.get("signer") != null && !jsonObj.get("signer").isJsonNull()) && !jsonObj.get("signer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signer").toString()));
      }
      if ((jsonObj.get("event_code") != null && !jsonObj.get("event_code").isJsonNull()) && !jsonObj.get("event_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_code").toString()));
      }
      if (!jsonObj.get("carrier_detail_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_detail_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier_detail_code").toString()));
      }
      if (!jsonObj.get("status_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status_description").toString()));
      }
      if (!jsonObj.get("carrier_status_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_status_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier_status_code").toString()));
      }
      if (!jsonObj.get("carrier_status_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_status_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier_status_description").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrackEvent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrackEvent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrackEvent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrackEvent.class));

       return (TypeAdapter<T>) new TypeAdapter<TrackEvent>() {
           @Override
           public void write(JsonWriter out, TrackEvent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TrackEvent read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TrackEvent instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TrackEvent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TrackEvent
  * @throws IOException if the JSON string is invalid with respect to TrackEvent
  */
  public static TrackEvent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrackEvent.class);
  }

 /**
  * Convert an instance of TrackEvent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

