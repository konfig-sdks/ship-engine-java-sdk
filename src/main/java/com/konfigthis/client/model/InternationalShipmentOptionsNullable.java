/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202403202303
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AllowedIncoterms;
import com.konfigthis.client.model.CustomsItem;
import com.konfigthis.client.model.ImporterOfRecords;
import com.konfigthis.client.model.InvoiceAdditionalDetails;
import com.konfigthis.client.model.NonDelivery;
import com.konfigthis.client.model.PackageContents;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Options for international shipments, such as customs declarations.
 */
@ApiModel(description = "Options for international shipments, such as customs declarations.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class InternationalShipmentOptionsNullable {
  public static final String SERIALIZED_NAME_CONTENTS = "contents";
  @SerializedName(SERIALIZED_NAME_CONTENTS)
  private PackageContents contents;

  public static final String SERIALIZED_NAME_CONTENTS_EXPLANATION = "contents_explanation";
  @SerializedName(SERIALIZED_NAME_CONTENTS_EXPLANATION)
  private String contentsExplanation;

  public static final String SERIALIZED_NAME_NON_DELIVERY = "non_delivery";
  @SerializedName(SERIALIZED_NAME_NON_DELIVERY)
  private NonDelivery nonDelivery;

  public static final String SERIALIZED_NAME_TERMS_OF_TRADE_CODE = "terms_of_trade_code";
  @SerializedName(SERIALIZED_NAME_TERMS_OF_TRADE_CODE)
  private AllowedIncoterms termsOfTradeCode;

  public static final String SERIALIZED_NAME_DECLARATION = "declaration";
  @SerializedName(SERIALIZED_NAME_DECLARATION)
  private String declaration;

  public static final String SERIALIZED_NAME_INVOICE_ADDITIONAL_DETAILS = "invoice_additional_details";
  @SerializedName(SERIALIZED_NAME_INVOICE_ADDITIONAL_DETAILS)
  private InvoiceAdditionalDetails invoiceAdditionalDetails;

  public static final String SERIALIZED_NAME_IMPORTER_OF_RECORD = "importer_of_record";
  @SerializedName(SERIALIZED_NAME_IMPORTER_OF_RECORD)
  private ImporterOfRecords importerOfRecord;

  public static final String SERIALIZED_NAME_CUSTOMS_ITEMS = "customs_items";
  @SerializedName(SERIALIZED_NAME_CUSTOMS_ITEMS)
  private List<CustomsItem> customsItems = null;

  public InternationalShipmentOptionsNullable() {
  }

  public InternationalShipmentOptionsNullable contents(PackageContents contents) {
    
    
    
    
    this.contents = contents;
    return this;
  }

   /**
   * The type of contents in this shipment.  This may impact import duties or customs treatment.
   * @return contents
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The type of contents in this shipment.  This may impact import duties or customs treatment.")

  public PackageContents getContents() {
    return contents;
  }


  public void setContents(PackageContents contents) {
    
    
    
    this.contents = contents;
  }


  public InternationalShipmentOptionsNullable contentsExplanation(String contentsExplanation) {
    
    
    
    
    this.contentsExplanation = contentsExplanation;
    return this;
  }

   /**
   * Explanation for contents (required if the &#x60;contents&#x60; is provided as &#x60;other&#x60;)
   * @return contentsExplanation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Explanation for contents (required if the `contents` is provided as `other`)")

  public String getContentsExplanation() {
    return contentsExplanation;
  }


  public void setContentsExplanation(String contentsExplanation) {
    
    
    
    this.contentsExplanation = contentsExplanation;
  }


  public InternationalShipmentOptionsNullable nonDelivery(NonDelivery nonDelivery) {
    
    
    
    
    this.nonDelivery = nonDelivery;
    return this;
  }

   /**
   * Indicates what to do if a package is unable to be delivered.
   * @return nonDelivery
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Indicates what to do if a package is unable to be delivered.")

  public NonDelivery getNonDelivery() {
    return nonDelivery;
  }


  public void setNonDelivery(NonDelivery nonDelivery) {
    
    
    
    this.nonDelivery = nonDelivery;
  }


  public InternationalShipmentOptionsNullable termsOfTradeCode(AllowedIncoterms termsOfTradeCode) {
    
    
    
    
    this.termsOfTradeCode = termsOfTradeCode;
    return this;
  }

   /**
   * Specifies the supported terms of trade code (incoterms)
   * @return termsOfTradeCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specifies the supported terms of trade code (incoterms)")

  public AllowedIncoterms getTermsOfTradeCode() {
    return termsOfTradeCode;
  }


  public void setTermsOfTradeCode(AllowedIncoterms termsOfTradeCode) {
    
    
    
    this.termsOfTradeCode = termsOfTradeCode;
  }


  public InternationalShipmentOptionsNullable declaration(String declaration) {
    
    
    
    
    this.declaration = declaration;
    return this;
  }

   /**
   * Declaration statement to be placed on the commercial invoice
   * @return declaration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Declaration statement to be placed on the commercial invoice")

  public String getDeclaration() {
    return declaration;
  }


  public void setDeclaration(String declaration) {
    
    
    
    this.declaration = declaration;
  }


  public InternationalShipmentOptionsNullable invoiceAdditionalDetails(InvoiceAdditionalDetails invoiceAdditionalDetails) {
    
    
    
    
    this.invoiceAdditionalDetails = invoiceAdditionalDetails;
    return this;
  }

   /**
   * Get invoiceAdditionalDetails
   * @return invoiceAdditionalDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public InvoiceAdditionalDetails getInvoiceAdditionalDetails() {
    return invoiceAdditionalDetails;
  }


  public void setInvoiceAdditionalDetails(InvoiceAdditionalDetails invoiceAdditionalDetails) {
    
    
    
    this.invoiceAdditionalDetails = invoiceAdditionalDetails;
  }


  public InternationalShipmentOptionsNullable importerOfRecord(ImporterOfRecords importerOfRecord) {
    
    
    
    
    this.importerOfRecord = importerOfRecord;
    return this;
  }

   /**
   * Get importerOfRecord
   * @return importerOfRecord
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ImporterOfRecords getImporterOfRecord() {
    return importerOfRecord;
  }


  public void setImporterOfRecord(ImporterOfRecords importerOfRecord) {
    
    
    
    this.importerOfRecord = importerOfRecord;
  }


  public InternationalShipmentOptionsNullable customsItems(List<CustomsItem> customsItems) {
    
    
    
    
    this.customsItems = customsItems;
    return this;
  }

  public InternationalShipmentOptionsNullable addCustomsItemsItem(CustomsItem customsItemsItem) {
    if (this.customsItems == null) {
      this.customsItems = new ArrayList<>();
    }
    this.customsItems.add(customsItemsItem);
    return this;
  }

   /**
   * Customs declarations for each item in the shipment. (Please provide this information under &#x60;products&#x60; inside &#x60;packages&#x60;)
   * @return customsItems
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[]", value = "Customs declarations for each item in the shipment. (Please provide this information under `products` inside `packages`)")

  public List<CustomsItem> getCustomsItems() {
    return customsItems;
  }


  public void setCustomsItems(List<CustomsItem> customsItems) {
    
    
    
    this.customsItems = customsItems;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the InternationalShipmentOptionsNullable instance itself
   */
  public InternationalShipmentOptionsNullable putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InternationalShipmentOptionsNullable internationalShipmentOptionsNullable = (InternationalShipmentOptionsNullable) o;
    return Objects.equals(this.contents, internationalShipmentOptionsNullable.contents) &&
        Objects.equals(this.contentsExplanation, internationalShipmentOptionsNullable.contentsExplanation) &&
        Objects.equals(this.nonDelivery, internationalShipmentOptionsNullable.nonDelivery) &&
        Objects.equals(this.termsOfTradeCode, internationalShipmentOptionsNullable.termsOfTradeCode) &&
        Objects.equals(this.declaration, internationalShipmentOptionsNullable.declaration) &&
        Objects.equals(this.invoiceAdditionalDetails, internationalShipmentOptionsNullable.invoiceAdditionalDetails) &&
        Objects.equals(this.importerOfRecord, internationalShipmentOptionsNullable.importerOfRecord) &&
        Objects.equals(this.customsItems, internationalShipmentOptionsNullable.customsItems)&&
        Objects.equals(this.additionalProperties, internationalShipmentOptionsNullable.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contents, contentsExplanation, nonDelivery, termsOfTradeCode, declaration, invoiceAdditionalDetails, importerOfRecord, customsItems, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InternationalShipmentOptionsNullable {\n");
    sb.append("    contents: ").append(toIndentedString(contents)).append("\n");
    sb.append("    contentsExplanation: ").append(toIndentedString(contentsExplanation)).append("\n");
    sb.append("    nonDelivery: ").append(toIndentedString(nonDelivery)).append("\n");
    sb.append("    termsOfTradeCode: ").append(toIndentedString(termsOfTradeCode)).append("\n");
    sb.append("    declaration: ").append(toIndentedString(declaration)).append("\n");
    sb.append("    invoiceAdditionalDetails: ").append(toIndentedString(invoiceAdditionalDetails)).append("\n");
    sb.append("    importerOfRecord: ").append(toIndentedString(importerOfRecord)).append("\n");
    sb.append("    customsItems: ").append(toIndentedString(customsItems)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contents");
    openapiFields.add("contents_explanation");
    openapiFields.add("non_delivery");
    openapiFields.add("terms_of_trade_code");
    openapiFields.add("declaration");
    openapiFields.add("invoice_additional_details");
    openapiFields.add("importer_of_record");
    openapiFields.add("customs_items");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("contents");
    openapiRequiredFields.add("non_delivery");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to InternationalShipmentOptionsNullable
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!InternationalShipmentOptionsNullable.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InternationalShipmentOptionsNullable is not found in the empty JSON string", InternationalShipmentOptionsNullable.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InternationalShipmentOptionsNullable.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("contents_explanation") != null && !jsonObj.get("contents_explanation").isJsonNull()) && !jsonObj.get("contents_explanation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contents_explanation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contents_explanation").toString()));
      }
      if ((jsonObj.get("declaration") != null && !jsonObj.get("declaration").isJsonNull()) && !jsonObj.get("declaration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `declaration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("declaration").toString()));
      }
      // validate the optional field `invoice_additional_details`
      if (jsonObj.get("invoice_additional_details") != null && !jsonObj.get("invoice_additional_details").isJsonNull()) {
        InvoiceAdditionalDetails.validateJsonObject(jsonObj.getAsJsonObject("invoice_additional_details"));
      }
      // validate the optional field `importer_of_record`
      if (jsonObj.get("importer_of_record") != null && !jsonObj.get("importer_of_record").isJsonNull()) {
        ImporterOfRecords.validateJsonObject(jsonObj.getAsJsonObject("importer_of_record"));
      }
      if (jsonObj.get("customs_items") != null && !jsonObj.get("customs_items").isJsonNull()) {
        JsonArray jsonArraycustomsItems = jsonObj.getAsJsonArray("customs_items");
        if (jsonArraycustomsItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customs_items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customs_items` to be an array in the JSON string but got `%s`", jsonObj.get("customs_items").toString()));
          }

          // validate the optional field `customs_items` (array)
          for (int i = 0; i < jsonArraycustomsItems.size(); i++) {
            CustomsItem.validateJsonObject(jsonArraycustomsItems.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InternationalShipmentOptionsNullable.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InternationalShipmentOptionsNullable' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InternationalShipmentOptionsNullable> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InternationalShipmentOptionsNullable.class));

       return (TypeAdapter<T>) new TypeAdapter<InternationalShipmentOptionsNullable>() {
           @Override
           public void write(JsonWriter out, InternationalShipmentOptionsNullable value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public InternationalShipmentOptionsNullable read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             InternationalShipmentOptionsNullable instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InternationalShipmentOptionsNullable given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InternationalShipmentOptionsNullable
  * @throws IOException if the JSON string is invalid with respect to InternationalShipmentOptionsNullable
  */
  public static InternationalShipmentOptionsNullable fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InternationalShipmentOptionsNullable.class);
  }

 /**
  * Convert an instance of InternationalShipmentOptionsNullable to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

