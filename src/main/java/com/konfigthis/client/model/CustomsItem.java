/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202403202303
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Weight;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The customs declaration for a single item in the shipment.
 */
@ApiModel(description = "The customs declaration for a single item in the shipment.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CustomsItem {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_CUSTOMS_ITEM_ID = "customs_item_id";
  @SerializedName(SERIALIZED_NAME_CUSTOMS_ITEM_ID)
  private String customsItemId;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Integer quantity = 0;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Double value;

  public static final String SERIALIZED_NAME_VALUE_CURRENCY = "value_currency";
  @SerializedName(SERIALIZED_NAME_VALUE_CURRENCY)
  private String valueCurrency;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Weight weight;

  public static final String SERIALIZED_NAME_HARMONIZED_TARIFF_CODE = "harmonized_tariff_code";
  @SerializedName(SERIALIZED_NAME_HARMONIZED_TARIFF_CODE)
  private String harmonizedTariffCode;

  public static final String SERIALIZED_NAME_COUNTRY_OF_ORIGIN = "country_of_origin";
  @SerializedName(SERIALIZED_NAME_COUNTRY_OF_ORIGIN)
  private String countryOfOrigin;

  public static final String SERIALIZED_NAME_UNIT_OF_MEASURE = "unit_of_measure";
  @SerializedName(SERIALIZED_NAME_UNIT_OF_MEASURE)
  private String unitOfMeasure;

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private String sku;

  public static final String SERIALIZED_NAME_SKU_DESCRIPTION = "sku_description";
  @SerializedName(SERIALIZED_NAME_SKU_DESCRIPTION)
  private String skuDescription;

  public CustomsItem() {
  }

  public CustomsItem description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * A description of the item
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A description of the item")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public CustomsItem customsItemId(String customsItemId) {
    
    
    if (customsItemId != null && customsItemId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for customsItemId. Length must be greater than or equal to 1.");
    }
    
    this.customsItemId = customsItemId;
    return this;
  }

   /**
   * A string that uniquely identifies a ShipEngine resource, such as a carrier, label, shipment, etc.
   * @return customsItemId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "se-28529731", required = true, value = "A string that uniquely identifies a ShipEngine resource, such as a carrier, label, shipment, etc.")

  public String getCustomsItemId() {
    return customsItemId;
  }


  public void setCustomsItemId(String customsItemId) {
    
    
    if (customsItemId != null && customsItemId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for customsItemId. Length must be greater than or equal to 1.");
    }
    this.customsItemId = customsItemId;
  }


  public CustomsItem quantity(Integer quantity) {
    if (quantity != null && quantity < 0) {
      throw new IllegalArgumentException("Invalid value for quantity. Must be greater than or equal to 0.");
    }
    
    
    
    this.quantity = quantity;
    return this;
  }

   /**
   * The quantity of this item in the shipment.
   * minimum: 0
   * @return quantity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "The quantity of this item in the shipment.")

  public Integer getQuantity() {
    return quantity;
  }


  public void setQuantity(Integer quantity) {
    if (quantity != null && quantity < 0) {
      throw new IllegalArgumentException("Invalid value for quantity. Must be greater than or equal to 0.");
    }
    
    
    this.quantity = quantity;
  }


  public CustomsItem value(Double value) {
    if (value != null && value < 0) {
      throw new IllegalArgumentException("Invalid value for value. Must be greater than or equal to 0.");
    }
    
    
    
    this.value = value;
    return this;
  }

   /**
   * The monetary amount, in the specified currency.
   * minimum: 0
   * @return value
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The monetary amount, in the specified currency.")

  public Double getValue() {
    return value;
  }


  public void setValue(Double value) {
    if (value != null && value < 0) {
      throw new IllegalArgumentException("Invalid value for value. Must be greater than or equal to 0.");
    }
    
    
    this.value = value;
  }


  public CustomsItem valueCurrency(String valueCurrency) {
    
    
    
    
    this.valueCurrency = valueCurrency;
    return this;
  }

   /**
   * The currencies that are supported by ShipEngine are the ones that specified by ISO 4217: https://www.iso.org/iso-4217-currency-codes.html 
   * @return valueCurrency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The currencies that are supported by ShipEngine are the ones that specified by ISO 4217: https://www.iso.org/iso-4217-currency-codes.html ")

  public String getValueCurrency() {
    return valueCurrency;
  }


  public void setValueCurrency(String valueCurrency) {
    
    
    
    this.valueCurrency = valueCurrency;
  }


  public CustomsItem weight(Weight weight) {
    
    
    
    
    this.weight = weight;
    return this;
  }

   /**
   * The item weight
   * @return weight
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The item weight")

  public Weight getWeight() {
    return weight;
  }


  public void setWeight(Weight weight) {
    
    
    
    this.weight = weight;
  }


  public CustomsItem harmonizedTariffCode(String harmonizedTariffCode) {
    
    
    
    
    this.harmonizedTariffCode = harmonizedTariffCode;
    return this;
  }

   /**
   * The [Harmonized Tariff Code](https://en.wikipedia.org/wiki/Harmonized_System) of this item.
   * @return harmonizedTariffCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "3926.1", value = "The [Harmonized Tariff Code](https://en.wikipedia.org/wiki/Harmonized_System) of this item.")

  public String getHarmonizedTariffCode() {
    return harmonizedTariffCode;
  }


  public void setHarmonizedTariffCode(String harmonizedTariffCode) {
    
    
    
    this.harmonizedTariffCode = harmonizedTariffCode;
  }


  public CustomsItem countryOfOrigin(String countryOfOrigin) {
    
    
    if (countryOfOrigin != null && countryOfOrigin.length() < 2) {
      throw new IllegalArgumentException("Invalid value for countryOfOrigin. Length must be greater than or equal to 2.");
    }
    
    this.countryOfOrigin = countryOfOrigin;
    return this;
  }

   /**
   * A two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1) 
   * @return countryOfOrigin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CA", value = "A two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1) ")

  public String getCountryOfOrigin() {
    return countryOfOrigin;
  }


  public void setCountryOfOrigin(String countryOfOrigin) {
    
    
    if (countryOfOrigin != null && countryOfOrigin.length() < 2) {
      throw new IllegalArgumentException("Invalid value for countryOfOrigin. Length must be greater than or equal to 2.");
    }
    this.countryOfOrigin = countryOfOrigin;
  }


  public CustomsItem unitOfMeasure(String unitOfMeasure) {
    
    
    
    
    this.unitOfMeasure = unitOfMeasure;
    return this;
  }

   /**
   * Get unitOfMeasure
   * @return unitOfMeasure
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getUnitOfMeasure() {
    return unitOfMeasure;
  }


  public void setUnitOfMeasure(String unitOfMeasure) {
    
    
    
    this.unitOfMeasure = unitOfMeasure;
  }


  public CustomsItem sku(String sku) {
    
    
    
    
    this.sku = sku;
    return this;
  }

   /**
   * The SKU (Stock Keeping Unit) of the customs item
   * @return sku
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The SKU (Stock Keeping Unit) of the customs item")

  public String getSku() {
    return sku;
  }


  public void setSku(String sku) {
    
    
    
    this.sku = sku;
  }


  public CustomsItem skuDescription(String skuDescription) {
    
    
    
    
    this.skuDescription = skuDescription;
    return this;
  }

   /**
   * Description of the Custom Item&#39;s SKU
   * @return skuDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Description of the Custom Item's SKU")

  public String getSkuDescription() {
    return skuDescription;
  }


  public void setSkuDescription(String skuDescription) {
    
    
    
    this.skuDescription = skuDescription;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CustomsItem instance itself
   */
  public CustomsItem putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomsItem customsItem = (CustomsItem) o;
    return Objects.equals(this.description, customsItem.description) &&
        Objects.equals(this.customsItemId, customsItem.customsItemId) &&
        Objects.equals(this.quantity, customsItem.quantity) &&
        Objects.equals(this.value, customsItem.value) &&
        Objects.equals(this.valueCurrency, customsItem.valueCurrency) &&
        Objects.equals(this.weight, customsItem.weight) &&
        Objects.equals(this.harmonizedTariffCode, customsItem.harmonizedTariffCode) &&
        Objects.equals(this.countryOfOrigin, customsItem.countryOfOrigin) &&
        Objects.equals(this.unitOfMeasure, customsItem.unitOfMeasure) &&
        Objects.equals(this.sku, customsItem.sku) &&
        Objects.equals(this.skuDescription, customsItem.skuDescription)&&
        Objects.equals(this.additionalProperties, customsItem.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, customsItemId, quantity, value, valueCurrency, weight, harmonizedTariffCode, countryOfOrigin, unitOfMeasure, sku, skuDescription, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomsItem {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    customsItemId: ").append(toIndentedString(customsItemId)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    valueCurrency: ").append(toIndentedString(valueCurrency)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    harmonizedTariffCode: ").append(toIndentedString(harmonizedTariffCode)).append("\n");
    sb.append("    countryOfOrigin: ").append(toIndentedString(countryOfOrigin)).append("\n");
    sb.append("    unitOfMeasure: ").append(toIndentedString(unitOfMeasure)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    skuDescription: ").append(toIndentedString(skuDescription)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("customs_item_id");
    openapiFields.add("quantity");
    openapiFields.add("value");
    openapiFields.add("value_currency");
    openapiFields.add("weight");
    openapiFields.add("harmonized_tariff_code");
    openapiFields.add("country_of_origin");
    openapiFields.add("unit_of_measure");
    openapiFields.add("sku");
    openapiFields.add("sku_description");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("customs_item_id");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CustomsItem
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CustomsItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomsItem is not found in the empty JSON string", CustomsItem.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CustomsItem.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("description").isJsonNull() && (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("customs_item_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customs_item_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customs_item_id").toString()));
      }
      if ((jsonObj.get("value_currency") != null && !jsonObj.get("value_currency").isJsonNull()) && !jsonObj.get("value_currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value_currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value_currency").toString()));
      }
      // validate the optional field `weight`
      if (jsonObj.get("weight") != null && !jsonObj.get("weight").isJsonNull()) {
        Weight.validateJsonObject(jsonObj.getAsJsonObject("weight"));
      }
      if (!jsonObj.get("harmonized_tariff_code").isJsonNull() && (jsonObj.get("harmonized_tariff_code") != null && !jsonObj.get("harmonized_tariff_code").isJsonNull()) && !jsonObj.get("harmonized_tariff_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `harmonized_tariff_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("harmonized_tariff_code").toString()));
      }
      if (!jsonObj.get("country_of_origin").isJsonNull() && (jsonObj.get("country_of_origin") != null && !jsonObj.get("country_of_origin").isJsonNull()) && !jsonObj.get("country_of_origin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_of_origin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_of_origin").toString()));
      }
      if (!jsonObj.get("unit_of_measure").isJsonNull() && (jsonObj.get("unit_of_measure") != null && !jsonObj.get("unit_of_measure").isJsonNull()) && !jsonObj.get("unit_of_measure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit_of_measure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit_of_measure").toString()));
      }
      if (!jsonObj.get("sku").isJsonNull() && (jsonObj.get("sku") != null && !jsonObj.get("sku").isJsonNull()) && !jsonObj.get("sku").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sku` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku").toString()));
      }
      if (!jsonObj.get("sku_description").isJsonNull() && (jsonObj.get("sku_description") != null && !jsonObj.get("sku_description").isJsonNull()) && !jsonObj.get("sku_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sku_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sku_description").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomsItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomsItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomsItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomsItem.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomsItem>() {
           @Override
           public void write(JsonWriter out, CustomsItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomsItem read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CustomsItem instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CustomsItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CustomsItem
  * @throws IOException if the JSON string is invalid with respect to CustomsItem
  */
  public static CustomsItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomsItem.class);
  }

 /**
  * Convert an instance of CustomsItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

