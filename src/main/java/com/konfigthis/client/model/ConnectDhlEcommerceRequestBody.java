/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202403202303
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.AncillaryServiceEndorsement;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * A DHL Ecommerce account information request body
 */
@ApiModel(description = "A DHL Ecommerce account information request body")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ConnectDhlEcommerceRequestBody {
  public static final String SERIALIZED_NAME_NICKNAME = "nickname";
  @SerializedName(SERIALIZED_NAME_NICKNAME)
  private String nickname;

  public static final String SERIALIZED_NAME_CLIENT_ID = "client_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PICKUP_NUMBER = "pickup_number";
  @SerializedName(SERIALIZED_NAME_PICKUP_NUMBER)
  private String pickupNumber;

  public static final String SERIALIZED_NAME_DISTRIBUTION_CENTER = "distribution_center";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTION_CENTER)
  private String distributionCenter;

  public static final String SERIALIZED_NAME_API_KEY = "api_key";
  @SerializedName(SERIALIZED_NAME_API_KEY)
  private String apiKey;

  public static final String SERIALIZED_NAME_API_SECRET = "api_secret";
  @SerializedName(SERIALIZED_NAME_API_SECRET)
  private String apiSecret;

  public static final String SERIALIZED_NAME_ANCILLARY_ENDORSEMENT = "ancillary_endorsement";
  @SerializedName(SERIALIZED_NAME_ANCILLARY_ENDORSEMENT)
  private AncillaryServiceEndorsement ancillaryEndorsement;

  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "account_number";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_FTP_USERNAME = "ftp_username";
  @SerializedName(SERIALIZED_NAME_FTP_USERNAME)
  private String ftpUsername;

  public static final String SERIALIZED_NAME_FTP_PASSWORD = "ftp_password";
  @SerializedName(SERIALIZED_NAME_FTP_PASSWORD)
  private String ftpPassword;

  public static final String SERIALIZED_NAME_SOLD_TO = "sold_to";
  @SerializedName(SERIALIZED_NAME_SOLD_TO)
  private String soldTo;

  public static final String SERIALIZED_NAME_REGISTRATION_ID = "registration_id";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_ID)
  private String registrationId;

  public static final String SERIALIZED_NAME_SOFTWARE_NAME = "software_name";
  @SerializedName(SERIALIZED_NAME_SOFTWARE_NAME)
  private String softwareName;

  public ConnectDhlEcommerceRequestBody() {
  }

  public ConnectDhlEcommerceRequestBody nickname(String nickname) {
    
    
    if (nickname != null && nickname.length() < 1) {
      throw new IllegalArgumentException("Invalid value for nickname. Length must be greater than or equal to 1.");
    }
    
    this.nickname = nickname;
    return this;
  }

   /**
   * A nickname to help you identify this account
   * @return nickname
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A nickname to help you identify this account")

  public String getNickname() {
    return nickname;
  }


  public void setNickname(String nickname) {
    
    
    if (nickname != null && nickname.length() < 1) {
      throw new IllegalArgumentException("Invalid value for nickname. Length must be greater than or equal to 1.");
    }
    this.nickname = nickname;
  }


  public ConnectDhlEcommerceRequestBody clientId(String clientId) {
    
    
    if (clientId != null && clientId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for clientId. Length must be greater than or equal to 1.");
    }
    
    this.clientId = clientId;
    return this;
  }

   /**
   * The client id
   * @return clientId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The client id")

  public String getClientId() {
    return clientId;
  }


  public void setClientId(String clientId) {
    
    
    if (clientId != null && clientId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for clientId. Length must be greater than or equal to 1.");
    }
    this.clientId = clientId;
  }


  public ConnectDhlEcommerceRequestBody username(String username) {
    
    
    if (username != null && username.length() < 1) {
      throw new IllegalArgumentException("Invalid value for username. Length must be greater than or equal to 1.");
    }
    
    this.username = username;
    return this;
  }

   /**
   * The account username
   * @return username
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The account username")

  public String getUsername() {
    return username;
  }


  public void setUsername(String username) {
    
    
    if (username != null && username.length() < 1) {
      throw new IllegalArgumentException("Invalid value for username. Length must be greater than or equal to 1.");
    }
    this.username = username;
  }


  public ConnectDhlEcommerceRequestBody password(String password) {
    
    
    if (password != null && password.length() < 1) {
      throw new IllegalArgumentException("Invalid value for password. Length must be greater than or equal to 1.");
    }
    
    this.password = password;
    return this;
  }

   /**
   * The account password
   * @return password
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The account password")

  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    
    
    if (password != null && password.length() < 1) {
      throw new IllegalArgumentException("Invalid value for password. Length must be greater than or equal to 1.");
    }
    this.password = password;
  }


  public ConnectDhlEcommerceRequestBody pickupNumber(String pickupNumber) {
    
    
    if (pickupNumber != null && pickupNumber.length() < 1) {
      throw new IllegalArgumentException("Invalid value for pickupNumber. Length must be greater than or equal to 1.");
    }
    
    this.pickupNumber = pickupNumber;
    return this;
  }

   /**
   * The pickup number
   * @return pickupNumber
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The pickup number")

  public String getPickupNumber() {
    return pickupNumber;
  }


  public void setPickupNumber(String pickupNumber) {
    
    
    if (pickupNumber != null && pickupNumber.length() < 1) {
      throw new IllegalArgumentException("Invalid value for pickupNumber. Length must be greater than or equal to 1.");
    }
    this.pickupNumber = pickupNumber;
  }


  public ConnectDhlEcommerceRequestBody distributionCenter(String distributionCenter) {
    
    
    if (distributionCenter != null && distributionCenter.length() < 1) {
      throw new IllegalArgumentException("Invalid value for distributionCenter. Length must be greater than or equal to 1.");
    }
    
    this.distributionCenter = distributionCenter;
    return this;
  }

   /**
   * The distribution center
   * @return distributionCenter
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The distribution center")

  public String getDistributionCenter() {
    return distributionCenter;
  }


  public void setDistributionCenter(String distributionCenter) {
    
    
    if (distributionCenter != null && distributionCenter.length() < 1) {
      throw new IllegalArgumentException("Invalid value for distributionCenter. Length must be greater than or equal to 1.");
    }
    this.distributionCenter = distributionCenter;
  }


  public ConnectDhlEcommerceRequestBody apiKey(String apiKey) {
    
    
    if (apiKey != null && apiKey.length() < 1) {
      throw new IllegalArgumentException("Invalid value for apiKey. Length must be greater than or equal to 1.");
    }
    
    this.apiKey = apiKey;
    return this;
  }

   /**
   * The DHL E-Commerce API key. This field is optional, but if not set you will not be able to get rates for this account. 
   * @return apiKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The DHL E-Commerce API key. This field is optional, but if not set you will not be able to get rates for this account. ")

  public String getApiKey() {
    return apiKey;
  }


  public void setApiKey(String apiKey) {
    
    
    if (apiKey != null && apiKey.length() < 1) {
      throw new IllegalArgumentException("Invalid value for apiKey. Length must be greater than or equal to 1.");
    }
    this.apiKey = apiKey;
  }


  public ConnectDhlEcommerceRequestBody apiSecret(String apiSecret) {
    
    
    if (apiSecret != null && apiSecret.length() < 1) {
      throw new IllegalArgumentException("Invalid value for apiSecret. Length must be greater than or equal to 1.");
    }
    
    this.apiSecret = apiSecret;
    return this;
  }

   /**
   * The DHL E-Commerce API secret. This field is optional, but if not set you will not be able to get rates for this account. 
   * @return apiSecret
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The DHL E-Commerce API secret. This field is optional, but if not set you will not be able to get rates for this account. ")

  public String getApiSecret() {
    return apiSecret;
  }


  public void setApiSecret(String apiSecret) {
    
    
    if (apiSecret != null && apiSecret.length() < 1) {
      throw new IllegalArgumentException("Invalid value for apiSecret. Length must be greater than or equal to 1.");
    }
    this.apiSecret = apiSecret;
  }


  public ConnectDhlEcommerceRequestBody ancillaryEndorsement(AncillaryServiceEndorsement ancillaryEndorsement) {
    
    
    
    
    this.ancillaryEndorsement = ancillaryEndorsement;
    return this;
  }

   /**
   * Get ancillaryEndorsement
   * @return ancillaryEndorsement
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public AncillaryServiceEndorsement getAncillaryEndorsement() {
    return ancillaryEndorsement;
  }


  public void setAncillaryEndorsement(AncillaryServiceEndorsement ancillaryEndorsement) {
    
    
    
    this.ancillaryEndorsement = ancillaryEndorsement;
  }


  public ConnectDhlEcommerceRequestBody accountNumber(String accountNumber) {
    
    
    if (accountNumber != null && accountNumber.length() < 1) {
      throw new IllegalArgumentException("Invalid value for accountNumber. Length must be greater than or equal to 1.");
    }
    
    this.accountNumber = accountNumber;
    return this;
  }

   /**
   * Account number
   * @return accountNumber
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Account number")

  public String getAccountNumber() {
    return accountNumber;
  }


  public void setAccountNumber(String accountNumber) {
    
    
    if (accountNumber != null && accountNumber.length() < 1) {
      throw new IllegalArgumentException("Invalid value for accountNumber. Length must be greater than or equal to 1.");
    }
    this.accountNumber = accountNumber;
  }


  public ConnectDhlEcommerceRequestBody ftpUsername(String ftpUsername) {
    
    
    if (ftpUsername != null && ftpUsername.length() < 1) {
      throw new IllegalArgumentException("Invalid value for ftpUsername. Length must be greater than or equal to 1.");
    }
    
    this.ftpUsername = ftpUsername;
    return this;
  }

   /**
   * FTP username
   * @return ftpUsername
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @ApiModelProperty(value = "FTP username")

  public String getFtpUsername() {
    return ftpUsername;
  }


  public void setFtpUsername(String ftpUsername) {
    
    
    if (ftpUsername != null && ftpUsername.length() < 1) {
      throw new IllegalArgumentException("Invalid value for ftpUsername. Length must be greater than or equal to 1.");
    }
    this.ftpUsername = ftpUsername;
  }


  public ConnectDhlEcommerceRequestBody ftpPassword(String ftpPassword) {
    
    
    if (ftpPassword != null && ftpPassword.length() < 1) {
      throw new IllegalArgumentException("Invalid value for ftpPassword. Length must be greater than or equal to 1.");
    }
    
    this.ftpPassword = ftpPassword;
    return this;
  }

   /**
   * FTP password
   * @return ftpPassword
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @ApiModelProperty(value = "FTP password")

  public String getFtpPassword() {
    return ftpPassword;
  }


  public void setFtpPassword(String ftpPassword) {
    
    
    if (ftpPassword != null && ftpPassword.length() < 1) {
      throw new IllegalArgumentException("Invalid value for ftpPassword. Length must be greater than or equal to 1.");
    }
    this.ftpPassword = ftpPassword;
  }


  public ConnectDhlEcommerceRequestBody soldTo(String soldTo) {
    
    
    
    
    this.soldTo = soldTo;
    return this;
  }

   /**
   * Sold To field
   * @return soldTo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Sold To field")

  public String getSoldTo() {
    return soldTo;
  }


  public void setSoldTo(String soldTo) {
    
    
    
    this.soldTo = soldTo;
  }


  public ConnectDhlEcommerceRequestBody registrationId(String registrationId) {
    
    
    
    
    this.registrationId = registrationId;
    return this;
  }

   /**
   * Get registrationId
   * @return registrationId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRegistrationId() {
    return registrationId;
  }


  public void setRegistrationId(String registrationId) {
    
    
    
    this.registrationId = registrationId;
  }


  public ConnectDhlEcommerceRequestBody softwareName(String softwareName) {
    
    
    
    
    this.softwareName = softwareName;
    return this;
  }

   /**
   * Get softwareName
   * @return softwareName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSoftwareName() {
    return softwareName;
  }


  public void setSoftwareName(String softwareName) {
    
    
    
    this.softwareName = softwareName;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ConnectDhlEcommerceRequestBody instance itself
   */
  public ConnectDhlEcommerceRequestBody putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectDhlEcommerceRequestBody connectDhlEcommerceRequestBody = (ConnectDhlEcommerceRequestBody) o;
    return Objects.equals(this.nickname, connectDhlEcommerceRequestBody.nickname) &&
        Objects.equals(this.clientId, connectDhlEcommerceRequestBody.clientId) &&
        Objects.equals(this.username, connectDhlEcommerceRequestBody.username) &&
        Objects.equals(this.password, connectDhlEcommerceRequestBody.password) &&
        Objects.equals(this.pickupNumber, connectDhlEcommerceRequestBody.pickupNumber) &&
        Objects.equals(this.distributionCenter, connectDhlEcommerceRequestBody.distributionCenter) &&
        Objects.equals(this.apiKey, connectDhlEcommerceRequestBody.apiKey) &&
        Objects.equals(this.apiSecret, connectDhlEcommerceRequestBody.apiSecret) &&
        Objects.equals(this.ancillaryEndorsement, connectDhlEcommerceRequestBody.ancillaryEndorsement) &&
        Objects.equals(this.accountNumber, connectDhlEcommerceRequestBody.accountNumber) &&
        Objects.equals(this.ftpUsername, connectDhlEcommerceRequestBody.ftpUsername) &&
        Objects.equals(this.ftpPassword, connectDhlEcommerceRequestBody.ftpPassword) &&
        Objects.equals(this.soldTo, connectDhlEcommerceRequestBody.soldTo) &&
        Objects.equals(this.registrationId, connectDhlEcommerceRequestBody.registrationId) &&
        Objects.equals(this.softwareName, connectDhlEcommerceRequestBody.softwareName)&&
        Objects.equals(this.additionalProperties, connectDhlEcommerceRequestBody.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nickname, clientId, username, password, pickupNumber, distributionCenter, apiKey, apiSecret, ancillaryEndorsement, accountNumber, ftpUsername, ftpPassword, soldTo, registrationId, softwareName, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectDhlEcommerceRequestBody {\n");
    sb.append("    nickname: ").append(toIndentedString(nickname)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    pickupNumber: ").append(toIndentedString(pickupNumber)).append("\n");
    sb.append("    distributionCenter: ").append(toIndentedString(distributionCenter)).append("\n");
    sb.append("    apiKey: ").append(toIndentedString(apiKey)).append("\n");
    sb.append("    apiSecret: ").append(toIndentedString(apiSecret)).append("\n");
    sb.append("    ancillaryEndorsement: ").append(toIndentedString(ancillaryEndorsement)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    ftpUsername: ").append(toIndentedString(ftpUsername)).append("\n");
    sb.append("    ftpPassword: ").append(toIndentedString(ftpPassword)).append("\n");
    sb.append("    soldTo: ").append(toIndentedString(soldTo)).append("\n");
    sb.append("    registrationId: ").append(toIndentedString(registrationId)).append("\n");
    sb.append("    softwareName: ").append(toIndentedString(softwareName)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nickname");
    openapiFields.add("client_id");
    openapiFields.add("username");
    openapiFields.add("password");
    openapiFields.add("pickup_number");
    openapiFields.add("distribution_center");
    openapiFields.add("api_key");
    openapiFields.add("api_secret");
    openapiFields.add("ancillary_endorsement");
    openapiFields.add("account_number");
    openapiFields.add("ftp_username");
    openapiFields.add("ftp_password");
    openapiFields.add("sold_to");
    openapiFields.add("registration_id");
    openapiFields.add("software_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("nickname");
    openapiRequiredFields.add("client_id");
    openapiRequiredFields.add("username");
    openapiRequiredFields.add("password");
    openapiRequiredFields.add("pickup_number");
    openapiRequiredFields.add("distribution_center");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConnectDhlEcommerceRequestBody
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ConnectDhlEcommerceRequestBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectDhlEcommerceRequestBody is not found in the empty JSON string", ConnectDhlEcommerceRequestBody.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConnectDhlEcommerceRequestBody.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("nickname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nickname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nickname").toString()));
      }
      if (!jsonObj.get("client_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_id").toString()));
      }
      if (!jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if (!jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if (!jsonObj.get("pickup_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pickup_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pickup_number").toString()));
      }
      if (!jsonObj.get("distribution_center").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `distribution_center` to be a primitive type in the JSON string but got `%s`", jsonObj.get("distribution_center").toString()));
      }
      if ((jsonObj.get("api_key") != null && !jsonObj.get("api_key").isJsonNull()) && !jsonObj.get("api_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api_key").toString()));
      }
      if ((jsonObj.get("api_secret") != null && !jsonObj.get("api_secret").isJsonNull()) && !jsonObj.get("api_secret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api_secret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api_secret").toString()));
      }
      if ((jsonObj.get("account_number") != null && !jsonObj.get("account_number").isJsonNull()) && !jsonObj.get("account_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account_number").toString()));
      }
      if ((jsonObj.get("ftp_username") != null && !jsonObj.get("ftp_username").isJsonNull()) && !jsonObj.get("ftp_username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ftp_username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ftp_username").toString()));
      }
      if ((jsonObj.get("ftp_password") != null && !jsonObj.get("ftp_password").isJsonNull()) && !jsonObj.get("ftp_password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ftp_password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ftp_password").toString()));
      }
      if ((jsonObj.get("sold_to") != null && !jsonObj.get("sold_to").isJsonNull()) && !jsonObj.get("sold_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sold_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sold_to").toString()));
      }
      if ((jsonObj.get("registration_id") != null && !jsonObj.get("registration_id").isJsonNull()) && !jsonObj.get("registration_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registration_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registration_id").toString()));
      }
      if ((jsonObj.get("software_name") != null && !jsonObj.get("software_name").isJsonNull()) && !jsonObj.get("software_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `software_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("software_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectDhlEcommerceRequestBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectDhlEcommerceRequestBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectDhlEcommerceRequestBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectDhlEcommerceRequestBody.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectDhlEcommerceRequestBody>() {
           @Override
           public void write(JsonWriter out, ConnectDhlEcommerceRequestBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectDhlEcommerceRequestBody read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ConnectDhlEcommerceRequestBody instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConnectDhlEcommerceRequestBody given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConnectDhlEcommerceRequestBody
  * @throws IOException if the JSON string is invalid with respect to ConnectDhlEcommerceRequestBody
  */
  public static ConnectDhlEcommerceRequestBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectDhlEcommerceRequestBody.class);
  }

 /**
  * Convert an instance of ConnectDhlEcommerceRequestBody to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

