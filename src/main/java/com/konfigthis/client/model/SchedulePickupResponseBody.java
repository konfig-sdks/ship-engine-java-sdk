/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202403202303
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ContactDetails;
import com.konfigthis.client.model.Error;
import com.konfigthis.client.model.PartialAddress;
import com.konfigthis.client.model.PickupWindow;
import com.konfigthis.client.model.PickupWindows;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * SchedulePickupResponseBody
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class SchedulePickupResponseBody {
  public static final String SERIALIZED_NAME_PICKUP_ID = "pickup_id";
  @SerializedName(SERIALIZED_NAME_PICKUP_ID)
  private String pickupId;

  public static final String SERIALIZED_NAME_LABEL_IDS = "label_ids";
  @SerializedName(SERIALIZED_NAME_LABEL_IDS)
  private List<String> labelIds = null;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CANCELLED_AT = "cancelled_at";
  @SerializedName(SERIALIZED_NAME_CANCELLED_AT)
  private OffsetDateTime cancelledAt;

  public static final String SERIALIZED_NAME_CARRIER_ID = "carrier_id";
  @SerializedName(SERIALIZED_NAME_CARRIER_ID)
  private String carrierId;

  public static final String SERIALIZED_NAME_CONFIRMATION_NUMBER = "confirmation_number";
  @SerializedName(SERIALIZED_NAME_CONFIRMATION_NUMBER)
  private String confirmationNumber;

  public static final String SERIALIZED_NAME_WAREHOUSE_ID = "warehouse_id";
  @SerializedName(SERIALIZED_NAME_WAREHOUSE_ID)
  private String warehouseId;

  public static final String SERIALIZED_NAME_PICKUP_ADDRESS = "pickup_address";
  @SerializedName(SERIALIZED_NAME_PICKUP_ADDRESS)
  private PartialAddress pickupAddress;

  public static final String SERIALIZED_NAME_CONTACT_DETAILS = "contact_details";
  @SerializedName(SERIALIZED_NAME_CONTACT_DETAILS)
  private ContactDetails contactDetails;

  public static final String SERIALIZED_NAME_PICKUP_NOTES = "pickup_notes";
  @SerializedName(SERIALIZED_NAME_PICKUP_NOTES)
  private String pickupNotes;

  public static final String SERIALIZED_NAME_PICKUP_WINDOW = "pickup_window";
  @SerializedName(SERIALIZED_NAME_PICKUP_WINDOW)
  private PickupWindow pickupWindow;

  public static final String SERIALIZED_NAME_PICKUP_WINDOWS = "pickup_windows";
  @SerializedName(SERIALIZED_NAME_PICKUP_WINDOWS)
  private List<PickupWindows> pickupWindows = null;

  public static final String SERIALIZED_NAME_REQUEST_ID = "request_id";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private UUID requestId;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<Error> errors = new ArrayList<>();

  public SchedulePickupResponseBody() {
  }

  
  public SchedulePickupResponseBody(
     String confirmationNumber, 
     List<PickupWindows> pickupWindows, 
     List<Error> errors
  ) {
    this();
    this.confirmationNumber = confirmationNumber;
    this.pickupWindows = pickupWindows;
    this.errors = errors;
  }

  public SchedulePickupResponseBody pickupId(String pickupId) {
    
    
    if (pickupId != null && pickupId.length() < 4) {
      throw new IllegalArgumentException("Invalid value for pickupId. Length must be greater than or equal to 4.");
    }
    
    this.pickupId = pickupId;
    return this;
  }

   /**
   * Pickup Resource ID
   * @return pickupId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "pik_3YcKU5zdtJuCqoeNwyqqbW", value = "Pickup Resource ID")

  public String getPickupId() {
    return pickupId;
  }


  public void setPickupId(String pickupId) {
    
    
    if (pickupId != null && pickupId.length() < 4) {
      throw new IllegalArgumentException("Invalid value for pickupId. Length must be greater than or equal to 4.");
    }
    this.pickupId = pickupId;
  }


  public SchedulePickupResponseBody labelIds(List<String> labelIds) {
    
    
    
    
    this.labelIds = labelIds;
    return this;
  }

  public SchedulePickupResponseBody addLabelIdsItem(String labelIdsItem) {
    if (this.labelIds == null) {
      this.labelIds = new ArrayList<>();
    }
    this.labelIds.add(labelIdsItem);
    return this;
  }

   /**
   * Label IDs that will be included in the pickup request
   * @return labelIds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Label IDs that will be included in the pickup request")

  public List<String> getLabelIds() {
    return labelIds;
  }


  public void setLabelIds(List<String> labelIds) {
    
    
    
    this.labelIds = labelIds;
  }


  public SchedulePickupResponseBody createdAt(OffsetDateTime createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date and time. 
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2018-09-23T15:00Z", value = "An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date and time. ")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public SchedulePickupResponseBody cancelledAt(OffsetDateTime cancelledAt) {
    
    
    
    
    this.cancelledAt = cancelledAt;
    return this;
  }

   /**
   * An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date and time. 
   * @return cancelledAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2018-09-23T15:00Z", value = "An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date and time. ")

  public OffsetDateTime getCancelledAt() {
    return cancelledAt;
  }


  public void setCancelledAt(OffsetDateTime cancelledAt) {
    
    
    
    this.cancelledAt = cancelledAt;
  }


  public SchedulePickupResponseBody carrierId(String carrierId) {
    
    
    if (carrierId != null && carrierId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for carrierId. Length must be greater than or equal to 1.");
    }
    
    this.carrierId = carrierId;
    return this;
  }

   /**
   * A string that uniquely identifies a ShipEngine resource, such as a carrier, label, shipment, etc.
   * @return carrierId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "se-28529731", value = "A string that uniquely identifies a ShipEngine resource, such as a carrier, label, shipment, etc.")

  public String getCarrierId() {
    return carrierId;
  }


  public void setCarrierId(String carrierId) {
    
    
    if (carrierId != null && carrierId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for carrierId. Length must be greater than or equal to 1.");
    }
    this.carrierId = carrierId;
  }


   /**
   * The carrier confirmation number for the scheduled pickup.
   * @return confirmationNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "292513CL4A3", value = "The carrier confirmation number for the scheduled pickup.")

  public String getConfirmationNumber() {
    return confirmationNumber;
  }




  public SchedulePickupResponseBody warehouseId(String warehouseId) {
    
    
    if (warehouseId != null && warehouseId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for warehouseId. Length must be greater than or equal to 1.");
    }
    
    this.warehouseId = warehouseId;
    return this;
  }

   /**
   * A string that uniquely identifies a ShipEngine resource, such as a carrier, label, shipment, etc.
   * @return warehouseId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "se-28529731", value = "A string that uniquely identifies a ShipEngine resource, such as a carrier, label, shipment, etc.")

  public String getWarehouseId() {
    return warehouseId;
  }


  public void setWarehouseId(String warehouseId) {
    
    
    if (warehouseId != null && warehouseId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for warehouseId. Length must be greater than or equal to 1.");
    }
    this.warehouseId = warehouseId;
  }


  public SchedulePickupResponseBody pickupAddress(PartialAddress pickupAddress) {
    
    
    
    
    this.pickupAddress = pickupAddress;
    return this;
  }

   /**
   * Get pickupAddress
   * @return pickupAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PartialAddress getPickupAddress() {
    return pickupAddress;
  }


  public void setPickupAddress(PartialAddress pickupAddress) {
    
    
    
    this.pickupAddress = pickupAddress;
  }


  public SchedulePickupResponseBody contactDetails(ContactDetails contactDetails) {
    
    
    
    
    this.contactDetails = contactDetails;
    return this;
  }

   /**
   * Get contactDetails
   * @return contactDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ContactDetails getContactDetails() {
    return contactDetails;
  }


  public void setContactDetails(ContactDetails contactDetails) {
    
    
    
    this.contactDetails = contactDetails;
  }


  public SchedulePickupResponseBody pickupNotes(String pickupNotes) {
    
    
    if (pickupNotes != null && pickupNotes.length() < 0) {
      throw new IllegalArgumentException("Invalid value for pickupNotes. Length must be greater than or equal to 0.");
    }
    
    this.pickupNotes = pickupNotes;
    return this;
  }

   /**
   * Used by some carriers to give special instructions for a package pickup
   * @return pickupNotes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Used by some carriers to give special instructions for a package pickup")

  public String getPickupNotes() {
    return pickupNotes;
  }


  public void setPickupNotes(String pickupNotes) {
    
    
    if (pickupNotes != null && pickupNotes.length() < 0) {
      throw new IllegalArgumentException("Invalid value for pickupNotes. Length must be greater than or equal to 0.");
    }
    this.pickupNotes = pickupNotes;
  }


  public SchedulePickupResponseBody pickupWindow(PickupWindow pickupWindow) {
    
    
    
    
    this.pickupWindow = pickupWindow;
    return this;
  }

   /**
   * Get pickupWindow
   * @return pickupWindow
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public PickupWindow getPickupWindow() {
    return pickupWindow;
  }


  public void setPickupWindow(PickupWindow pickupWindow) {
    
    
    
    this.pickupWindow = pickupWindow;
  }


   /**
   * An array of available pickup windows. Carriers can return multiple times that they will pickup packages. 
   * @return pickupWindows
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of available pickup windows. Carriers can return multiple times that they will pickup packages. ")

  public List<PickupWindows> getPickupWindows() {
    return pickupWindows;
  }




  public SchedulePickupResponseBody requestId(UUID requestId) {
    
    
    if (requestId != null && requestId.length() < 36) {
      throw new IllegalArgumentException("Invalid value for requestId. Length must be greater than or equal to 36.");
    }
    
    this.requestId = requestId;
    return this;
  }

   /**
   * A UUID (a.k.a. GUID) that uniquely identifies a resource
   * @return requestId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "aa3d8e8e-462b-4476-9618-72db7f7b7009", required = true, value = "A UUID (a.k.a. GUID) that uniquely identifies a resource")

  public UUID getRequestId() {
    return requestId;
  }


  public void setRequestId(UUID requestId) {
    
    
    if (requestId != null && requestId.length() < 36) {
      throw new IllegalArgumentException("Invalid value for requestId. Length must be greater than or equal to 36.");
    }
    this.requestId = requestId;
  }


   /**
   * The errors associated with the failed API call
   * @return errors
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The errors associated with the failed API call")

  public List<Error> getErrors() {
    return errors;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SchedulePickupResponseBody instance itself
   */
  public SchedulePickupResponseBody putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SchedulePickupResponseBody schedulePickupResponseBody = (SchedulePickupResponseBody) o;
    return Objects.equals(this.pickupId, schedulePickupResponseBody.pickupId) &&
        Objects.equals(this.labelIds, schedulePickupResponseBody.labelIds) &&
        Objects.equals(this.createdAt, schedulePickupResponseBody.createdAt) &&
        Objects.equals(this.cancelledAt, schedulePickupResponseBody.cancelledAt) &&
        Objects.equals(this.carrierId, schedulePickupResponseBody.carrierId) &&
        Objects.equals(this.confirmationNumber, schedulePickupResponseBody.confirmationNumber) &&
        Objects.equals(this.warehouseId, schedulePickupResponseBody.warehouseId) &&
        Objects.equals(this.pickupAddress, schedulePickupResponseBody.pickupAddress) &&
        Objects.equals(this.contactDetails, schedulePickupResponseBody.contactDetails) &&
        Objects.equals(this.pickupNotes, schedulePickupResponseBody.pickupNotes) &&
        Objects.equals(this.pickupWindow, schedulePickupResponseBody.pickupWindow) &&
        Objects.equals(this.pickupWindows, schedulePickupResponseBody.pickupWindows) &&
        Objects.equals(this.requestId, schedulePickupResponseBody.requestId) &&
        Objects.equals(this.errors, schedulePickupResponseBody.errors)&&
        Objects.equals(this.additionalProperties, schedulePickupResponseBody.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(pickupId, labelIds, createdAt, cancelledAt, carrierId, confirmationNumber, warehouseId, pickupAddress, contactDetails, pickupNotes, pickupWindow, pickupWindows, requestId, errors, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SchedulePickupResponseBody {\n");
    sb.append("    pickupId: ").append(toIndentedString(pickupId)).append("\n");
    sb.append("    labelIds: ").append(toIndentedString(labelIds)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    cancelledAt: ").append(toIndentedString(cancelledAt)).append("\n");
    sb.append("    carrierId: ").append(toIndentedString(carrierId)).append("\n");
    sb.append("    confirmationNumber: ").append(toIndentedString(confirmationNumber)).append("\n");
    sb.append("    warehouseId: ").append(toIndentedString(warehouseId)).append("\n");
    sb.append("    pickupAddress: ").append(toIndentedString(pickupAddress)).append("\n");
    sb.append("    contactDetails: ").append(toIndentedString(contactDetails)).append("\n");
    sb.append("    pickupNotes: ").append(toIndentedString(pickupNotes)).append("\n");
    sb.append("    pickupWindow: ").append(toIndentedString(pickupWindow)).append("\n");
    sb.append("    pickupWindows: ").append(toIndentedString(pickupWindows)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("pickup_id");
    openapiFields.add("label_ids");
    openapiFields.add("created_at");
    openapiFields.add("cancelled_at");
    openapiFields.add("carrier_id");
    openapiFields.add("confirmation_number");
    openapiFields.add("warehouse_id");
    openapiFields.add("pickup_address");
    openapiFields.add("contact_details");
    openapiFields.add("pickup_notes");
    openapiFields.add("pickup_window");
    openapiFields.add("pickup_windows");
    openapiFields.add("request_id");
    openapiFields.add("errors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("request_id");
    openapiRequiredFields.add("errors");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to SchedulePickupResponseBody
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!SchedulePickupResponseBody.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SchedulePickupResponseBody is not found in the empty JSON string", SchedulePickupResponseBody.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SchedulePickupResponseBody.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("pickup_id") != null && !jsonObj.get("pickup_id").isJsonNull()) && !jsonObj.get("pickup_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pickup_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pickup_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("label_ids") != null && !jsonObj.get("label_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `label_ids` to be an array in the JSON string but got `%s`", jsonObj.get("label_ids").toString()));
      }
      if ((jsonObj.get("carrier_id") != null && !jsonObj.get("carrier_id").isJsonNull()) && !jsonObj.get("carrier_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier_id").toString()));
      }
      if (!jsonObj.get("confirmation_number").isJsonNull() && (jsonObj.get("confirmation_number") != null && !jsonObj.get("confirmation_number").isJsonNull()) && !jsonObj.get("confirmation_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confirmation_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confirmation_number").toString()));
      }
      if ((jsonObj.get("warehouse_id") != null && !jsonObj.get("warehouse_id").isJsonNull()) && !jsonObj.get("warehouse_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `warehouse_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("warehouse_id").toString()));
      }
      // validate the optional field `pickup_address`
      if (jsonObj.get("pickup_address") != null && !jsonObj.get("pickup_address").isJsonNull()) {
        PartialAddress.validateJsonObject(jsonObj.getAsJsonObject("pickup_address"));
      }
      // validate the optional field `contact_details`
      if (jsonObj.get("contact_details") != null && !jsonObj.get("contact_details").isJsonNull()) {
        ContactDetails.validateJsonObject(jsonObj.getAsJsonObject("contact_details"));
      }
      if ((jsonObj.get("pickup_notes") != null && !jsonObj.get("pickup_notes").isJsonNull()) && !jsonObj.get("pickup_notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pickup_notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pickup_notes").toString()));
      }
      // validate the optional field `pickup_window`
      if (jsonObj.get("pickup_window") != null && !jsonObj.get("pickup_window").isJsonNull()) {
        PickupWindow.validateJsonObject(jsonObj.getAsJsonObject("pickup_window"));
      }
      if (jsonObj.get("pickup_windows") != null && !jsonObj.get("pickup_windows").isJsonNull()) {
        JsonArray jsonArraypickupWindows = jsonObj.getAsJsonArray("pickup_windows");
        if (jsonArraypickupWindows != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pickup_windows").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pickup_windows` to be an array in the JSON string but got `%s`", jsonObj.get("pickup_windows").toString()));
          }

          // validate the optional field `pickup_windows` (array)
          for (int i = 0; i < jsonArraypickupWindows.size(); i++) {
            PickupWindows.validateJsonObject(jsonArraypickupWindows.get(i).getAsJsonObject());
          };
        }
      }
      if (!jsonObj.get("request_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `request_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("request_id").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("errors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
      }

      JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
      // validate the required field `errors` (array)
      for (int i = 0; i < jsonArrayerrors.size(); i++) {
        Error.validateJsonObject(jsonArrayerrors.get(i).getAsJsonObject());
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SchedulePickupResponseBody.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SchedulePickupResponseBody' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SchedulePickupResponseBody> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SchedulePickupResponseBody.class));

       return (TypeAdapter<T>) new TypeAdapter<SchedulePickupResponseBody>() {
           @Override
           public void write(JsonWriter out, SchedulePickupResponseBody value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SchedulePickupResponseBody read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             SchedulePickupResponseBody instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SchedulePickupResponseBody given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SchedulePickupResponseBody
  * @throws IOException if the JSON string is invalid with respect to SchedulePickupResponseBody
  */
  public static SchedulePickupResponseBody fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SchedulePickupResponseBody.class);
  }

 /**
  * Convert an instance of SchedulePickupResponseBody to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

