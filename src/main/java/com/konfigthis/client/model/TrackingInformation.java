/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202403202303
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.StatusCode;
import com.konfigthis.client.model.TrackEvent;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * A tracking information resource
 */
@ApiModel(description = "A tracking information resource")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TrackingInformation {
  public static final String SERIALIZED_NAME_TRACKING_NUMBER = "tracking_number";
  @SerializedName(SERIALIZED_NAME_TRACKING_NUMBER)
  private String trackingNumber;

  public static final String SERIALIZED_NAME_TRACKING_URL = "tracking_url";
  @SerializedName(SERIALIZED_NAME_TRACKING_URL)
  private String trackingUrl;

  public static final String SERIALIZED_NAME_STATUS_CODE = "status_code";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private StatusCode statusCode;

  public static final String SERIALIZED_NAME_CARRIER_CODE = "carrier_code";
  @SerializedName(SERIALIZED_NAME_CARRIER_CODE)
  private String carrierCode;

  public static final String SERIALIZED_NAME_CARRIER_ID = "carrier_id";
  @SerializedName(SERIALIZED_NAME_CARRIER_ID)
  private String carrierId;

  public static final String SERIALIZED_NAME_STATUS_DESCRIPTION = "status_description";
  @SerializedName(SERIALIZED_NAME_STATUS_DESCRIPTION)
  private String statusDescription;

  public static final String SERIALIZED_NAME_CARRIER_STATUS_CODE = "carrier_status_code";
  @SerializedName(SERIALIZED_NAME_CARRIER_STATUS_CODE)
  private String carrierStatusCode;

  public static final String SERIALIZED_NAME_CARRIER_DETAIL_CODE = "carrier_detail_code";
  @SerializedName(SERIALIZED_NAME_CARRIER_DETAIL_CODE)
  private String carrierDetailCode;

  public static final String SERIALIZED_NAME_CARRIER_STATUS_DESCRIPTION = "carrier_status_description";
  @SerializedName(SERIALIZED_NAME_CARRIER_STATUS_DESCRIPTION)
  private String carrierStatusDescription;

  public static final String SERIALIZED_NAME_SHIP_DATE = "ship_date";
  @SerializedName(SERIALIZED_NAME_SHIP_DATE)
  private OffsetDateTime shipDate;

  public static final String SERIALIZED_NAME_ESTIMATED_DELIVERY_DATE = "estimated_delivery_date";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_DELIVERY_DATE)
  private OffsetDateTime estimatedDeliveryDate;

  public static final String SERIALIZED_NAME_ACTUAL_DELIVERY_DATE = "actual_delivery_date";
  @SerializedName(SERIALIZED_NAME_ACTUAL_DELIVERY_DATE)
  private OffsetDateTime actualDeliveryDate;

  public static final String SERIALIZED_NAME_EXCEPTION_DESCRIPTION = "exception_description";
  @SerializedName(SERIALIZED_NAME_EXCEPTION_DESCRIPTION)
  private String exceptionDescription;

  public static final String SERIALIZED_NAME_EVENTS = "events";
  @SerializedName(SERIALIZED_NAME_EVENTS)
  private List<TrackEvent> events = null;

  public TrackingInformation() {
  }

  
  public TrackingInformation(
     String trackingUrl, 
     String statusDescription, 
     String carrierStatusCode, 
     String carrierDetailCode, 
     String carrierStatusDescription, 
     String exceptionDescription, 
     List<TrackEvent> events
  ) {
    this();
    this.trackingUrl = trackingUrl;
    this.statusDescription = statusDescription;
    this.carrierStatusCode = carrierStatusCode;
    this.carrierDetailCode = carrierDetailCode;
    this.carrierStatusDescription = carrierStatusDescription;
    this.exceptionDescription = exceptionDescription;
    this.events = events;
  }

  public TrackingInformation trackingNumber(String trackingNumber) {
    
    
    if (trackingNumber != null && trackingNumber.length() < 1) {
      throw new IllegalArgumentException("Invalid value for trackingNumber. Length must be greater than or equal to 1.");
    }
    
    this.trackingNumber = trackingNumber;
    return this;
  }

   /**
   * A tracking number for a package. The format depends on the carrier.
   * @return trackingNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1Z932R800392060079", value = "A tracking number for a package. The format depends on the carrier.")

  public String getTrackingNumber() {
    return trackingNumber;
  }


  public void setTrackingNumber(String trackingNumber) {
    
    
    if (trackingNumber != null && trackingNumber.length() < 1) {
      throw new IllegalArgumentException("Invalid value for trackingNumber. Length must be greater than or equal to 1.");
    }
    this.trackingNumber = trackingNumber;
  }


   /**
   * Carrier Tracking Url, if available
   * @return trackingUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "https://www.fedex.com/fedextrack/?action=track&trackingnumber=1234", value = "Carrier Tracking Url, if available")

  public String getTrackingUrl() {
    return trackingUrl;
  }




  public TrackingInformation statusCode(StatusCode statusCode) {
    
    
    
    
    this.statusCode = statusCode;
    return this;
  }

   /**
   * Get statusCode
   * @return statusCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public StatusCode getStatusCode() {
    return statusCode;
  }


  public void setStatusCode(StatusCode statusCode) {
    
    
    
    this.statusCode = statusCode;
  }


  public TrackingInformation carrierCode(String carrierCode) {
    
    
    
    
    this.carrierCode = carrierCode;
    return this;
  }

   /**
   * A [shipping carrier](https://www.shipengine.com/docs/carriers/setup/), such as &#x60;fedex&#x60;, &#x60;dhl_express&#x60;, &#x60;stamps_com&#x60;, etc. 
   * @return carrierCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "dhl_express", value = "A [shipping carrier](https://www.shipengine.com/docs/carriers/setup/), such as `fedex`, `dhl_express`, `stamps_com`, etc. ")

  public String getCarrierCode() {
    return carrierCode;
  }


  public void setCarrierCode(String carrierCode) {
    
    
    
    this.carrierCode = carrierCode;
  }


  public TrackingInformation carrierId(String carrierId) {
    
    
    if (carrierId != null && carrierId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for carrierId. Length must be greater than or equal to 1.");
    }
    
    this.carrierId = carrierId;
    return this;
  }

   /**
   * A string that uniquely identifies a ShipEngine resource, such as a carrier, label, shipment, etc.
   * @return carrierId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "se-28529731", value = "A string that uniquely identifies a ShipEngine resource, such as a carrier, label, shipment, etc.")

  public String getCarrierId() {
    return carrierId;
  }


  public void setCarrierId(String carrierId) {
    
    
    if (carrierId != null && carrierId.length() < 1) {
      throw new IllegalArgumentException("Invalid value for carrierId. Length must be greater than or equal to 1.");
    }
    this.carrierId = carrierId;
  }


   /**
   * Status description
   * @return statusDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Delivered", value = "Status description")

  public String getStatusDescription() {
    return statusDescription;
  }




   /**
   * Carrier status code
   * @return carrierStatusCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1", value = "Carrier status code")

  public String getCarrierStatusCode() {
    return carrierStatusCode;
  }




   /**
   * Carrier detail code
   * @return carrierDetailCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "OT", value = "Carrier detail code")

  public String getCarrierDetailCode() {
    return carrierDetailCode;
  }




   /**
   * carrier status description
   * @return carrierStatusDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Your item was delivered in or at the mailbox at 9:10 am on March", value = "carrier status description")

  public String getCarrierStatusDescription() {
    return carrierStatusDescription;
  }




  public TrackingInformation shipDate(OffsetDateTime shipDate) {
    
    
    
    
    this.shipDate = shipDate;
    return this;
  }

   /**
   * An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date and time. 
   * @return shipDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2018-09-23T15:00Z", value = "An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date and time. ")

  public OffsetDateTime getShipDate() {
    return shipDate;
  }


  public void setShipDate(OffsetDateTime shipDate) {
    
    
    
    this.shipDate = shipDate;
  }


  public TrackingInformation estimatedDeliveryDate(OffsetDateTime estimatedDeliveryDate) {
    
    
    
    
    this.estimatedDeliveryDate = estimatedDeliveryDate;
    return this;
  }

   /**
   * An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date and time. 
   * @return estimatedDeliveryDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2018-09-23T15:00Z", value = "An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date and time. ")

  public OffsetDateTime getEstimatedDeliveryDate() {
    return estimatedDeliveryDate;
  }


  public void setEstimatedDeliveryDate(OffsetDateTime estimatedDeliveryDate) {
    
    
    
    this.estimatedDeliveryDate = estimatedDeliveryDate;
  }


  public TrackingInformation actualDeliveryDate(OffsetDateTime actualDeliveryDate) {
    
    
    
    
    this.actualDeliveryDate = actualDeliveryDate;
    return this;
  }

   /**
   * An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date and time. 
   * @return actualDeliveryDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2018-09-23T15:00Z", value = "An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date and time. ")

  public OffsetDateTime getActualDeliveryDate() {
    return actualDeliveryDate;
  }


  public void setActualDeliveryDate(OffsetDateTime actualDeliveryDate) {
    
    
    
    this.actualDeliveryDate = actualDeliveryDate;
  }


   /**
   * Exception description
   * @return exceptionDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Exception description")

  public String getExceptionDescription() {
    return exceptionDescription;
  }




   /**
   * The events that have occured during the lifetime of this tracking number.
   * @return events
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The events that have occured during the lifetime of this tracking number.")

  public List<TrackEvent> getEvents() {
    return events;
  }



  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TrackingInformation instance itself
   */
  public TrackingInformation putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrackingInformation trackingInformation = (TrackingInformation) o;
    return Objects.equals(this.trackingNumber, trackingInformation.trackingNumber) &&
        Objects.equals(this.trackingUrl, trackingInformation.trackingUrl) &&
        Objects.equals(this.statusCode, trackingInformation.statusCode) &&
        Objects.equals(this.carrierCode, trackingInformation.carrierCode) &&
        Objects.equals(this.carrierId, trackingInformation.carrierId) &&
        Objects.equals(this.statusDescription, trackingInformation.statusDescription) &&
        Objects.equals(this.carrierStatusCode, trackingInformation.carrierStatusCode) &&
        Objects.equals(this.carrierDetailCode, trackingInformation.carrierDetailCode) &&
        Objects.equals(this.carrierStatusDescription, trackingInformation.carrierStatusDescription) &&
        Objects.equals(this.shipDate, trackingInformation.shipDate) &&
        Objects.equals(this.estimatedDeliveryDate, trackingInformation.estimatedDeliveryDate) &&
        Objects.equals(this.actualDeliveryDate, trackingInformation.actualDeliveryDate) &&
        Objects.equals(this.exceptionDescription, trackingInformation.exceptionDescription) &&
        Objects.equals(this.events, trackingInformation.events)&&
        Objects.equals(this.additionalProperties, trackingInformation.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(trackingNumber, trackingUrl, statusCode, carrierCode, carrierId, statusDescription, carrierStatusCode, carrierDetailCode, carrierStatusDescription, shipDate, estimatedDeliveryDate, actualDeliveryDate, exceptionDescription, events, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrackingInformation {\n");
    sb.append("    trackingNumber: ").append(toIndentedString(trackingNumber)).append("\n");
    sb.append("    trackingUrl: ").append(toIndentedString(trackingUrl)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    carrierCode: ").append(toIndentedString(carrierCode)).append("\n");
    sb.append("    carrierId: ").append(toIndentedString(carrierId)).append("\n");
    sb.append("    statusDescription: ").append(toIndentedString(statusDescription)).append("\n");
    sb.append("    carrierStatusCode: ").append(toIndentedString(carrierStatusCode)).append("\n");
    sb.append("    carrierDetailCode: ").append(toIndentedString(carrierDetailCode)).append("\n");
    sb.append("    carrierStatusDescription: ").append(toIndentedString(carrierStatusDescription)).append("\n");
    sb.append("    shipDate: ").append(toIndentedString(shipDate)).append("\n");
    sb.append("    estimatedDeliveryDate: ").append(toIndentedString(estimatedDeliveryDate)).append("\n");
    sb.append("    actualDeliveryDate: ").append(toIndentedString(actualDeliveryDate)).append("\n");
    sb.append("    exceptionDescription: ").append(toIndentedString(exceptionDescription)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tracking_number");
    openapiFields.add("tracking_url");
    openapiFields.add("status_code");
    openapiFields.add("carrier_code");
    openapiFields.add("carrier_id");
    openapiFields.add("status_description");
    openapiFields.add("carrier_status_code");
    openapiFields.add("carrier_detail_code");
    openapiFields.add("carrier_status_description");
    openapiFields.add("ship_date");
    openapiFields.add("estimated_delivery_date");
    openapiFields.add("actual_delivery_date");
    openapiFields.add("exception_description");
    openapiFields.add("events");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TrackingInformation
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TrackingInformation.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrackingInformation is not found in the empty JSON string", TrackingInformation.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("tracking_number") != null && !jsonObj.get("tracking_number").isJsonNull()) && !jsonObj.get("tracking_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tracking_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tracking_number").toString()));
      }
      if ((jsonObj.get("tracking_url") != null && !jsonObj.get("tracking_url").isJsonNull()) && !jsonObj.get("tracking_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tracking_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tracking_url").toString()));
      }
      if ((jsonObj.get("carrier_code") != null && !jsonObj.get("carrier_code").isJsonNull()) && !jsonObj.get("carrier_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier_code").toString()));
      }
      if ((jsonObj.get("carrier_id") != null && !jsonObj.get("carrier_id").isJsonNull()) && !jsonObj.get("carrier_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier_id").toString()));
      }
      if ((jsonObj.get("status_description") != null && !jsonObj.get("status_description").isJsonNull()) && !jsonObj.get("status_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status_description").toString()));
      }
      if ((jsonObj.get("carrier_status_code") != null && !jsonObj.get("carrier_status_code").isJsonNull()) && !jsonObj.get("carrier_status_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_status_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier_status_code").toString()));
      }
      if ((jsonObj.get("carrier_detail_code") != null && !jsonObj.get("carrier_detail_code").isJsonNull()) && !jsonObj.get("carrier_detail_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_detail_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier_detail_code").toString()));
      }
      if ((jsonObj.get("carrier_status_description") != null && !jsonObj.get("carrier_status_description").isJsonNull()) && !jsonObj.get("carrier_status_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `carrier_status_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("carrier_status_description").toString()));
      }
      if ((jsonObj.get("exception_description") != null && !jsonObj.get("exception_description").isJsonNull()) && !jsonObj.get("exception_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exception_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exception_description").toString()));
      }
      if (jsonObj.get("events") != null && !jsonObj.get("events").isJsonNull()) {
        JsonArray jsonArrayevents = jsonObj.getAsJsonArray("events");
        if (jsonArrayevents != null) {
          // ensure the json data is an array
          if (!jsonObj.get("events").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `events` to be an array in the JSON string but got `%s`", jsonObj.get("events").toString()));
          }

          // validate the optional field `events` (array)
          for (int i = 0; i < jsonArrayevents.size(); i++) {
            TrackEvent.validateJsonObject(jsonArrayevents.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrackingInformation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrackingInformation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrackingInformation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrackingInformation.class));

       return (TypeAdapter<T>) new TypeAdapter<TrackingInformation>() {
           @Override
           public void write(JsonWriter out, TrackingInformation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TrackingInformation read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TrackingInformation instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TrackingInformation given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TrackingInformation
  * @throws IOException if the JSON string is invalid with respect to TrackingInformation
  */
  public static TrackingInformation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrackingInformation.class);
  }

 /**
  * Convert an instance of TrackingInformation to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

