/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202403202303
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CreateManifestResponseBody;
import com.konfigthis.client.model.ListManifestsResponseBody;
import com.konfigthis.client.model.Manifest;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ManifestsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ManifestsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ManifestsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"API-Key\" is required but no API key was provided. Please set \"API-Key\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getByIdCall(String manifestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/manifests/{manifest_id}"
            .replace("{" + "manifest_id" + "}", localVarApiClient.escapeString(manifestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String manifestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'manifestId' is set
        if (manifestId == null) {
            throw new ApiException("Missing the required parameter 'manifestId' when calling getById(Async)");
        }

        return getByIdCall(manifestId, _callback);

    }


    private ApiResponse<Manifest> getByIdWithHttpInfo(String manifestId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(manifestId, null);
        Type localVarReturnType = new TypeToken<Manifest>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String manifestId, final ApiCallback<Manifest> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(manifestId, _callback);
        Type localVarReturnType = new TypeToken<Manifest>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String manifestId;

        private GetByIdRequestBuilder(String manifestId) {
            this.manifestId = manifestId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(manifestId, _callback);
        }


        /**
         * Execute getById request
         * @return Manifest
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public Manifest execute() throws ApiException {
            ApiResponse<Manifest> localVarResp = getByIdWithHttpInfo(manifestId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Manifest&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Manifest> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(manifestId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Manifest> _callback) throws ApiException {
            return getByIdAsync(manifestId, _callback);
        }
    }

    /**
     * Get Manifest By Id
     * Get Manifest By Id
     * @param manifestId The Manifest Id (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String manifestId) throws IllegalArgumentException {
        if (manifestId == null) throw new IllegalArgumentException("\"manifestId\" is required but got null");
            if (manifestId != null && manifestId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for manifestId. Length must be greater than or equal to 1.");
            }

        return new GetByIdRequestBuilder(manifestId);
    }
    private okhttp3.Call getRequestByIdCall(String manifestRequestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/manifests/requests/{manifest_request_id}"
            .replace("{" + "manifest_request_id" + "}", localVarApiClient.escapeString(manifestRequestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRequestByIdValidateBeforeCall(String manifestRequestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'manifestRequestId' is set
        if (manifestRequestId == null) {
            throw new ApiException("Missing the required parameter 'manifestRequestId' when calling getRequestById(Async)");
        }

        return getRequestByIdCall(manifestRequestId, _callback);

    }


    private ApiResponse<CreateManifestResponseBody> getRequestByIdWithHttpInfo(String manifestRequestId) throws ApiException {
        okhttp3.Call localVarCall = getRequestByIdValidateBeforeCall(manifestRequestId, null);
        Type localVarReturnType = new TypeToken<CreateManifestResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRequestByIdAsync(String manifestRequestId, final ApiCallback<CreateManifestResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRequestByIdValidateBeforeCall(manifestRequestId, _callback);
        Type localVarReturnType = new TypeToken<CreateManifestResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRequestByIdRequestBuilder {
        private final String manifestRequestId;

        private GetRequestByIdRequestBuilder(String manifestRequestId) {
            this.manifestRequestId = manifestRequestId;
        }

        /**
         * Build call for getRequestById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRequestByIdCall(manifestRequestId, _callback);
        }


        /**
         * Execute getRequestById request
         * @return CreateManifestResponseBody
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public CreateManifestResponseBody execute() throws ApiException {
            ApiResponse<CreateManifestResponseBody> localVarResp = getRequestByIdWithHttpInfo(manifestRequestId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRequestById request with HTTP info returned
         * @return ApiResponse&lt;CreateManifestResponseBody&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateManifestResponseBody> executeWithHttpInfo() throws ApiException {
            return getRequestByIdWithHttpInfo(manifestRequestId);
        }

        /**
         * Execute getRequestById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateManifestResponseBody> _callback) throws ApiException {
            return getRequestByIdAsync(manifestRequestId, _callback);
        }
    }

    /**
     * Get Manifest Request By Id
     * Get Manifest Request By Id
     * @param manifestRequestId The Manifest Request Id (required)
     * @return GetRequestByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public GetRequestByIdRequestBuilder getRequestById(String manifestRequestId) throws IllegalArgumentException {
        if (manifestRequestId == null) throw new IllegalArgumentException("\"manifestRequestId\" is required but got null");
            if (manifestRequestId != null && manifestRequestId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for manifestRequestId. Length must be greater than or equal to 1.");
            }

        return new GetRequestByIdRequestBuilder(manifestRequestId);
    }
    private okhttp3.Call manifestCall(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/manifests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call manifestValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling manifest(Async)");
        }

        return manifestCall(body, _callback);

    }


    private ApiResponse<CreateManifestResponseBody> manifestWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = manifestValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<CreateManifestResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call manifestAsync(Object body, final ApiCallback<CreateManifestResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = manifestValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<CreateManifestResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ManifestRequestBuilder {
        private Object body;

        private ManifestRequestBuilder() {
        }

        /**
         * Set body
         * @param body  (optional)
         * @return ManifestRequestBuilder
         */
        public ManifestRequestBuilder body(Object body) {
            this.body = body;
            return this;
        }

        /**
         * Build call for manifest
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return manifestCall(body, _callback);
        }

        private Object buildBodyParams() {
            return this.body;
        }

        /**
         * Execute manifest request
         * @return CreateManifestResponseBody
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public CreateManifestResponseBody execute() throws ApiException {
            Object body = buildBodyParams();
            ApiResponse<CreateManifestResponseBody> localVarResp = manifestWithHttpInfo(body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute manifest request with HTTP info returned
         * @return ApiResponse&lt;CreateManifestResponseBody&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateManifestResponseBody> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return manifestWithHttpInfo(body);
        }

        /**
         * Execute manifest request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateManifestResponseBody> _callback) throws ApiException {
            Object body = buildBodyParams();
            return manifestAsync(body, _callback);
        }
    }

    /**
     * Create Manifest
     * Each ShipEngine manifest is created for a specific warehouse, so you&#39;ll need to provide the warehouse_id rather than the ship_from address. You can create a warehouse for each location that you want to create manifests for. 
     * @param body  (required)
     * @return ManifestRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public ManifestRequestBuilder manifest() throws IllegalArgumentException {
        return new ManifestRequestBuilder();
    }
    private okhttp3.Call manifestsCall(String warehouseId, OffsetDateTime shipDateStart, OffsetDateTime shipDateEnd, OffsetDateTime createdAtStart, OffsetDateTime createdAtEnd, String carrierId, Integer page, Integer pageSize, List<String> labelIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/manifests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (warehouseId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("warehouse_id", warehouseId));
        }

        if (shipDateStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ship_date_start", shipDateStart));
        }

        if (shipDateEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ship_date_end", shipDateEnd));
        }

        if (createdAtStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at_start", createdAtStart));
        }

        if (createdAtEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at_end", createdAtEnd));
        }

        if (carrierId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("carrier_id", carrierId));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (labelIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "label_ids", labelIds));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call manifestsValidateBeforeCall(String warehouseId, OffsetDateTime shipDateStart, OffsetDateTime shipDateEnd, OffsetDateTime createdAtStart, OffsetDateTime createdAtEnd, String carrierId, Integer page, Integer pageSize, List<String> labelIds, final ApiCallback _callback) throws ApiException {
        return manifestsCall(warehouseId, shipDateStart, shipDateEnd, createdAtStart, createdAtEnd, carrierId, page, pageSize, labelIds, _callback);

    }


    private ApiResponse<ListManifestsResponseBody> manifestsWithHttpInfo(String warehouseId, OffsetDateTime shipDateStart, OffsetDateTime shipDateEnd, OffsetDateTime createdAtStart, OffsetDateTime createdAtEnd, String carrierId, Integer page, Integer pageSize, List<String> labelIds) throws ApiException {
        okhttp3.Call localVarCall = manifestsValidateBeforeCall(warehouseId, shipDateStart, shipDateEnd, createdAtStart, createdAtEnd, carrierId, page, pageSize, labelIds, null);
        Type localVarReturnType = new TypeToken<ListManifestsResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call manifestsAsync(String warehouseId, OffsetDateTime shipDateStart, OffsetDateTime shipDateEnd, OffsetDateTime createdAtStart, OffsetDateTime createdAtEnd, String carrierId, Integer page, Integer pageSize, List<String> labelIds, final ApiCallback<ListManifestsResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = manifestsValidateBeforeCall(warehouseId, shipDateStart, shipDateEnd, createdAtStart, createdAtEnd, carrierId, page, pageSize, labelIds, _callback);
        Type localVarReturnType = new TypeToken<ListManifestsResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ManifestsRequestBuilder {
        private String warehouseId;
        private OffsetDateTime shipDateStart;
        private OffsetDateTime shipDateEnd;
        private OffsetDateTime createdAtStart;
        private OffsetDateTime createdAtEnd;
        private String carrierId;
        private Integer page;
        private Integer pageSize;
        private List<String> labelIds;

        private ManifestsRequestBuilder() {
        }

        /**
         * Set warehouseId
         * @param warehouseId Warehouse ID (optional)
         * @return ManifestsRequestBuilder
         */
        public ManifestsRequestBuilder warehouseId(String warehouseId) {
            this.warehouseId = warehouseId;
            return this;
        }
        
        /**
         * Set shipDateStart
         * @param shipDateStart ship date start range (optional)
         * @return ManifestsRequestBuilder
         */
        public ManifestsRequestBuilder shipDateStart(OffsetDateTime shipDateStart) {
            this.shipDateStart = shipDateStart;
            return this;
        }
        
        /**
         * Set shipDateEnd
         * @param shipDateEnd ship date end range (optional)
         * @return ManifestsRequestBuilder
         */
        public ManifestsRequestBuilder shipDateEnd(OffsetDateTime shipDateEnd) {
            this.shipDateEnd = shipDateEnd;
            return this;
        }
        
        /**
         * Set createdAtStart
         * @param createdAtStart Used to create a filter for when a resource was created (ex. A shipment that was created after a certain time) (optional)
         * @return ManifestsRequestBuilder
         */
        public ManifestsRequestBuilder createdAtStart(OffsetDateTime createdAtStart) {
            this.createdAtStart = createdAtStart;
            return this;
        }
        
        /**
         * Set createdAtEnd
         * @param createdAtEnd Used to create a filter for when a resource was created, (ex. A shipment that was created before a certain time) (optional)
         * @return ManifestsRequestBuilder
         */
        public ManifestsRequestBuilder createdAtEnd(OffsetDateTime createdAtEnd) {
            this.createdAtEnd = createdAtEnd;
            return this;
        }
        
        /**
         * Set carrierId
         * @param carrierId Carrier ID (optional)
         * @return ManifestsRequestBuilder
         */
        public ManifestsRequestBuilder carrierId(String carrierId) {
            this.carrierId = carrierId;
            return this;
        }
        
        /**
         * Set page
         * @param page Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)
         * @return ManifestsRequestBuilder
         */
        public ManifestsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize The number of results to return per response. (optional, default to 25)
         * @return ManifestsRequestBuilder
         */
        public ManifestsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set labelIds
         * @param labelIds  (optional)
         * @return ManifestsRequestBuilder
         */
        public ManifestsRequestBuilder labelIds(List<String> labelIds) {
            this.labelIds = labelIds;
            return this;
        }
        
        /**
         * Build call for manifests
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return manifestsCall(warehouseId, shipDateStart, shipDateEnd, createdAtStart, createdAtEnd, carrierId, page, pageSize, labelIds, _callback);
        }


        /**
         * Execute manifests request
         * @return ListManifestsResponseBody
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ListManifestsResponseBody execute() throws ApiException {
            ApiResponse<ListManifestsResponseBody> localVarResp = manifestsWithHttpInfo(warehouseId, shipDateStart, shipDateEnd, createdAtStart, createdAtEnd, carrierId, page, pageSize, labelIds);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute manifests request with HTTP info returned
         * @return ApiResponse&lt;ListManifestsResponseBody&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListManifestsResponseBody> executeWithHttpInfo() throws ApiException {
            return manifestsWithHttpInfo(warehouseId, shipDateStart, shipDateEnd, createdAtStart, createdAtEnd, carrierId, page, pageSize, labelIds);
        }

        /**
         * Execute manifests request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListManifestsResponseBody> _callback) throws ApiException {
            return manifestsAsync(warehouseId, shipDateStart, shipDateEnd, createdAtStart, createdAtEnd, carrierId, page, pageSize, labelIds, _callback);
        }
    }

    /**
     * List Manifests
     * Similar to querying shipments, we allow you to query manifests since there will likely be a large number over a long period of time.
     * @return ManifestsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public ManifestsRequestBuilder manifests() throws IllegalArgumentException {
        return new ManifestsRequestBuilder();
    }
}
