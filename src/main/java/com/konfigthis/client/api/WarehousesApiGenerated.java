/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202403202303
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ListWarehousesResponseBody;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.PartialAddress;
import com.konfigthis.client.model.UpdateWarehouseSettingsRequestBody;
import com.konfigthis.client.model.Warehouse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class WarehousesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WarehousesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public WarehousesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"API-Key\" is required but no API key was provided. Please set \"API-Key\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getByIdCall(String warehouseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/warehouses/{warehouse_id}"
            .replace("{" + "warehouse_id" + "}", localVarApiClient.escapeString(warehouseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String warehouseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'warehouseId' is set
        if (warehouseId == null) {
            throw new ApiException("Missing the required parameter 'warehouseId' when calling getById(Async)");
        }

        return getByIdCall(warehouseId, _callback);

    }


    private ApiResponse<Warehouse> getByIdWithHttpInfo(String warehouseId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(warehouseId, null);
        Type localVarReturnType = new TypeToken<Warehouse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String warehouseId, final ApiCallback<Warehouse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(warehouseId, _callback);
        Type localVarReturnType = new TypeToken<Warehouse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String warehouseId;

        private GetByIdRequestBuilder(String warehouseId) {
            this.warehouseId = warehouseId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(warehouseId, _callback);
        }


        /**
         * Execute getById request
         * @return Warehouse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public Warehouse execute() throws ApiException {
            ApiResponse<Warehouse> localVarResp = getByIdWithHttpInfo(warehouseId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Warehouse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Warehouse> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(warehouseId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Warehouse> _callback) throws ApiException {
            return getByIdAsync(warehouseId, _callback);
        }
    }

    /**
     * Get Warehouse By Id
     * Retrieve warehouse data based on the warehouse ID
     * @param warehouseId Warehouse ID (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String warehouseId) throws IllegalArgumentException {
        if (warehouseId == null) throw new IllegalArgumentException("\"warehouseId\" is required but got null");
            if (warehouseId != null && warehouseId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for warehouseId. Length must be greater than or equal to 1.");
            }

        return new GetByIdRequestBuilder(warehouseId);
    }
    private okhttp3.Call updateSettingsCall(String warehouseId, UpdateWarehouseSettingsRequestBody updateWarehouseSettingsRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateWarehouseSettingsRequestBody;

        // create path and map variables
        String localVarPath = "/v1/warehouses/{warehouse_id}/settings"
            .replace("{" + "warehouse_id" + "}", localVarApiClient.escapeString(warehouseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSettingsValidateBeforeCall(String warehouseId, UpdateWarehouseSettingsRequestBody updateWarehouseSettingsRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'warehouseId' is set
        if (warehouseId == null) {
            throw new ApiException("Missing the required parameter 'warehouseId' when calling updateSettings(Async)");
        }

        // verify the required parameter 'updateWarehouseSettingsRequestBody' is set
        if (updateWarehouseSettingsRequestBody == null) {
            throw new ApiException("Missing the required parameter 'updateWarehouseSettingsRequestBody' when calling updateSettings(Async)");
        }

        return updateSettingsCall(warehouseId, updateWarehouseSettingsRequestBody, _callback);

    }


    private ApiResponse<String> updateSettingsWithHttpInfo(String warehouseId, UpdateWarehouseSettingsRequestBody updateWarehouseSettingsRequestBody) throws ApiException {
        okhttp3.Call localVarCall = updateSettingsValidateBeforeCall(warehouseId, updateWarehouseSettingsRequestBody, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSettingsAsync(String warehouseId, UpdateWarehouseSettingsRequestBody updateWarehouseSettingsRequestBody, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSettingsValidateBeforeCall(warehouseId, updateWarehouseSettingsRequestBody, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSettingsRequestBuilder {
        private final String warehouseId;
        private Boolean isDefault;

        private UpdateSettingsRequestBuilder(String warehouseId) {
            this.warehouseId = warehouseId;
        }

        /**
         * Set isDefault
         * @param isDefault The default property on the warehouse. (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder isDefault(Boolean isDefault) {
            this.isDefault = isDefault;
            return this;
        }
        
        /**
         * Build call for updateSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateWarehouseSettingsRequestBody updateWarehouseSettingsRequestBody = buildBodyParams();
            return updateSettingsCall(warehouseId, updateWarehouseSettingsRequestBody, _callback);
        }

        private UpdateWarehouseSettingsRequestBody buildBodyParams() {
            UpdateWarehouseSettingsRequestBody updateWarehouseSettingsRequestBody = new UpdateWarehouseSettingsRequestBody();
            updateWarehouseSettingsRequestBody.isDefault(this.isDefault);
            return updateWarehouseSettingsRequestBody;
        }

        /**
         * Execute updateSettings request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            UpdateWarehouseSettingsRequestBody updateWarehouseSettingsRequestBody = buildBodyParams();
            ApiResponse<String> localVarResp = updateSettingsWithHttpInfo(warehouseId, updateWarehouseSettingsRequestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSettings request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            UpdateWarehouseSettingsRequestBody updateWarehouseSettingsRequestBody = buildBodyParams();
            return updateSettingsWithHttpInfo(warehouseId, updateWarehouseSettingsRequestBody);
        }

        /**
         * Execute updateSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            UpdateWarehouseSettingsRequestBody updateWarehouseSettingsRequestBody = buildBodyParams();
            return updateSettingsAsync(warehouseId, updateWarehouseSettingsRequestBody, _callback);
        }
    }

    /**
     * Update Warehouse Settings
     * Update Warehouse settings object information
     * @param warehouseId Warehouse ID (required)
     * @param updateWarehouseSettingsRequestBody  (required)
     * @return UpdateSettingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSettingsRequestBuilder updateSettings(String warehouseId) throws IllegalArgumentException {
        if (warehouseId == null) throw new IllegalArgumentException("\"warehouseId\" is required but got null");
            if (warehouseId != null && warehouseId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for warehouseId. Length must be greater than or equal to 1.");
            }

        return new UpdateSettingsRequestBuilder(warehouseId);
    }
    private okhttp3.Call warehouseCall(Warehouse warehouse, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = warehouse;

        // create path and map variables
        String localVarPath = "/v1/warehouses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call warehouseValidateBeforeCall(Warehouse warehouse, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'warehouse' is set
        if (warehouse == null) {
            throw new ApiException("Missing the required parameter 'warehouse' when calling warehouse(Async)");
        }

        return warehouseCall(warehouse, _callback);

    }


    private ApiResponse<Warehouse> warehouseWithHttpInfo(Warehouse warehouse) throws ApiException {
        okhttp3.Call localVarCall = warehouseValidateBeforeCall(warehouse, null);
        Type localVarReturnType = new TypeToken<Warehouse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call warehouseAsync(Warehouse warehouse, final ApiCallback<Warehouse> _callback) throws ApiException {

        okhttp3.Call localVarCall = warehouseValidateBeforeCall(warehouse, _callback);
        Type localVarReturnType = new TypeToken<Warehouse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class WarehouseRequestBuilder {
        private String warehouseId;
        private Boolean isDefault;
        private String name;
        private OffsetDateTime createdAt;
        private PartialAddress originAddress;
        private PartialAddress returnAddress;

        private WarehouseRequestBuilder() {
        }

        /**
         * Set warehouseId
         * @param warehouseId A string that uniquely identifies a ShipEngine resource, such as a carrier, label, shipment, etc. (optional)
         * @return WarehouseRequestBuilder
         */
        public WarehouseRequestBuilder warehouseId(String warehouseId) {
            this.warehouseId = warehouseId;
            return this;
        }
        
        /**
         * Set isDefault
         * @param isDefault Designates which single warehouse is the default on the account (optional, default to false)
         * @return WarehouseRequestBuilder
         */
        public WarehouseRequestBuilder isDefault(Boolean isDefault) {
            this.isDefault = isDefault;
            return this;
        }
        
        /**
         * Set name
         * @param name Name of the warehouse (optional)
         * @return WarehouseRequestBuilder
         */
        public WarehouseRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set createdAt
         * @param createdAt Timestamp that indicates when the warehouse was created (optional)
         * @return WarehouseRequestBuilder
         */
        public WarehouseRequestBuilder createdAt(OffsetDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }
        
        /**
         * Set originAddress
         * @param originAddress The origin address of the warehouse (optional)
         * @return WarehouseRequestBuilder
         */
        public WarehouseRequestBuilder originAddress(PartialAddress originAddress) {
            this.originAddress = originAddress;
            return this;
        }
        
        /**
         * Set returnAddress
         * @param returnAddress The return address associated with the warehouse (optional)
         * @return WarehouseRequestBuilder
         */
        public WarehouseRequestBuilder returnAddress(PartialAddress returnAddress) {
            this.returnAddress = returnAddress;
            return this;
        }
        
        /**
         * Build call for warehouse
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Warehouse warehouse = buildBodyParams();
            return warehouseCall(warehouse, _callback);
        }

        private Warehouse buildBodyParams() {
            Warehouse warehouse = new Warehouse();
            warehouse.warehouseId(this.warehouseId);
            warehouse.isDefault(this.isDefault);
            warehouse.name(this.name);
            warehouse.createdAt(this.createdAt);
            warehouse.originAddress(this.originAddress);
            warehouse.returnAddress(this.returnAddress);
            return warehouse;
        }

        /**
         * Execute warehouse request
         * @return Warehouse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public Warehouse execute() throws ApiException {
            Warehouse warehouse = buildBodyParams();
            ApiResponse<Warehouse> localVarResp = warehouseWithHttpInfo(warehouse);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute warehouse request with HTTP info returned
         * @return ApiResponse&lt;Warehouse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Warehouse> executeWithHttpInfo() throws ApiException {
            Warehouse warehouse = buildBodyParams();
            return warehouseWithHttpInfo(warehouse);
        }

        /**
         * Execute warehouse request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Warehouse> _callback) throws ApiException {
            Warehouse warehouse = buildBodyParams();
            return warehouseAsync(warehouse, _callback);
        }
    }

    /**
     * Create Warehouse
     * Create a warehouse location that you can use to create shipping items by simply passing in the generated warehouse id. If the return address is not supplied in the request body then it is assumed that the origin address is the return address as well 
     * @param warehouse  (required)
     * @return WarehouseRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public WarehouseRequestBuilder warehouse() throws IllegalArgumentException {
        return new WarehouseRequestBuilder();
    }
    private okhttp3.Call warehouse_0Call(String warehouseId, Warehouse warehouse, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = warehouse;

        // create path and map variables
        String localVarPath = "/v1/warehouses/{warehouse_id}"
            .replace("{" + "warehouse_id" + "}", localVarApiClient.escapeString(warehouseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call warehouse_0ValidateBeforeCall(String warehouseId, Warehouse warehouse, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'warehouseId' is set
        if (warehouseId == null) {
            throw new ApiException("Missing the required parameter 'warehouseId' when calling warehouse_0(Async)");
        }

        // verify the required parameter 'warehouse' is set
        if (warehouse == null) {
            throw new ApiException("Missing the required parameter 'warehouse' when calling warehouse_0(Async)");
        }

        return warehouse_0Call(warehouseId, warehouse, _callback);

    }


    private ApiResponse<String> warehouse_0WithHttpInfo(String warehouseId, Warehouse warehouse) throws ApiException {
        okhttp3.Call localVarCall = warehouse_0ValidateBeforeCall(warehouseId, warehouse, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call warehouse_0Async(String warehouseId, Warehouse warehouse, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = warehouse_0ValidateBeforeCall(warehouseId, warehouse, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Warehouse0RequestBuilder {
        private final String warehouseId;
        private String warehouseId;
        private Boolean isDefault;
        private String name;
        private OffsetDateTime createdAt;
        private PartialAddress originAddress;
        private PartialAddress returnAddress;

        private Warehouse0RequestBuilder(String warehouseId) {
            this.warehouseId = warehouseId;
        }

        /**
         * Set warehouseId
         * @param warehouseId A string that uniquely identifies a ShipEngine resource, such as a carrier, label, shipment, etc. (optional)
         * @return Warehouse0RequestBuilder
         */
        public Warehouse0RequestBuilder warehouseId(String warehouseId) {
            this.warehouseId = warehouseId;
            return this;
        }
        
        /**
         * Set isDefault
         * @param isDefault Designates which single warehouse is the default on the account (optional, default to false)
         * @return Warehouse0RequestBuilder
         */
        public Warehouse0RequestBuilder isDefault(Boolean isDefault) {
            this.isDefault = isDefault;
            return this;
        }
        
        /**
         * Set name
         * @param name Name of the warehouse (optional)
         * @return Warehouse0RequestBuilder
         */
        public Warehouse0RequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set createdAt
         * @param createdAt Timestamp that indicates when the warehouse was created (optional)
         * @return Warehouse0RequestBuilder
         */
        public Warehouse0RequestBuilder createdAt(OffsetDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }
        
        /**
         * Set originAddress
         * @param originAddress The origin address of the warehouse (optional)
         * @return Warehouse0RequestBuilder
         */
        public Warehouse0RequestBuilder originAddress(PartialAddress originAddress) {
            this.originAddress = originAddress;
            return this;
        }
        
        /**
         * Set returnAddress
         * @param returnAddress The return address associated with the warehouse (optional)
         * @return Warehouse0RequestBuilder
         */
        public Warehouse0RequestBuilder returnAddress(PartialAddress returnAddress) {
            this.returnAddress = returnAddress;
            return this;
        }
        
        /**
         * Build call for warehouse_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Warehouse warehouse = buildBodyParams();
            return warehouse_0Call(warehouseId, warehouse, _callback);
        }

        private Warehouse buildBodyParams() {
            Warehouse warehouse = new Warehouse();
            warehouse.warehouseId(this.warehouseId);
            warehouse.isDefault(this.isDefault);
            warehouse.name(this.name);
            warehouse.createdAt(this.createdAt);
            warehouse.originAddress(this.originAddress);
            warehouse.returnAddress(this.returnAddress);
            return warehouse;
        }

        /**
         * Execute warehouse_0 request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            Warehouse warehouse = buildBodyParams();
            ApiResponse<String> localVarResp = warehouse_0WithHttpInfo(warehouseId, warehouse);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute warehouse_0 request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            Warehouse warehouse = buildBodyParams();
            return warehouse_0WithHttpInfo(warehouseId, warehouse);
        }

        /**
         * Execute warehouse_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            Warehouse warehouse = buildBodyParams();
            return warehouse_0Async(warehouseId, warehouse, _callback);
        }
    }

    /**
     * Update Warehouse By Id
     * Update Warehouse object information
     * @param warehouseId Warehouse ID (required)
     * @param warehouse  (required)
     * @return Warehouse0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
     </table>
     */
    public Warehouse0RequestBuilder warehouse_0(String warehouseId) throws IllegalArgumentException {
        if (warehouseId == null) throw new IllegalArgumentException("\"warehouseId\" is required but got null");
            if (warehouseId != null && warehouseId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for warehouseId. Length must be greater than or equal to 1.");
            }

        return new Warehouse0RequestBuilder(warehouseId);
    }
    private okhttp3.Call warehouse_1Call(String warehouseId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/warehouses/{warehouse_id}"
            .replace("{" + "warehouse_id" + "}", localVarApiClient.escapeString(warehouseId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call warehouse_1ValidateBeforeCall(String warehouseId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'warehouseId' is set
        if (warehouseId == null) {
            throw new ApiException("Missing the required parameter 'warehouseId' when calling warehouse_1(Async)");
        }

        return warehouse_1Call(warehouseId, _callback);

    }


    private ApiResponse<String> warehouse_1WithHttpInfo(String warehouseId) throws ApiException {
        okhttp3.Call localVarCall = warehouse_1ValidateBeforeCall(warehouseId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call warehouse_1Async(String warehouseId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = warehouse_1ValidateBeforeCall(warehouseId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Warehouse1RequestBuilder {
        private final String warehouseId;

        private Warehouse1RequestBuilder(String warehouseId) {
            this.warehouseId = warehouseId;
        }

        /**
         * Build call for warehouse_1
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return warehouse_1Call(warehouseId, _callback);
        }


        /**
         * Execute warehouse_1 request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = warehouse_1WithHttpInfo(warehouseId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute warehouse_1 request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return warehouse_1WithHttpInfo(warehouseId);
        }

        /**
         * Execute warehouse_1 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return warehouse_1Async(warehouseId, _callback);
        }
    }

    /**
     * Delete Warehouse By ID
     * Delete a warehouse by ID
     * @param warehouseId Warehouse ID (required)
     * @return Warehouse1RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
     </table>
     */
    public Warehouse1RequestBuilder warehouse_1(String warehouseId) throws IllegalArgumentException {
        if (warehouseId == null) throw new IllegalArgumentException("\"warehouseId\" is required but got null");
            if (warehouseId != null && warehouseId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for warehouseId. Length must be greater than or equal to 1.");
            }

        return new Warehouse1RequestBuilder(warehouseId);
    }
    private okhttp3.Call warehousesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/warehouses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call warehousesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return warehousesCall(_callback);

    }


    private ApiResponse<ListWarehousesResponseBody> warehousesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = warehousesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ListWarehousesResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call warehousesAsync(final ApiCallback<ListWarehousesResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = warehousesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ListWarehousesResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class WarehousesRequestBuilder {

        private WarehousesRequestBuilder() {
        }

        /**
         * Build call for warehouses
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return warehousesCall(_callback);
        }


        /**
         * Execute warehouses request
         * @return ListWarehousesResponseBody
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ListWarehousesResponseBody execute() throws ApiException {
            ApiResponse<ListWarehousesResponseBody> localVarResp = warehousesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute warehouses request with HTTP info returned
         * @return ApiResponse&lt;ListWarehousesResponseBody&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListWarehousesResponseBody> executeWithHttpInfo() throws ApiException {
            return warehousesWithHttpInfo();
        }

        /**
         * Execute warehouses request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListWarehousesResponseBody> _callback) throws ApiException {
            return warehousesAsync(_callback);
        }
    }

    /**
     * List Warehouses
     * Retrieve a list of warehouses associated with this account.
     * @return WarehousesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public WarehousesRequestBuilder warehouses() throws IllegalArgumentException {
        return new WarehousesRequestBuilder();
    }
}
