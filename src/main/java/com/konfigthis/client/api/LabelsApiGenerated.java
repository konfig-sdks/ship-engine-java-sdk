/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202403202303
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AlternativeIdentifier;
import com.konfigthis.client.model.CreateLabelFromShipmentRequestBody;
import com.konfigthis.client.model.CreateReturnLabelRequestBody;
import com.konfigthis.client.model.DisplayScheme;
import com.konfigthis.client.model.Label;
import com.konfigthis.client.model.LabelChargeEvent;
import com.konfigthis.client.model.LabelDownload;
import com.konfigthis.client.model.LabelDownloadType;
import com.konfigthis.client.model.LabelFormat;
import com.konfigthis.client.model.LabelInsuranceClaim;
import com.konfigthis.client.model.LabelLayout;
import com.konfigthis.client.model.LabelPackagesInner;
import com.konfigthis.client.model.LabelStatus;
import com.konfigthis.client.model.MonetaryValue;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.OptionalLinkNullable;
import com.konfigthis.client.model.PagedListResponseBody;
import com.konfigthis.client.model.PartialShipment;
import com.konfigthis.client.model.PurchaseLabelWithoutShipment;
import com.konfigthis.client.model.SortDir;
import com.konfigthis.client.model.TrackingInformation;
import com.konfigthis.client.model.TrackingStatus;
import com.konfigthis.client.model.ValidateAddress;
import com.konfigthis.client.model.VoidLabelResponseBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class LabelsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LabelsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public LabelsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"API-Key\" is required but no API key was provided. Please set \"API-Key\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createReturnLabelCall(String labelId, CreateReturnLabelRequestBody createReturnLabelRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createReturnLabelRequestBody;

        // create path and map variables
        String localVarPath = "/v1/labels/{label_id}/return"
            .replace("{" + "label_id" + "}", localVarApiClient.escapeString(labelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createReturnLabelValidateBeforeCall(String labelId, CreateReturnLabelRequestBody createReturnLabelRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'labelId' is set
        if (labelId == null) {
            throw new ApiException("Missing the required parameter 'labelId' when calling createReturnLabel(Async)");
        }

        // verify the required parameter 'createReturnLabelRequestBody' is set
        if (createReturnLabelRequestBody == null) {
            throw new ApiException("Missing the required parameter 'createReturnLabelRequestBody' when calling createReturnLabel(Async)");
        }

        return createReturnLabelCall(labelId, createReturnLabelRequestBody, _callback);

    }


    private ApiResponse<Label> createReturnLabelWithHttpInfo(String labelId, CreateReturnLabelRequestBody createReturnLabelRequestBody) throws ApiException {
        okhttp3.Call localVarCall = createReturnLabelValidateBeforeCall(labelId, createReturnLabelRequestBody, null);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createReturnLabelAsync(String labelId, CreateReturnLabelRequestBody createReturnLabelRequestBody, final ApiCallback<Label> _callback) throws ApiException {

        okhttp3.Call localVarCall = createReturnLabelValidateBeforeCall(labelId, createReturnLabelRequestBody, _callback);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateReturnLabelRequestBuilder {
        private final String labelId;
        private LabelChargeEvent chargeEvent;
        private LabelLayout labelLayout;
        private LabelFormat labelFormat;
        private LabelDownloadType labelDownloadType;
        private DisplayScheme displayScheme;
        private String labelImageId;

        private CreateReturnLabelRequestBuilder(String labelId) {
            this.labelId = labelId;
        }

        /**
         * Set chargeEvent
         * @param chargeEvent The label charge event.  (optional)
         * @return CreateReturnLabelRequestBuilder
         */
        public CreateReturnLabelRequestBuilder chargeEvent(LabelChargeEvent chargeEvent) {
            this.chargeEvent = chargeEvent;
            return this;
        }
        
        /**
         * Set labelLayout
         * @param labelLayout The layout (size) that you want the label to be in.  The &#x60;label_format&#x60; determines which sizes are allowed.  &#x60;4x6&#x60; is supported for all label formats, whereas &#x60;letter&#x60; (8.5\\\&quot; x 11\\\&quot;) is only supported for &#x60;pdf&#x60; format.  (optional)
         * @return CreateReturnLabelRequestBuilder
         */
        public CreateReturnLabelRequestBuilder labelLayout(LabelLayout labelLayout) {
            this.labelLayout = labelLayout;
            return this;
        }
        
        /**
         * Set labelFormat
         * @param labelFormat The file format that you want the label to be in.  We recommend &#x60;pdf&#x60; format because it is supported by all carriers, whereas some carriers do not support the &#x60;png&#x60; or &#x60;zpl&#x60; formats.  (optional)
         * @return CreateReturnLabelRequestBuilder
         */
        public CreateReturnLabelRequestBuilder labelFormat(LabelFormat labelFormat) {
            this.labelFormat = labelFormat;
            return this;
        }
        
        /**
         * Set labelDownloadType
         * @param labelDownloadType  (optional)
         * @return CreateReturnLabelRequestBuilder
         */
        public CreateReturnLabelRequestBuilder labelDownloadType(LabelDownloadType labelDownloadType) {
            this.labelDownloadType = labelDownloadType;
            return this;
        }
        
        /**
         * Set displayScheme
         * @param displayScheme The display format that the label should be shown in. (optional)
         * @return CreateReturnLabelRequestBuilder
         */
        public CreateReturnLabelRequestBuilder displayScheme(DisplayScheme displayScheme) {
            this.displayScheme = displayScheme;
            return this;
        }
        
        /**
         * Set labelImageId
         * @param labelImageId Used to identify an image resource. (optional)
         * @return CreateReturnLabelRequestBuilder
         */
        public CreateReturnLabelRequestBuilder labelImageId(String labelImageId) {
            this.labelImageId = labelImageId;
            return this;
        }
        
        /**
         * Build call for createReturnLabel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateReturnLabelRequestBody createReturnLabelRequestBody = buildBodyParams();
            return createReturnLabelCall(labelId, createReturnLabelRequestBody, _callback);
        }

        private CreateReturnLabelRequestBody buildBodyParams() {
            CreateReturnLabelRequestBody createReturnLabelRequestBody = new CreateReturnLabelRequestBody();
            createReturnLabelRequestBody.chargeEvent(this.chargeEvent);
            createReturnLabelRequestBody.labelLayout(this.labelLayout);
            createReturnLabelRequestBody.labelFormat(this.labelFormat);
            createReturnLabelRequestBody.labelDownloadType(this.labelDownloadType);
            createReturnLabelRequestBody.displayScheme(this.displayScheme);
            createReturnLabelRequestBody.labelImageId(this.labelImageId);
            return createReturnLabelRequestBody;
        }

        /**
         * Execute createReturnLabel request
         * @return Label
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public Label execute() throws ApiException {
            CreateReturnLabelRequestBody createReturnLabelRequestBody = buildBodyParams();
            ApiResponse<Label> localVarResp = createReturnLabelWithHttpInfo(labelId, createReturnLabelRequestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createReturnLabel request with HTTP info returned
         * @return ApiResponse&lt;Label&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Label> executeWithHttpInfo() throws ApiException {
            CreateReturnLabelRequestBody createReturnLabelRequestBody = buildBodyParams();
            return createReturnLabelWithHttpInfo(labelId, createReturnLabelRequestBody);
        }

        /**
         * Execute createReturnLabel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Label> _callback) throws ApiException {
            CreateReturnLabelRequestBody createReturnLabelRequestBody = buildBodyParams();
            return createReturnLabelAsync(labelId, createReturnLabelRequestBody, _callback);
        }
    }

    /**
     * Create a return label
     * Create a return label
     * @param labelId Label ID (required)
     * @param createReturnLabelRequestBody  (required)
     * @return CreateReturnLabelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public CreateReturnLabelRequestBuilder createReturnLabel(String labelId) throws IllegalArgumentException {
        if (labelId == null) throw new IllegalArgumentException("\"labelId\" is required but got null");
            if (labelId != null && labelId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for labelId. Length must be greater than or equal to 1.");
            }

        return new CreateReturnLabelRequestBuilder(labelId);
    }
    private okhttp3.Call getByExternalShipmentIdCall(String externalShipmentId, LabelDownloadType labelDownloadType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/labels/external_shipment_id/{external_shipment_id}"
            .replace("{" + "external_shipment_id" + "}", localVarApiClient.escapeString(externalShipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (labelDownloadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label_download_type", labelDownloadType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByExternalShipmentIdValidateBeforeCall(String externalShipmentId, LabelDownloadType labelDownloadType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'externalShipmentId' is set
        if (externalShipmentId == null) {
            throw new ApiException("Missing the required parameter 'externalShipmentId' when calling getByExternalShipmentId(Async)");
        }

        return getByExternalShipmentIdCall(externalShipmentId, labelDownloadType, _callback);

    }


    private ApiResponse<Label> getByExternalShipmentIdWithHttpInfo(String externalShipmentId, LabelDownloadType labelDownloadType) throws ApiException {
        okhttp3.Call localVarCall = getByExternalShipmentIdValidateBeforeCall(externalShipmentId, labelDownloadType, null);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByExternalShipmentIdAsync(String externalShipmentId, LabelDownloadType labelDownloadType, final ApiCallback<Label> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByExternalShipmentIdValidateBeforeCall(externalShipmentId, labelDownloadType, _callback);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByExternalShipmentIdRequestBuilder {
        private final String externalShipmentId;
        private LabelDownloadType labelDownloadType;

        private GetByExternalShipmentIdRequestBuilder(String externalShipmentId) {
            this.externalShipmentId = externalShipmentId;
        }

        /**
         * Set labelDownloadType
         * @param labelDownloadType  (optional)
         * @return GetByExternalShipmentIdRequestBuilder
         */
        public GetByExternalShipmentIdRequestBuilder labelDownloadType(LabelDownloadType labelDownloadType) {
            this.labelDownloadType = labelDownloadType;
            return this;
        }
        
        /**
         * Build call for getByExternalShipmentId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByExternalShipmentIdCall(externalShipmentId, labelDownloadType, _callback);
        }


        /**
         * Execute getByExternalShipmentId request
         * @return Label
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
         </table>
         */
        public Label execute() throws ApiException {
            ApiResponse<Label> localVarResp = getByExternalShipmentIdWithHttpInfo(externalShipmentId, labelDownloadType);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByExternalShipmentId request with HTTP info returned
         * @return ApiResponse&lt;Label&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Label> executeWithHttpInfo() throws ApiException {
            return getByExternalShipmentIdWithHttpInfo(externalShipmentId, labelDownloadType);
        }

        /**
         * Execute getByExternalShipmentId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Label> _callback) throws ApiException {
            return getByExternalShipmentIdAsync(externalShipmentId, labelDownloadType, _callback);
        }
    }

    /**
     * Get Label By External Shipment ID
     * Find a label by using the external shipment id that was used during label creation 
     * @param externalShipmentId  (required)
     * @return GetByExternalShipmentIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
     </table>
     */
    public GetByExternalShipmentIdRequestBuilder getByExternalShipmentId(String externalShipmentId) throws IllegalArgumentException {
        if (externalShipmentId == null) throw new IllegalArgumentException("\"externalShipmentId\" is required but got null");
            

        return new GetByExternalShipmentIdRequestBuilder(externalShipmentId);
    }
    private okhttp3.Call getByIdCall(String labelId, LabelDownloadType labelDownloadType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/labels/{label_id}"
            .replace("{" + "label_id" + "}", localVarApiClient.escapeString(labelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (labelDownloadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label_download_type", labelDownloadType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String labelId, LabelDownloadType labelDownloadType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'labelId' is set
        if (labelId == null) {
            throw new ApiException("Missing the required parameter 'labelId' when calling getById(Async)");
        }

        return getByIdCall(labelId, labelDownloadType, _callback);

    }


    private ApiResponse<Label> getByIdWithHttpInfo(String labelId, LabelDownloadType labelDownloadType) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(labelId, labelDownloadType, null);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String labelId, LabelDownloadType labelDownloadType, final ApiCallback<Label> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(labelId, labelDownloadType, _callback);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String labelId;
        private LabelDownloadType labelDownloadType;

        private GetByIdRequestBuilder(String labelId) {
            this.labelId = labelId;
        }

        /**
         * Set labelDownloadType
         * @param labelDownloadType  (optional)
         * @return GetByIdRequestBuilder
         */
        public GetByIdRequestBuilder labelDownloadType(LabelDownloadType labelDownloadType) {
            this.labelDownloadType = labelDownloadType;
            return this;
        }
        
        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(labelId, labelDownloadType, _callback);
        }


        /**
         * Execute getById request
         * @return Label
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public Label execute() throws ApiException {
            ApiResponse<Label> localVarResp = getByIdWithHttpInfo(labelId, labelDownloadType);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Label&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Label> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(labelId, labelDownloadType);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Label> _callback) throws ApiException {
            return getByIdAsync(labelId, labelDownloadType, _callback);
        }
    }

    /**
     * Get Label By ID
     * Retrieve information for individual labels.
     * @param labelId Label ID (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String labelId) throws IllegalArgumentException {
        if (labelId == null) throw new IllegalArgumentException("\"labelId\" is required but got null");
            if (labelId != null && labelId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for labelId. Length must be greater than or equal to 1.");
            }

        return new GetByIdRequestBuilder(labelId);
    }
    private okhttp3.Call getTrackingInfoCall(String labelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/labels/{label_id}/track"
            .replace("{" + "label_id" + "}", localVarApiClient.escapeString(labelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTrackingInfoValidateBeforeCall(String labelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'labelId' is set
        if (labelId == null) {
            throw new ApiException("Missing the required parameter 'labelId' when calling getTrackingInfo(Async)");
        }

        return getTrackingInfoCall(labelId, _callback);

    }


    private ApiResponse<TrackingInformation> getTrackingInfoWithHttpInfo(String labelId) throws ApiException {
        okhttp3.Call localVarCall = getTrackingInfoValidateBeforeCall(labelId, null);
        Type localVarReturnType = new TypeToken<TrackingInformation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTrackingInfoAsync(String labelId, final ApiCallback<TrackingInformation> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTrackingInfoValidateBeforeCall(labelId, _callback);
        Type localVarReturnType = new TypeToken<TrackingInformation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTrackingInfoRequestBuilder {
        private final String labelId;

        private GetTrackingInfoRequestBuilder(String labelId) {
            this.labelId = labelId;
        }

        /**
         * Build call for getTrackingInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTrackingInfoCall(labelId, _callback);
        }


        /**
         * Execute getTrackingInfo request
         * @return TrackingInformation
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public TrackingInformation execute() throws ApiException {
            ApiResponse<TrackingInformation> localVarResp = getTrackingInfoWithHttpInfo(labelId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTrackingInfo request with HTTP info returned
         * @return ApiResponse&lt;TrackingInformation&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TrackingInformation> executeWithHttpInfo() throws ApiException {
            return getTrackingInfoWithHttpInfo(labelId);
        }

        /**
         * Execute getTrackingInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TrackingInformation> _callback) throws ApiException {
            return getTrackingInfoAsync(labelId, _callback);
        }
    }

    /**
     * Get Label Tracking Information
     * Retrieve the label&#39;s tracking information
     * @param labelId Label ID (required)
     * @return GetTrackingInfoRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public GetTrackingInfoRequestBuilder getTrackingInfo(String labelId) throws IllegalArgumentException {
        if (labelId == null) throw new IllegalArgumentException("\"labelId\" is required but got null");
            if (labelId != null && labelId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for labelId. Length must be greater than or equal to 1.");
            }

        return new GetTrackingInfoRequestBuilder(labelId);
    }
    private okhttp3.Call labelCall(Label label, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = label;

        // create path and map variables
        String localVarPath = "/v1/labels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call labelValidateBeforeCall(Label label, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'label' is set
        if (label == null) {
            throw new ApiException("Missing the required parameter 'label' when calling label(Async)");
        }

        return labelCall(label, _callback);

    }


    private ApiResponse<Label> labelWithHttpInfo(Label label) throws ApiException {
        okhttp3.Call localVarCall = labelValidateBeforeCall(label, null);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call labelAsync(Label label, final ApiCallback<Label> _callback) throws ApiException {

        okhttp3.Call localVarCall = labelValidateBeforeCall(label, _callback);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class LabelRequestBuilder {
        private String labelId;
        private LabelStatus status;
        private String shipmentId;
        private PartialShipment shipment;
        private OffsetDateTime shipDate;
        private OffsetDateTime createdAt;
        private MonetaryValue shipmentCost;
        private MonetaryValue insuranceCost;
        private MonetaryValue requestedComparisonAmount;
        private String trackingNumber;
        private Boolean isReturnLabel;
        private String rmaNumber;
        private Boolean isInternational;
        private String batchId;
        private String carrierId;
        private LabelChargeEvent chargeEvent;
        private String outboundLabelId;
        private String serviceCode;
        private Boolean testLabel;
        private String packageCode;
        private ValidateAddress validateAddress;
        private Boolean voided;
        private OffsetDateTime voidedAt;
        private LabelDownloadType labelDownloadType;
        private LabelFormat labelFormat;
        private DisplayScheme displayScheme;
        private LabelLayout labelLayout;
        private Boolean trackable;
        private String labelImageId;
        private String carrierCode;
        private TrackingStatus trackingStatus;
        private LabelDownload labelDownload;
        private OptionalLinkNullable formDownload;
        private LabelInsuranceClaim insuranceClaim;
        private List<LabelPackagesInner> packages;
        private List<AlternativeIdentifier> alternativeIdentifiers;

        private LabelRequestBuilder() {
        }

        /**
         * Set labelId
         * @param labelId A string that uniquely identifies a ShipEngine resource, such as a carrier, label, shipment, etc. (optional)
         * @return LabelRequestBuilder
         */
        public LabelRequestBuilder labelId(String labelId) {
            this.labelId = labelId;
            return this;
        }
        
        /**
         * Set status
         * @param status  (optional)
         * @return LabelRequestBuilder
         */
        public LabelRequestBuilder status(LabelStatus status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set shipmentId
         * @param shipmentId A string that uniquely identifies a ShipEngine resource, such as a carrier, label, shipment, etc. (optional)
         * @return LabelRequestBuilder
         */
        public LabelRequestBuilder shipmentId(String shipmentId) {
            this.shipmentId = shipmentId;
            return this;
        }
        
        /**
         * Set shipment
         * @param shipment The shipment information used to generate the label (optional)
         * @return LabelRequestBuilder
         */
        public LabelRequestBuilder shipment(PartialShipment shipment) {
            this.shipment = shipment;
            return this;
        }
        
        /**
         * Set shipDate
         * @param shipDate An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date, but not a specific time.  The value _may_ contain a time component, but it will be set to &#x60;00:00:00&#x60; UTC by ShipEngine.  (optional)
         * @return LabelRequestBuilder
         */
        public LabelRequestBuilder shipDate(OffsetDateTime shipDate) {
            this.shipDate = shipDate;
            return this;
        }
        
        /**
         * Set createdAt
         * @param createdAt An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date and time.  (optional)
         * @return LabelRequestBuilder
         */
        public LabelRequestBuilder createdAt(OffsetDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }
        
        /**
         * Set shipmentCost
         * @param shipmentCost The cost of shipping, delivery confirmation, and other carrier charges.  This amount **does not** include insurance costs.  (optional)
         * @return LabelRequestBuilder
         */
        public LabelRequestBuilder shipmentCost(MonetaryValue shipmentCost) {
            this.shipmentCost = shipmentCost;
            return this;
        }
        
        /**
         * Set insuranceCost
         * @param insuranceCost The insurance cost for this package.  Add this to the &#x60;shipment_cost&#x60; field to get the total cost.  (optional)
         * @return LabelRequestBuilder
         */
        public LabelRequestBuilder insuranceCost(MonetaryValue insuranceCost) {
            this.insuranceCost = insuranceCost;
            return this;
        }
        
        /**
         * Set requestedComparisonAmount
         * @param requestedComparisonAmount The total shipping cost for the specified comparison_rate_type.  (optional)
         * @return LabelRequestBuilder
         */
        public LabelRequestBuilder requestedComparisonAmount(MonetaryValue requestedComparisonAmount) {
            this.requestedComparisonAmount = requestedComparisonAmount;
            return this;
        }
        
        /**
         * Set trackingNumber
         * @param trackingNumber The tracking number for the package. Tracking number formats vary across carriers. (optional)
         * @return LabelRequestBuilder
         */
        public LabelRequestBuilder trackingNumber(String trackingNumber) {
            this.trackingNumber = trackingNumber;
            return this;
        }
        
        /**
         * Set isReturnLabel
         * @param isReturnLabel Indicates whether this is a return label.  You may also want to set the &#x60;rma_number&#x60; so you know what is being returned.  (optional)
         * @return LabelRequestBuilder
         */
        public LabelRequestBuilder isReturnLabel(Boolean isReturnLabel) {
            this.isReturnLabel = isReturnLabel;
            return this;
        }
        
        /**
         * Set rmaNumber
         * @param rmaNumber An optional Return Merchandise Authorization number.  This field is useful for return labels.  You can set it to any string value.  (optional)
         * @return LabelRequestBuilder
         */
        public LabelRequestBuilder rmaNumber(String rmaNumber) {
            this.rmaNumber = rmaNumber;
            return this;
        }
        
        /**
         * Set isInternational
         * @param isInternational Indicates whether this is an international shipment.  That is, the originating country and destination country are different.  (optional)
         * @return LabelRequestBuilder
         */
        public LabelRequestBuilder isInternational(Boolean isInternational) {
            this.isInternational = isInternational;
            return this;
        }
        
        /**
         * Set batchId
         * @param batchId A string that uniquely identifies a ShipEngine resource, such as a carrier, label, shipment, etc. (optional)
         * @return LabelRequestBuilder
         */
        public LabelRequestBuilder batchId(String batchId) {
            this.batchId = batchId;
            return this;
        }
        
        /**
         * Set carrierId
         * @param carrierId A string that uniquely identifies a ShipEngine resource, such as a carrier, label, shipment, etc. (optional)
         * @return LabelRequestBuilder
         */
        public LabelRequestBuilder carrierId(String carrierId) {
            this.carrierId = carrierId;
            return this;
        }
        
        /**
         * Set chargeEvent
         * @param chargeEvent The label charge event.  (optional)
         * @return LabelRequestBuilder
         */
        public LabelRequestBuilder chargeEvent(LabelChargeEvent chargeEvent) {
            this.chargeEvent = chargeEvent;
            return this;
        }
        
        /**
         * Set outboundLabelId
         * @param outboundLabelId A string that uniquely identifies a ShipEngine resource, such as a carrier, label, shipment, etc. (optional)
         * @return LabelRequestBuilder
         */
        public LabelRequestBuilder outboundLabelId(String outboundLabelId) {
            this.outboundLabelId = outboundLabelId;
            return this;
        }
        
        /**
         * Set serviceCode
         * @param serviceCode A [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/), such as &#x60;fedex_ground&#x60;, &#x60;usps_first_class_mail&#x60;, &#x60;flat_rate_envelope&#x60;, etc.  (optional)
         * @return LabelRequestBuilder
         */
        public LabelRequestBuilder serviceCode(String serviceCode) {
            this.serviceCode = serviceCode;
            return this;
        }
        
        /**
         * Set testLabel
         * @param testLabel Indicate if this label is being used only for testing purposes. If true, then no charge will be added to your account. (optional, default to false)
         * @return LabelRequestBuilder
         */
        public LabelRequestBuilder testLabel(Boolean testLabel) {
            this.testLabel = testLabel;
            return this;
        }
        
        /**
         * Set packageCode
         * @param packageCode A [package type](https://www.shipengine.com/docs/reference/list-carrier-packages/), such as &#x60;thick_envelope&#x60;, &#x60;small_flat_rate_box&#x60;, &#x60;large_package&#x60;, etc.  Use the code &#x60;package&#x60; for custom or unknown package types.  (optional)
         * @return LabelRequestBuilder
         */
        public LabelRequestBuilder packageCode(String packageCode) {
            this.packageCode = packageCode;
            return this;
        }
        
        /**
         * Set validateAddress
         * @param validateAddress  (optional)
         * @return LabelRequestBuilder
         */
        public LabelRequestBuilder validateAddress(ValidateAddress validateAddress) {
            this.validateAddress = validateAddress;
            return this;
        }
        
        /**
         * Set voided
         * @param voided Indicates whether the label has been [voided](https://www.shipengine.com/docs/labels/voiding/)  (optional)
         * @return LabelRequestBuilder
         */
        public LabelRequestBuilder voided(Boolean voided) {
            this.voided = voided;
            return this;
        }
        
        /**
         * Set voidedAt
         * @param voidedAt The date and time that the label was [voided](https://www.shipengine.com/docs/labels/voiding/), or &#x60;null&#x60; if the label has not been voided  (optional)
         * @return LabelRequestBuilder
         */
        public LabelRequestBuilder voidedAt(OffsetDateTime voidedAt) {
            this.voidedAt = voidedAt;
            return this;
        }
        
        /**
         * Set labelDownloadType
         * @param labelDownloadType  (optional)
         * @return LabelRequestBuilder
         */
        public LabelRequestBuilder labelDownloadType(LabelDownloadType labelDownloadType) {
            this.labelDownloadType = labelDownloadType;
            return this;
        }
        
        /**
         * Set labelFormat
         * @param labelFormat The file format that you want the label to be in.  We recommend &#x60;pdf&#x60; format because it is supported by all carriers, whereas some carriers do not support the &#x60;png&#x60; or &#x60;zpl&#x60; formats.  (optional)
         * @return LabelRequestBuilder
         */
        public LabelRequestBuilder labelFormat(LabelFormat labelFormat) {
            this.labelFormat = labelFormat;
            return this;
        }
        
        /**
         * Set displayScheme
         * @param displayScheme The display format that the label should be shown in. (optional)
         * @return LabelRequestBuilder
         */
        public LabelRequestBuilder displayScheme(DisplayScheme displayScheme) {
            this.displayScheme = displayScheme;
            return this;
        }
        
        /**
         * Set labelLayout
         * @param labelLayout The layout (size) that you want the label to be in.  The &#x60;label_format&#x60; determines which sizes are allowed.  &#x60;4x6&#x60; is supported for all label formats, whereas &#x60;letter&#x60; (8.5\\\&quot; x 11\\\&quot;) is only supported for &#x60;pdf&#x60; format.  (optional)
         * @return LabelRequestBuilder
         */
        public LabelRequestBuilder labelLayout(LabelLayout labelLayout) {
            this.labelLayout = labelLayout;
            return this;
        }
        
        /**
         * Set trackable
         * @param trackable Indicates whether the shipment is trackable, in which case the &#x60;tracking_status&#x60; field will reflect the current status and each package will have a &#x60;tracking_number&#x60;.  (optional)
         * @return LabelRequestBuilder
         */
        public LabelRequestBuilder trackable(Boolean trackable) {
            this.trackable = trackable;
            return this;
        }
        
        /**
         * Set labelImageId
         * @param labelImageId Used to identify an image resource. (optional)
         * @return LabelRequestBuilder
         */
        public LabelRequestBuilder labelImageId(String labelImageId) {
            this.labelImageId = labelImageId;
            return this;
        }
        
        /**
         * Set carrierCode
         * @param carrierCode A [shipping carrier](https://www.shipengine.com/docs/carriers/setup/), such as &#x60;fedex&#x60;, &#x60;dhl_express&#x60;, &#x60;stamps_com&#x60;, etc.  (optional)
         * @return LabelRequestBuilder
         */
        public LabelRequestBuilder carrierCode(String carrierCode) {
            this.carrierCode = carrierCode;
            return this;
        }
        
        /**
         * Set trackingStatus
         * @param trackingStatus The current status of the package, such as &#x60;in_transit&#x60; or &#x60;delivered&#x60; (optional)
         * @return LabelRequestBuilder
         */
        public LabelRequestBuilder trackingStatus(TrackingStatus trackingStatus) {
            this.trackingStatus = trackingStatus;
            return this;
        }
        
        /**
         * Set labelDownload
         * @param labelDownload  (optional)
         * @return LabelRequestBuilder
         */
        public LabelRequestBuilder labelDownload(LabelDownload labelDownload) {
            this.labelDownload = labelDownload;
            return this;
        }
        
        /**
         * Set formDownload
         * @param formDownload The link to download the customs form (a.k.a. commercial invoice) for this shipment, if any.  Forms are in PDF format. This field is null if the shipment does not require a customs form, or if the carrier does not support it.  (optional)
         * @return LabelRequestBuilder
         */
        public LabelRequestBuilder formDownload(OptionalLinkNullable formDownload) {
            this.formDownload = formDownload;
            return this;
        }
        
        /**
         * Set insuranceClaim
         * @param insuranceClaim The link to submit an insurance claim for the shipment.  This field is null if the shipment is not insured or if the insurance provider does not support online claim submission.  (optional)
         * @return LabelRequestBuilder
         */
        public LabelRequestBuilder insuranceClaim(LabelInsuranceClaim insuranceClaim) {
            this.insuranceClaim = insuranceClaim;
            return this;
        }
        
        /**
         * Set packages
         * @param packages The label&#39;s package(s).  &gt; **Note:** Some carriers only allow one package per label.  If you attempt to create a multi-package label for a carrier that doesn&#39;t allow it, an error will be returned.  (optional)
         * @return LabelRequestBuilder
         */
        public LabelRequestBuilder packages(List<LabelPackagesInner> packages) {
            this.packages = packages;
            return this;
        }
        
        /**
         * Set alternativeIdentifiers
         * @param alternativeIdentifiers Additional information some carriers may provide by which to identify a given label in their system.   (optional)
         * @return LabelRequestBuilder
         */
        public LabelRequestBuilder alternativeIdentifiers(List<AlternativeIdentifier> alternativeIdentifiers) {
            this.alternativeIdentifiers = alternativeIdentifiers;
            return this;
        }
        
        /**
         * Build call for label
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Label label = buildBodyParams();
            return labelCall(label, _callback);
        }

        private Label buildBodyParams() {
            Label label = new Label();
            label.labelId(this.labelId);
            label.status(this.status);
            label.shipmentId(this.shipmentId);
            label.shipment(this.shipment);
            label.shipDate(this.shipDate);
            label.createdAt(this.createdAt);
            label.shipmentCost(this.shipmentCost);
            label.insuranceCost(this.insuranceCost);
            label.requestedComparisonAmount(this.requestedComparisonAmount);
            label.trackingNumber(this.trackingNumber);
            label.isReturnLabel(this.isReturnLabel);
            label.rmaNumber(this.rmaNumber);
            label.isInternational(this.isInternational);
            label.batchId(this.batchId);
            label.carrierId(this.carrierId);
            label.chargeEvent(this.chargeEvent);
            label.outboundLabelId(this.outboundLabelId);
            label.serviceCode(this.serviceCode);
            label.testLabel(this.testLabel);
            label.packageCode(this.packageCode);
            label.validateAddress(this.validateAddress);
            label.voided(this.voided);
            label.voidedAt(this.voidedAt);
            label.labelDownloadType(this.labelDownloadType);
            label.labelFormat(this.labelFormat);
            label.displayScheme(this.displayScheme);
            label.labelLayout(this.labelLayout);
            label.trackable(this.trackable);
            label.labelImageId(this.labelImageId);
            label.carrierCode(this.carrierCode);
            label.trackingStatus(this.trackingStatus);
            label.labelDownload(this.labelDownload);
            label.formDownload(this.formDownload);
            label.insuranceClaim(this.insuranceClaim);
            label.packages(this.packages);
            label.alternativeIdentifiers(this.alternativeIdentifiers);
            return label;
        }

        /**
         * Execute label request
         * @return Label
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
         </table>
         */
        public Label execute() throws ApiException {
            Label label = buildBodyParams();
            ApiResponse<Label> localVarResp = labelWithHttpInfo(label);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute label request with HTTP info returned
         * @return ApiResponse&lt;Label&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Label> executeWithHttpInfo() throws ApiException {
            Label label = buildBodyParams();
            return labelWithHttpInfo(label);
        }

        /**
         * Execute label request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Label> _callback) throws ApiException {
            Label label = buildBodyParams();
            return labelAsync(label, _callback);
        }
    }

    /**
     * Purchase Label
     * Purchase and print a label for shipment
     * @param label  (required)
     * @return LabelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
     </table>
     */
    public LabelRequestBuilder label() throws IllegalArgumentException {
        return new LabelRequestBuilder();
    }
    private okhttp3.Call label_0Call(String labelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/labels/{label_id}/void"
            .replace("{" + "label_id" + "}", localVarApiClient.escapeString(labelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call label_0ValidateBeforeCall(String labelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'labelId' is set
        if (labelId == null) {
            throw new ApiException("Missing the required parameter 'labelId' when calling label_0(Async)");
        }

        return label_0Call(labelId, _callback);

    }


    private ApiResponse<VoidLabelResponseBody> label_0WithHttpInfo(String labelId) throws ApiException {
        okhttp3.Call localVarCall = label_0ValidateBeforeCall(labelId, null);
        Type localVarReturnType = new TypeToken<VoidLabelResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call label_0Async(String labelId, final ApiCallback<VoidLabelResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = label_0ValidateBeforeCall(labelId, _callback);
        Type localVarReturnType = new TypeToken<VoidLabelResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Label0RequestBuilder {
        private final String labelId;

        private Label0RequestBuilder(String labelId) {
            this.labelId = labelId;
        }

        /**
         * Build call for label_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return label_0Call(labelId, _callback);
        }


        /**
         * Execute label_0 request
         * @return VoidLabelResponseBody
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public VoidLabelResponseBody execute() throws ApiException {
            ApiResponse<VoidLabelResponseBody> localVarResp = label_0WithHttpInfo(labelId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute label_0 request with HTTP info returned
         * @return ApiResponse&lt;VoidLabelResponseBody&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VoidLabelResponseBody> executeWithHttpInfo() throws ApiException {
            return label_0WithHttpInfo(labelId);
        }

        /**
         * Execute label_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VoidLabelResponseBody> _callback) throws ApiException {
            return label_0Async(labelId, _callback);
        }
    }

    /**
     * Void a Label By ID
     * Void a label by ID to get a refund.
     * @param labelId Label ID (required)
     * @return Label0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public Label0RequestBuilder label_0(String labelId) throws IllegalArgumentException {
        if (labelId == null) throw new IllegalArgumentException("\"labelId\" is required but got null");
            if (labelId != null && labelId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for labelId. Length must be greater than or equal to 1.");
            }

        return new Label0RequestBuilder(labelId);
    }
    private okhttp3.Call labelsCall(LabelStatus labelStatus, String serviceCode, String carrierId, String trackingNumber, String batchId, String rateId, String shipmentId, String warehouseId, OffsetDateTime createdAtStart, OffsetDateTime createdAtEnd, Integer page, Integer pageSize, SortDir sortDir, String sortBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/labels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (labelStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("label_status", labelStatus));
        }

        if (serviceCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("service_code", serviceCode));
        }

        if (carrierId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("carrier_id", carrierId));
        }

        if (trackingNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tracking_number", trackingNumber));
        }

        if (batchId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("batch_id", batchId));
        }

        if (rateId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rate_id", rateId));
        }

        if (shipmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shipment_id", shipmentId));
        }

        if (warehouseId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("warehouse_id", warehouseId));
        }

        if (createdAtStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at_start", createdAtStart));
        }

        if (createdAtEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at_end", createdAtEnd));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (sortDir != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_dir", sortDir));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call labelsValidateBeforeCall(LabelStatus labelStatus, String serviceCode, String carrierId, String trackingNumber, String batchId, String rateId, String shipmentId, String warehouseId, OffsetDateTime createdAtStart, OffsetDateTime createdAtEnd, Integer page, Integer pageSize, SortDir sortDir, String sortBy, final ApiCallback _callback) throws ApiException {
        return labelsCall(labelStatus, serviceCode, carrierId, trackingNumber, batchId, rateId, shipmentId, warehouseId, createdAtStart, createdAtEnd, page, pageSize, sortDir, sortBy, _callback);

    }


    private ApiResponse<PagedListResponseBody> labelsWithHttpInfo(LabelStatus labelStatus, String serviceCode, String carrierId, String trackingNumber, String batchId, String rateId, String shipmentId, String warehouseId, OffsetDateTime createdAtStart, OffsetDateTime createdAtEnd, Integer page, Integer pageSize, SortDir sortDir, String sortBy) throws ApiException {
        okhttp3.Call localVarCall = labelsValidateBeforeCall(labelStatus, serviceCode, carrierId, trackingNumber, batchId, rateId, shipmentId, warehouseId, createdAtStart, createdAtEnd, page, pageSize, sortDir, sortBy, null);
        Type localVarReturnType = new TypeToken<PagedListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call labelsAsync(LabelStatus labelStatus, String serviceCode, String carrierId, String trackingNumber, String batchId, String rateId, String shipmentId, String warehouseId, OffsetDateTime createdAtStart, OffsetDateTime createdAtEnd, Integer page, Integer pageSize, SortDir sortDir, String sortBy, final ApiCallback<PagedListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = labelsValidateBeforeCall(labelStatus, serviceCode, carrierId, trackingNumber, batchId, rateId, shipmentId, warehouseId, createdAtStart, createdAtEnd, page, pageSize, sortDir, sortBy, _callback);
        Type localVarReturnType = new TypeToken<PagedListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class LabelsRequestBuilder {
        private LabelStatus labelStatus;
        private String serviceCode;
        private String carrierId;
        private String trackingNumber;
        private String batchId;
        private String rateId;
        private String shipmentId;
        private String warehouseId;
        private OffsetDateTime createdAtStart;
        private OffsetDateTime createdAtEnd;
        private Integer page;
        private Integer pageSize;
        private SortDir sortDir;
        private String sortBy;

        private LabelsRequestBuilder() {
        }

        /**
         * Set labelStatus
         * @param labelStatus Only return labels that are currently in the specified status (optional)
         * @return LabelsRequestBuilder
         */
        public LabelsRequestBuilder labelStatus(LabelStatus labelStatus) {
            this.labelStatus = labelStatus;
            return this;
        }
        
        /**
         * Set serviceCode
         * @param serviceCode Only return labels for a specific [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/) (optional)
         * @return LabelsRequestBuilder
         */
        public LabelsRequestBuilder serviceCode(String serviceCode) {
            this.serviceCode = serviceCode;
            return this;
        }
        
        /**
         * Set carrierId
         * @param carrierId Only return labels for a specific [carrier account](https://www.shipengine.com/docs/carriers/setup/) (optional)
         * @return LabelsRequestBuilder
         */
        public LabelsRequestBuilder carrierId(String carrierId) {
            this.carrierId = carrierId;
            return this;
        }
        
        /**
         * Set trackingNumber
         * @param trackingNumber Only return labels with a specific tracking number (optional)
         * @return LabelsRequestBuilder
         */
        public LabelsRequestBuilder trackingNumber(String trackingNumber) {
            this.trackingNumber = trackingNumber;
            return this;
        }
        
        /**
         * Set batchId
         * @param batchId Only return labels that were created in a specific [batch](https://www.shipengine.com/docs/labels/bulk/) (optional)
         * @return LabelsRequestBuilder
         */
        public LabelsRequestBuilder batchId(String batchId) {
            this.batchId = batchId;
            return this;
        }
        
        /**
         * Set rateId
         * @param rateId Rate ID (optional)
         * @return LabelsRequestBuilder
         */
        public LabelsRequestBuilder rateId(String rateId) {
            this.rateId = rateId;
            return this;
        }
        
        /**
         * Set shipmentId
         * @param shipmentId Shipment ID (optional)
         * @return LabelsRequestBuilder
         */
        public LabelsRequestBuilder shipmentId(String shipmentId) {
            this.shipmentId = shipmentId;
            return this;
        }
        
        /**
         * Set warehouseId
         * @param warehouseId Only return labels that originate from a specific [warehouse](https://www.shipengine.com/docs/shipping/ship-from-a-warehouse/) (optional)
         * @return LabelsRequestBuilder
         */
        public LabelsRequestBuilder warehouseId(String warehouseId) {
            this.warehouseId = warehouseId;
            return this;
        }
        
        /**
         * Set createdAtStart
         * @param createdAtStart Only return labels that were created on or after a specific date/time (optional)
         * @return LabelsRequestBuilder
         */
        public LabelsRequestBuilder createdAtStart(OffsetDateTime createdAtStart) {
            this.createdAtStart = createdAtStart;
            return this;
        }
        
        /**
         * Set createdAtEnd
         * @param createdAtEnd Only return labels that were created on or before a specific date/time (optional)
         * @return LabelsRequestBuilder
         */
        public LabelsRequestBuilder createdAtEnd(OffsetDateTime createdAtEnd) {
            this.createdAtEnd = createdAtEnd;
            return this;
        }
        
        /**
         * Set page
         * @param page Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)
         * @return LabelsRequestBuilder
         */
        public LabelsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize The number of results to return per response. (optional, default to 25)
         * @return LabelsRequestBuilder
         */
        public LabelsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set sortDir
         * @param sortDir Controls the sort order of the query. (optional)
         * @return LabelsRequestBuilder
         */
        public LabelsRequestBuilder sortDir(SortDir sortDir) {
            this.sortDir = sortDir;
            return this;
        }
        
        /**
         * Set sortBy
         * @param sortBy Controls which field the query is sorted by. (optional, default to created_at)
         * @return LabelsRequestBuilder
         */
        public LabelsRequestBuilder sortBy(String sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Build call for labels
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response includes a &#x60;labels&#x60; array containing a page of results (as determined by the &#x60;page_size&#x60; query parameter).  It also includes other useful information, such as the total number of labels that match the query criteria, the number of pages of results, and the URLs of the first, last, next, and previous pages of results.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return labelsCall(labelStatus, serviceCode, carrierId, trackingNumber, batchId, rateId, shipmentId, warehouseId, createdAtStart, createdAtEnd, page, pageSize, sortDir, sortBy, _callback);
        }


        /**
         * Execute labels request
         * @return PagedListResponseBody
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response includes a &#x60;labels&#x60; array containing a page of results (as determined by the &#x60;page_size&#x60; query parameter).  It also includes other useful information, such as the total number of labels that match the query criteria, the number of pages of results, and the URLs of the first, last, next, and previous pages of results.  </td><td>  -  </td></tr>
         </table>
         */
        public PagedListResponseBody execute() throws ApiException {
            ApiResponse<PagedListResponseBody> localVarResp = labelsWithHttpInfo(labelStatus, serviceCode, carrierId, trackingNumber, batchId, rateId, shipmentId, warehouseId, createdAtStart, createdAtEnd, page, pageSize, sortDir, sortBy);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute labels request with HTTP info returned
         * @return ApiResponse&lt;PagedListResponseBody&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response includes a &#x60;labels&#x60; array containing a page of results (as determined by the &#x60;page_size&#x60; query parameter).  It also includes other useful information, such as the total number of labels that match the query criteria, the number of pages of results, and the URLs of the first, last, next, and previous pages of results.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedListResponseBody> executeWithHttpInfo() throws ApiException {
            return labelsWithHttpInfo(labelStatus, serviceCode, carrierId, trackingNumber, batchId, rateId, shipmentId, warehouseId, createdAtStart, createdAtEnd, page, pageSize, sortDir, sortBy);
        }

        /**
         * Execute labels request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The response includes a &#x60;labels&#x60; array containing a page of results (as determined by the &#x60;page_size&#x60; query parameter).  It also includes other useful information, such as the total number of labels that match the query criteria, the number of pages of results, and the URLs of the first, last, next, and previous pages of results.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedListResponseBody> _callback) throws ApiException {
            return labelsAsync(labelStatus, serviceCode, carrierId, trackingNumber, batchId, rateId, shipmentId, warehouseId, createdAtStart, createdAtEnd, page, pageSize, sortDir, sortBy, _callback);
        }
    }

    /**
     * List labels
     * This endpoint returns a list of labels that you&#39;ve [created](https://www.shipengine.com/docs/labels/create-a-label/). You can optionally filter the results as well as control their sort order and the number of results returned at a time.  By default, all labels are returned, 25 at a time, starting with the most recently created ones.  You can combine multiple filter options to narrow-down the results.  For example, if you only want to get your UPS labels for your east coast warehouse you could query by both &#x60;warehouse_id&#x60; and &#x60;carrier_id&#x60; 
     * @return LabelsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response includes a &#x60;labels&#x60; array containing a page of results (as determined by the &#x60;page_size&#x60; query parameter).  It also includes other useful information, such as the total number of labels that match the query criteria, the number of pages of results, and the URLs of the first, last, next, and previous pages of results.  </td><td>  -  </td></tr>
     </table>
     */
    public LabelsRequestBuilder labels() throws IllegalArgumentException {
        return new LabelsRequestBuilder();
    }
    private okhttp3.Call purchaseLabelWithRateIdCall(String rateId, PurchaseLabelWithoutShipment purchaseLabelWithoutShipment, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = purchaseLabelWithoutShipment;

        // create path and map variables
        String localVarPath = "/v1/labels/rates/{rate_id}"
            .replace("{" + "rate_id" + "}", localVarApiClient.escapeString(rateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call purchaseLabelWithRateIdValidateBeforeCall(String rateId, PurchaseLabelWithoutShipment purchaseLabelWithoutShipment, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rateId' is set
        if (rateId == null) {
            throw new ApiException("Missing the required parameter 'rateId' when calling purchaseLabelWithRateId(Async)");
        }

        // verify the required parameter 'purchaseLabelWithoutShipment' is set
        if (purchaseLabelWithoutShipment == null) {
            throw new ApiException("Missing the required parameter 'purchaseLabelWithoutShipment' when calling purchaseLabelWithRateId(Async)");
        }

        return purchaseLabelWithRateIdCall(rateId, purchaseLabelWithoutShipment, _callback);

    }


    private ApiResponse<Label> purchaseLabelWithRateIdWithHttpInfo(String rateId, PurchaseLabelWithoutShipment purchaseLabelWithoutShipment) throws ApiException {
        okhttp3.Call localVarCall = purchaseLabelWithRateIdValidateBeforeCall(rateId, purchaseLabelWithoutShipment, null);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call purchaseLabelWithRateIdAsync(String rateId, PurchaseLabelWithoutShipment purchaseLabelWithoutShipment, final ApiCallback<Label> _callback) throws ApiException {

        okhttp3.Call localVarCall = purchaseLabelWithRateIdValidateBeforeCall(rateId, purchaseLabelWithoutShipment, _callback);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PurchaseLabelWithRateIdRequestBuilder {
        private final String rateId;
        private ValidateAddress validateAddress;
        private LabelLayout labelLayout;
        private LabelFormat labelFormat;
        private LabelDownloadType labelDownloadType;
        private DisplayScheme displayScheme;

        private PurchaseLabelWithRateIdRequestBuilder(String rateId) {
            this.rateId = rateId;
        }

        /**
         * Set validateAddress
         * @param validateAddress  (optional)
         * @return PurchaseLabelWithRateIdRequestBuilder
         */
        public PurchaseLabelWithRateIdRequestBuilder validateAddress(ValidateAddress validateAddress) {
            this.validateAddress = validateAddress;
            return this;
        }
        
        /**
         * Set labelLayout
         * @param labelLayout  (optional)
         * @return PurchaseLabelWithRateIdRequestBuilder
         */
        public PurchaseLabelWithRateIdRequestBuilder labelLayout(LabelLayout labelLayout) {
            this.labelLayout = labelLayout;
            return this;
        }
        
        /**
         * Set labelFormat
         * @param labelFormat  (optional)
         * @return PurchaseLabelWithRateIdRequestBuilder
         */
        public PurchaseLabelWithRateIdRequestBuilder labelFormat(LabelFormat labelFormat) {
            this.labelFormat = labelFormat;
            return this;
        }
        
        /**
         * Set labelDownloadType
         * @param labelDownloadType  (optional)
         * @return PurchaseLabelWithRateIdRequestBuilder
         */
        public PurchaseLabelWithRateIdRequestBuilder labelDownloadType(LabelDownloadType labelDownloadType) {
            this.labelDownloadType = labelDownloadType;
            return this;
        }
        
        /**
         * Set displayScheme
         * @param displayScheme The display format that the label should be shown in. (optional)
         * @return PurchaseLabelWithRateIdRequestBuilder
         */
        public PurchaseLabelWithRateIdRequestBuilder displayScheme(DisplayScheme displayScheme) {
            this.displayScheme = displayScheme;
            return this;
        }
        
        /**
         * Build call for purchaseLabelWithRateId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PurchaseLabelWithoutShipment purchaseLabelWithoutShipment = buildBodyParams();
            return purchaseLabelWithRateIdCall(rateId, purchaseLabelWithoutShipment, _callback);
        }

        private PurchaseLabelWithoutShipment buildBodyParams() {
            PurchaseLabelWithoutShipment purchaseLabelWithoutShipment = new PurchaseLabelWithoutShipment();
            purchaseLabelWithoutShipment.validateAddress(this.validateAddress);
            purchaseLabelWithoutShipment.labelLayout(this.labelLayout);
            purchaseLabelWithoutShipment.labelFormat(this.labelFormat);
            purchaseLabelWithoutShipment.labelDownloadType(this.labelDownloadType);
            purchaseLabelWithoutShipment.displayScheme(this.displayScheme);
            return purchaseLabelWithoutShipment;
        }

        /**
         * Execute purchaseLabelWithRateId request
         * @return Label
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
         </table>
         */
        public Label execute() throws ApiException {
            PurchaseLabelWithoutShipment purchaseLabelWithoutShipment = buildBodyParams();
            ApiResponse<Label> localVarResp = purchaseLabelWithRateIdWithHttpInfo(rateId, purchaseLabelWithoutShipment);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute purchaseLabelWithRateId request with HTTP info returned
         * @return ApiResponse&lt;Label&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Label> executeWithHttpInfo() throws ApiException {
            PurchaseLabelWithoutShipment purchaseLabelWithoutShipment = buildBodyParams();
            return purchaseLabelWithRateIdWithHttpInfo(rateId, purchaseLabelWithoutShipment);
        }

        /**
         * Execute purchaseLabelWithRateId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Label> _callback) throws ApiException {
            PurchaseLabelWithoutShipment purchaseLabelWithoutShipment = buildBodyParams();
            return purchaseLabelWithRateIdAsync(rateId, purchaseLabelWithoutShipment, _callback);
        }
    }

    /**
     * Purchase Label with Rate ID
     * When retrieving rates for shipments using the &#x60;/rates&#x60; endpoint, the returned information contains a &#x60;rate_id&#x60; property that can be used to generate a label without having to refill in the shipment information repeatedly. 
     * @param rateId Rate ID (required)
     * @param purchaseLabelWithoutShipment  (required)
     * @return PurchaseLabelWithRateIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
     </table>
     */
    public PurchaseLabelWithRateIdRequestBuilder purchaseLabelWithRateId(String rateId) throws IllegalArgumentException {
        if (rateId == null) throw new IllegalArgumentException("\"rateId\" is required but got null");
            if (rateId != null && rateId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for rateId. Length must be greater than or equal to 1.");
            }

        return new PurchaseLabelWithRateIdRequestBuilder(rateId);
    }
    private okhttp3.Call purchaseLabelWithShipmentIdCall(String shipmentId, CreateLabelFromShipmentRequestBody createLabelFromShipmentRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createLabelFromShipmentRequestBody;

        // create path and map variables
        String localVarPath = "/v1/labels/shipment/{shipment_id}"
            .replace("{" + "shipment_id" + "}", localVarApiClient.escapeString(shipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call purchaseLabelWithShipmentIdValidateBeforeCall(String shipmentId, CreateLabelFromShipmentRequestBody createLabelFromShipmentRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException("Missing the required parameter 'shipmentId' when calling purchaseLabelWithShipmentId(Async)");
        }

        // verify the required parameter 'createLabelFromShipmentRequestBody' is set
        if (createLabelFromShipmentRequestBody == null) {
            throw new ApiException("Missing the required parameter 'createLabelFromShipmentRequestBody' when calling purchaseLabelWithShipmentId(Async)");
        }

        return purchaseLabelWithShipmentIdCall(shipmentId, createLabelFromShipmentRequestBody, _callback);

    }


    private ApiResponse<Label> purchaseLabelWithShipmentIdWithHttpInfo(String shipmentId, CreateLabelFromShipmentRequestBody createLabelFromShipmentRequestBody) throws ApiException {
        okhttp3.Call localVarCall = purchaseLabelWithShipmentIdValidateBeforeCall(shipmentId, createLabelFromShipmentRequestBody, null);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call purchaseLabelWithShipmentIdAsync(String shipmentId, CreateLabelFromShipmentRequestBody createLabelFromShipmentRequestBody, final ApiCallback<Label> _callback) throws ApiException {

        okhttp3.Call localVarCall = purchaseLabelWithShipmentIdValidateBeforeCall(shipmentId, createLabelFromShipmentRequestBody, _callback);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PurchaseLabelWithShipmentIdRequestBuilder {
        private final String shipmentId;
        private ValidateAddress validateAddress;
        private LabelLayout labelLayout;
        private LabelFormat labelFormat;
        private LabelDownloadType labelDownloadType;
        private DisplayScheme displayScheme;

        private PurchaseLabelWithShipmentIdRequestBuilder(String shipmentId) {
            this.shipmentId = shipmentId;
        }

        /**
         * Set validateAddress
         * @param validateAddress  (optional)
         * @return PurchaseLabelWithShipmentIdRequestBuilder
         */
        public PurchaseLabelWithShipmentIdRequestBuilder validateAddress(ValidateAddress validateAddress) {
            this.validateAddress = validateAddress;
            return this;
        }
        
        /**
         * Set labelLayout
         * @param labelLayout  (optional)
         * @return PurchaseLabelWithShipmentIdRequestBuilder
         */
        public PurchaseLabelWithShipmentIdRequestBuilder labelLayout(LabelLayout labelLayout) {
            this.labelLayout = labelLayout;
            return this;
        }
        
        /**
         * Set labelFormat
         * @param labelFormat  (optional)
         * @return PurchaseLabelWithShipmentIdRequestBuilder
         */
        public PurchaseLabelWithShipmentIdRequestBuilder labelFormat(LabelFormat labelFormat) {
            this.labelFormat = labelFormat;
            return this;
        }
        
        /**
         * Set labelDownloadType
         * @param labelDownloadType  (optional)
         * @return PurchaseLabelWithShipmentIdRequestBuilder
         */
        public PurchaseLabelWithShipmentIdRequestBuilder labelDownloadType(LabelDownloadType labelDownloadType) {
            this.labelDownloadType = labelDownloadType;
            return this;
        }
        
        /**
         * Set displayScheme
         * @param displayScheme The display format that the label should be shown in. (optional)
         * @return PurchaseLabelWithShipmentIdRequestBuilder
         */
        public PurchaseLabelWithShipmentIdRequestBuilder displayScheme(DisplayScheme displayScheme) {
            this.displayScheme = displayScheme;
            return this;
        }
        
        /**
         * Build call for purchaseLabelWithShipmentId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateLabelFromShipmentRequestBody createLabelFromShipmentRequestBody = buildBodyParams();
            return purchaseLabelWithShipmentIdCall(shipmentId, createLabelFromShipmentRequestBody, _callback);
        }

        private CreateLabelFromShipmentRequestBody buildBodyParams() {
            CreateLabelFromShipmentRequestBody createLabelFromShipmentRequestBody = new CreateLabelFromShipmentRequestBody();
            createLabelFromShipmentRequestBody.validateAddress(this.validateAddress);
            createLabelFromShipmentRequestBody.labelLayout(this.labelLayout);
            createLabelFromShipmentRequestBody.labelFormat(this.labelFormat);
            createLabelFromShipmentRequestBody.labelDownloadType(this.labelDownloadType);
            createLabelFromShipmentRequestBody.displayScheme(this.displayScheme);
            return createLabelFromShipmentRequestBody;
        }

        /**
         * Execute purchaseLabelWithShipmentId request
         * @return Label
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
         </table>
         */
        public Label execute() throws ApiException {
            CreateLabelFromShipmentRequestBody createLabelFromShipmentRequestBody = buildBodyParams();
            ApiResponse<Label> localVarResp = purchaseLabelWithShipmentIdWithHttpInfo(shipmentId, createLabelFromShipmentRequestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute purchaseLabelWithShipmentId request with HTTP info returned
         * @return ApiResponse&lt;Label&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Label> executeWithHttpInfo() throws ApiException {
            CreateLabelFromShipmentRequestBody createLabelFromShipmentRequestBody = buildBodyParams();
            return purchaseLabelWithShipmentIdWithHttpInfo(shipmentId, createLabelFromShipmentRequestBody);
        }

        /**
         * Execute purchaseLabelWithShipmentId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Label> _callback) throws ApiException {
            CreateLabelFromShipmentRequestBody createLabelFromShipmentRequestBody = buildBodyParams();
            return purchaseLabelWithShipmentIdAsync(shipmentId, createLabelFromShipmentRequestBody, _callback);
        }
    }

    /**
     * Purchase Label with Shipment ID
     * Purchase a label using a shipment ID that has already been created with the desired address and package info. 
     * @param shipmentId Shipment ID (required)
     * @param createLabelFromShipmentRequestBody  (required)
     * @return PurchaseLabelWithShipmentIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
     </table>
     */
    public PurchaseLabelWithShipmentIdRequestBuilder purchaseLabelWithShipmentId(String shipmentId) throws IllegalArgumentException {
        if (shipmentId == null) throw new IllegalArgumentException("\"shipmentId\" is required but got null");
            if (shipmentId != null && shipmentId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for shipmentId. Length must be greater than or equal to 1.");
            }

        return new PurchaseLabelWithShipmentIdRequestBuilder(shipmentId);
    }
}
