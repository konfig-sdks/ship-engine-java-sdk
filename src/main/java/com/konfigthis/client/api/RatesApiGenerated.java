/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202403202303
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddressResidentialIndicator;
import com.konfigthis.client.model.BulkRate;
import com.konfigthis.client.model.CalculateRatesResponseBody;
import com.konfigthis.client.model.DeliveryConfirmation;
import com.konfigthis.client.model.Dimensions;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.Rate;
import com.konfigthis.client.model.RateEstimate;
import com.konfigthis.client.model.RateEstimateOptions;
import com.konfigthis.client.model.RateRequestBody;
import com.konfigthis.client.model.RateRequestOptions;
import com.konfigthis.client.model.RateRequestRateOptions;
import com.konfigthis.client.model.Weight;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class RatesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RatesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public RatesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"API-Key\" is required but no API key was provided. Please set \"API-Key\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getBulkShipmentRatesCall(RateRequestRateOptions rateRequestRateOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rateRequestRateOptions;

        // create path and map variables
        String localVarPath = "/v1/rates/bulk";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBulkShipmentRatesValidateBeforeCall(RateRequestRateOptions rateRequestRateOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rateRequestRateOptions' is set
        if (rateRequestRateOptions == null) {
            throw new ApiException("Missing the required parameter 'rateRequestRateOptions' when calling getBulkShipmentRates(Async)");
        }

        return getBulkShipmentRatesCall(rateRequestRateOptions, _callback);

    }


    private ApiResponse<List<BulkRate>> getBulkShipmentRatesWithHttpInfo(RateRequestRateOptions rateRequestRateOptions) throws ApiException {
        okhttp3.Call localVarCall = getBulkShipmentRatesValidateBeforeCall(rateRequestRateOptions, null);
        Type localVarReturnType = new TypeToken<List<BulkRate>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBulkShipmentRatesAsync(RateRequestRateOptions rateRequestRateOptions, final ApiCallback<List<BulkRate>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBulkShipmentRatesValidateBeforeCall(rateRequestRateOptions, _callback);
        Type localVarReturnType = new TypeToken<List<BulkRate>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBulkShipmentRatesRequestBuilder {
        private RateRequestBody rateOptions;

        private GetBulkShipmentRatesRequestBuilder() {
        }

        /**
         * Set rateOptions
         * @param rateOptions The rate options (optional)
         * @return GetBulkShipmentRatesRequestBuilder
         */
        public GetBulkShipmentRatesRequestBuilder rateOptions(RateRequestBody rateOptions) {
            this.rateOptions = rateOptions;
            return this;
        }
        
        /**
         * Build call for getBulkShipmentRates
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RateRequestRateOptions rateRequestRateOptions = buildBodyParams();
            return getBulkShipmentRatesCall(rateRequestRateOptions, _callback);
        }

        private RateRequestRateOptions buildBodyParams() {
            RateRequestRateOptions rateRequestRateOptions = new RateRequestRateOptions();
            rateRequestRateOptions.rateOptions(this.rateOptions);
            return rateRequestRateOptions;
        }

        /**
         * Execute getBulkShipmentRates request
         * @return List&lt;BulkRate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public List<BulkRate> execute() throws ApiException {
            RateRequestRateOptions rateRequestRateOptions = buildBodyParams();
            ApiResponse<List<BulkRate>> localVarResp = getBulkShipmentRatesWithHttpInfo(rateRequestRateOptions);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBulkShipmentRates request with HTTP info returned
         * @return ApiResponse&lt;List&lt;BulkRate&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<BulkRate>> executeWithHttpInfo() throws ApiException {
            RateRequestRateOptions rateRequestRateOptions = buildBodyParams();
            return getBulkShipmentRatesWithHttpInfo(rateRequestRateOptions);
        }

        /**
         * Execute getBulkShipmentRates request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<BulkRate>> _callback) throws ApiException {
            RateRequestRateOptions rateRequestRateOptions = buildBodyParams();
            return getBulkShipmentRatesAsync(rateRequestRateOptions, _callback);
        }
    }

    /**
     * Get Bulk Rates
     * Get Bulk Shipment Rates
     * @param rateRequestRateOptions  (required)
     * @return GetBulkShipmentRatesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public GetBulkShipmentRatesRequestBuilder getBulkShipmentRates() throws IllegalArgumentException {
        return new GetBulkShipmentRatesRequestBuilder();
    }
    private okhttp3.Call getByIdCall(String rateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/rates/{rate_id}"
            .replace("{" + "rate_id" + "}", localVarApiClient.escapeString(rateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String rateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rateId' is set
        if (rateId == null) {
            throw new ApiException("Missing the required parameter 'rateId' when calling getById(Async)");
        }

        return getByIdCall(rateId, _callback);

    }


    private ApiResponse<Rate> getByIdWithHttpInfo(String rateId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(rateId, null);
        Type localVarReturnType = new TypeToken<Rate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String rateId, final ApiCallback<Rate> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(rateId, _callback);
        Type localVarReturnType = new TypeToken<Rate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String rateId;

        private GetByIdRequestBuilder(String rateId) {
            this.rateId = rateId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(rateId, _callback);
        }


        /**
         * Execute getById request
         * @return Rate
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public Rate execute() throws ApiException {
            ApiResponse<Rate> localVarResp = getByIdWithHttpInfo(rateId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Rate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Rate> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(rateId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Rate> _callback) throws ApiException {
            return getByIdAsync(rateId, _callback);
        }
    }

    /**
     * Get Rate By ID
     * Retrieve a previously queried rate by its ID
     * @param rateId Rate ID (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String rateId) throws IllegalArgumentException {
        if (rateId == null) throw new IllegalArgumentException("\"rateId\" is required but got null");
            if (rateId != null && rateId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for rateId. Length must be greater than or equal to 1.");
            }

        return new GetByIdRequestBuilder(rateId);
    }
    private okhttp3.Call ratesCall(RateRequestOptions rateRequestOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rateRequestOptions;

        // create path and map variables
        String localVarPath = "/v1/rates";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ratesValidateBeforeCall(RateRequestOptions rateRequestOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rateRequestOptions' is set
        if (rateRequestOptions == null) {
            throw new ApiException("Missing the required parameter 'rateRequestOptions' when calling rates(Async)");
        }

        return ratesCall(rateRequestOptions, _callback);

    }


    private ApiResponse<CalculateRatesResponseBody> ratesWithHttpInfo(RateRequestOptions rateRequestOptions) throws ApiException {
        okhttp3.Call localVarCall = ratesValidateBeforeCall(rateRequestOptions, null);
        Type localVarReturnType = new TypeToken<CalculateRatesResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call ratesAsync(RateRequestOptions rateRequestOptions, final ApiCallback<CalculateRatesResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = ratesValidateBeforeCall(rateRequestOptions, _callback);
        Type localVarReturnType = new TypeToken<CalculateRatesResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RatesRequestBuilder {
        private RateRequestBody rateOptions;

        private RatesRequestBuilder() {
        }

        /**
         * Set rateOptions
         * @param rateOptions The rate options (optional)
         * @return RatesRequestBuilder
         */
        public RatesRequestBuilder rateOptions(RateRequestBody rateOptions) {
            this.rateOptions = rateOptions;
            return this;
        }
        
        /**
         * Build call for rates
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RateRequestOptions rateRequestOptions = buildBodyParams();
            return ratesCall(rateRequestOptions, _callback);
        }

        private RateRequestOptions buildBodyParams() {
            RateRequestOptions rateRequestOptions = new RateRequestOptions();
            rateRequestOptions.rateOptions(this.rateOptions);
            return rateRequestOptions;
        }

        /**
         * Execute rates request
         * @return CalculateRatesResponseBody
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public CalculateRatesResponseBody execute() throws ApiException {
            RateRequestOptions rateRequestOptions = buildBodyParams();
            ApiResponse<CalculateRatesResponseBody> localVarResp = ratesWithHttpInfo(rateRequestOptions);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute rates request with HTTP info returned
         * @return ApiResponse&lt;CalculateRatesResponseBody&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CalculateRatesResponseBody> executeWithHttpInfo() throws ApiException {
            RateRequestOptions rateRequestOptions = buildBodyParams();
            return ratesWithHttpInfo(rateRequestOptions);
        }

        /**
         * Execute rates request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CalculateRatesResponseBody> _callback) throws ApiException {
            RateRequestOptions rateRequestOptions = buildBodyParams();
            return ratesAsync(rateRequestOptions, _callback);
        }
    }

    /**
     * Get Shipping Rates
     * It&#39;s not uncommon that you want to give your customer the choice between whether they want to ship the fastest, cheapest, or the most trusted route. Most companies don&#39;t solely ship things using a single shipping option; so we provide functionality to show you all your options! 
     * @param rateRequestOptions  (required)
     * @return RatesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public RatesRequestBuilder rates() throws IllegalArgumentException {
        return new RatesRequestBuilder();
    }
    private okhttp3.Call rates_0Call(RateEstimateOptions rateEstimateOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rateEstimateOptions;

        // create path and map variables
        String localVarPath = "/v1/rates/estimate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rates_0ValidateBeforeCall(RateEstimateOptions rateEstimateOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'rateEstimateOptions' is set
        if (rateEstimateOptions == null) {
            throw new ApiException("Missing the required parameter 'rateEstimateOptions' when calling rates_0(Async)");
        }

        return rates_0Call(rateEstimateOptions, _callback);

    }


    private ApiResponse<List<RateEstimate>> rates_0WithHttpInfo(RateEstimateOptions rateEstimateOptions) throws ApiException {
        okhttp3.Call localVarCall = rates_0ValidateBeforeCall(rateEstimateOptions, null);
        Type localVarReturnType = new TypeToken<List<RateEstimate>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call rates_0Async(RateEstimateOptions rateEstimateOptions, final ApiCallback<List<RateEstimate>> _callback) throws ApiException {

        okhttp3.Call localVarCall = rates_0ValidateBeforeCall(rateEstimateOptions, _callback);
        Type localVarReturnType = new TypeToken<List<RateEstimate>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Rates0RequestBuilder {
        private String fromCountryCode;
        private String fromPostalCode;
        private String fromCityLocality;
        private String fromStateProvince;
        private String toCountryCode;
        private String toPostalCode;
        private String toCityLocality;
        private String toStateProvince;
        private Weight weight;
        private Dimensions dimensions;
        private DeliveryConfirmation confirmation;
        private AddressResidentialIndicator addressResidentialIndicator;
        private OffsetDateTime shipDate;

        private Rates0RequestBuilder() {
        }

        /**
         * Set fromCountryCode
         * @param fromCountryCode A two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1)  (optional)
         * @return Rates0RequestBuilder
         */
        public Rates0RequestBuilder fromCountryCode(String fromCountryCode) {
            this.fromCountryCode = fromCountryCode;
            return this;
        }
        
        /**
         * Set fromPostalCode
         * @param fromPostalCode postal code (optional)
         * @return Rates0RequestBuilder
         */
        public Rates0RequestBuilder fromPostalCode(String fromPostalCode) {
            this.fromPostalCode = fromPostalCode;
            return this;
        }
        
        /**
         * Set fromCityLocality
         * @param fromCityLocality from postal code (optional)
         * @return Rates0RequestBuilder
         */
        public Rates0RequestBuilder fromCityLocality(String fromCityLocality) {
            this.fromCityLocality = fromCityLocality;
            return this;
        }
        
        /**
         * Set fromStateProvince
         * @param fromStateProvince From state province (optional)
         * @return Rates0RequestBuilder
         */
        public Rates0RequestBuilder fromStateProvince(String fromStateProvince) {
            this.fromStateProvince = fromStateProvince;
            return this;
        }
        
        /**
         * Set toCountryCode
         * @param toCountryCode A two-letter [ISO 3166-1 country code](https://en.wikipedia.org/wiki/ISO_3166-1)  (optional)
         * @return Rates0RequestBuilder
         */
        public Rates0RequestBuilder toCountryCode(String toCountryCode) {
            this.toCountryCode = toCountryCode;
            return this;
        }
        
        /**
         * Set toPostalCode
         * @param toPostalCode postal code (optional)
         * @return Rates0RequestBuilder
         */
        public Rates0RequestBuilder toPostalCode(String toPostalCode) {
            this.toPostalCode = toPostalCode;
            return this;
        }
        
        /**
         * Set toCityLocality
         * @param toCityLocality The city locality the package is being shipped to (optional)
         * @return Rates0RequestBuilder
         */
        public Rates0RequestBuilder toCityLocality(String toCityLocality) {
            this.toCityLocality = toCityLocality;
            return this;
        }
        
        /**
         * Set toStateProvince
         * @param toStateProvince To state province (optional)
         * @return Rates0RequestBuilder
         */
        public Rates0RequestBuilder toStateProvince(String toStateProvince) {
            this.toStateProvince = toStateProvince;
            return this;
        }
        
        /**
         * Set weight
         * @param weight The weight of the package (optional)
         * @return Rates0RequestBuilder
         */
        public Rates0RequestBuilder weight(Weight weight) {
            this.weight = weight;
            return this;
        }
        
        /**
         * Set dimensions
         * @param dimensions The dimensions of the package (optional)
         * @return Rates0RequestBuilder
         */
        public Rates0RequestBuilder dimensions(Dimensions dimensions) {
            this.dimensions = dimensions;
            return this;
        }
        
        /**
         * Set confirmation
         * @param confirmation  (optional)
         * @return Rates0RequestBuilder
         */
        public Rates0RequestBuilder confirmation(DeliveryConfirmation confirmation) {
            this.confirmation = confirmation;
            return this;
        }
        
        /**
         * Set addressResidentialIndicator
         * @param addressResidentialIndicator  (optional)
         * @return Rates0RequestBuilder
         */
        public Rates0RequestBuilder addressResidentialIndicator(AddressResidentialIndicator addressResidentialIndicator) {
            this.addressResidentialIndicator = addressResidentialIndicator;
            return this;
        }
        
        /**
         * Set shipDate
         * @param shipDate An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date and time.  (optional)
         * @return Rates0RequestBuilder
         */
        public Rates0RequestBuilder shipDate(OffsetDateTime shipDate) {
            this.shipDate = shipDate;
            return this;
        }
        
        /**
         * Build call for rates_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RateEstimateOptions rateEstimateOptions = buildBodyParams();
            return rates_0Call(rateEstimateOptions, _callback);
        }

        private RateEstimateOptions buildBodyParams() {
            RateEstimateOptions rateEstimateOptions = new RateEstimateOptions();
            rateEstimateOptions.fromCountryCode(this.fromCountryCode);
            rateEstimateOptions.fromPostalCode(this.fromPostalCode);
            rateEstimateOptions.fromCityLocality(this.fromCityLocality);
            rateEstimateOptions.fromStateProvince(this.fromStateProvince);
            rateEstimateOptions.toCountryCode(this.toCountryCode);
            rateEstimateOptions.toPostalCode(this.toPostalCode);
            rateEstimateOptions.toCityLocality(this.toCityLocality);
            rateEstimateOptions.toStateProvince(this.toStateProvince);
            rateEstimateOptions.weight(this.weight);
            rateEstimateOptions.dimensions(this.dimensions);
            rateEstimateOptions.confirmation(this.confirmation);
            rateEstimateOptions.addressResidentialIndicator(this.addressResidentialIndicator);
            rateEstimateOptions.shipDate(this.shipDate);
            return rateEstimateOptions;
        }

        /**
         * Execute rates_0 request
         * @return List&lt;RateEstimate&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public List<RateEstimate> execute() throws ApiException {
            RateEstimateOptions rateEstimateOptions = buildBodyParams();
            ApiResponse<List<RateEstimate>> localVarResp = rates_0WithHttpInfo(rateEstimateOptions);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute rates_0 request with HTTP info returned
         * @return ApiResponse&lt;List&lt;RateEstimate&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<RateEstimate>> executeWithHttpInfo() throws ApiException {
            RateEstimateOptions rateEstimateOptions = buildBodyParams();
            return rates_0WithHttpInfo(rateEstimateOptions);
        }

        /**
         * Execute rates_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<RateEstimate>> _callback) throws ApiException {
            RateEstimateOptions rateEstimateOptions = buildBodyParams();
            return rates_0Async(rateEstimateOptions, _callback);
        }
    }

    /**
     * Estimate Rates
     * Get Rate Estimates
     * @param rateEstimateOptions  (required)
     * @return Rates0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public Rates0RequestBuilder rates_0() throws IllegalArgumentException {
        return new Rates0RequestBuilder();
    }
}
