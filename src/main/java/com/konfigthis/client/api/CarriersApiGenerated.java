/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202403202303
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddFundsToCarrierResponseBody;
import com.konfigthis.client.model.Carrier;
import com.konfigthis.client.model.GetCarrierOptionsResponseBody;
import com.konfigthis.client.model.GetCarriersResponseBody;
import com.konfigthis.client.model.ListCarrierPackageTypesResponseBody;
import com.konfigthis.client.model.ListCarrierServicesResponseBody;
import com.konfigthis.client.model.MonetaryValue;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CarriersApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CarriersApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CarriersApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"API-Key\" is required but no API key was provided. Please set \"API-Key\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addFundsToCarrierCall(String carrierId, MonetaryValue monetaryValue, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = monetaryValue;

        // create path and map variables
        String localVarPath = "/v1/carriers/{carrier_id}/add_funds"
            .replace("{" + "carrier_id" + "}", localVarApiClient.escapeString(carrierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addFundsToCarrierValidateBeforeCall(String carrierId, MonetaryValue monetaryValue, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'carrierId' is set
        if (carrierId == null) {
            throw new ApiException("Missing the required parameter 'carrierId' when calling addFundsToCarrier(Async)");
        }

        // verify the required parameter 'monetaryValue' is set
        if (monetaryValue == null) {
            throw new ApiException("Missing the required parameter 'monetaryValue' when calling addFundsToCarrier(Async)");
        }

        return addFundsToCarrierCall(carrierId, monetaryValue, _callback);

    }


    private ApiResponse<AddFundsToCarrierResponseBody> addFundsToCarrierWithHttpInfo(String carrierId, MonetaryValue monetaryValue) throws ApiException {
        okhttp3.Call localVarCall = addFundsToCarrierValidateBeforeCall(carrierId, monetaryValue, null);
        Type localVarReturnType = new TypeToken<AddFundsToCarrierResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addFundsToCarrierAsync(String carrierId, MonetaryValue monetaryValue, final ApiCallback<AddFundsToCarrierResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = addFundsToCarrierValidateBeforeCall(carrierId, monetaryValue, _callback);
        Type localVarReturnType = new TypeToken<AddFundsToCarrierResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddFundsToCarrierRequestBuilder {
        private final String currency;
        private final Double amount;
        private final String carrierId;

        private AddFundsToCarrierRequestBuilder(String currency, Double amount, String carrierId) {
            this.currency = currency;
            this.amount = amount;
            this.carrierId = carrierId;
        }

        /**
         * Build call for addFundsToCarrier
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            MonetaryValue monetaryValue = buildBodyParams();
            return addFundsToCarrierCall(carrierId, monetaryValue, _callback);
        }

        private MonetaryValue buildBodyParams() {
            MonetaryValue monetaryValue = new MonetaryValue();
            monetaryValue.currency(this.currency);
            monetaryValue.amount(this.amount);
            return monetaryValue;
        }

        /**
         * Execute addFundsToCarrier request
         * @return AddFundsToCarrierResponseBody
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public AddFundsToCarrierResponseBody execute() throws ApiException {
            MonetaryValue monetaryValue = buildBodyParams();
            ApiResponse<AddFundsToCarrierResponseBody> localVarResp = addFundsToCarrierWithHttpInfo(carrierId, monetaryValue);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addFundsToCarrier request with HTTP info returned
         * @return ApiResponse&lt;AddFundsToCarrierResponseBody&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AddFundsToCarrierResponseBody> executeWithHttpInfo() throws ApiException {
            MonetaryValue monetaryValue = buildBodyParams();
            return addFundsToCarrierWithHttpInfo(carrierId, monetaryValue);
        }

        /**
         * Execute addFundsToCarrier request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AddFundsToCarrierResponseBody> _callback) throws ApiException {
            MonetaryValue monetaryValue = buildBodyParams();
            return addFundsToCarrierAsync(carrierId, monetaryValue, _callback);
        }
    }

    /**
     * Add Funds To Carrier
     * Add Funds To A Carrier
     * @param carrierId Carrier ID (required)
     * @param monetaryValue  (required)
     * @return AddFundsToCarrierRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public AddFundsToCarrierRequestBuilder addFundsToCarrier(String currency, Double amount, String carrierId) throws IllegalArgumentException {
        if (currency == null) throw new IllegalArgumentException("\"currency\" is required but got null");
            

        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        if (carrierId == null) throw new IllegalArgumentException("\"carrierId\" is required but got null");
            if (carrierId != null && carrierId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for carrierId. Length must be greater than or equal to 1.");
            }

        return new AddFundsToCarrierRequestBuilder(currency, amount, carrierId);
    }
    private okhttp3.Call carriersCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/carriers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call carriersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return carriersCall(_callback);

    }


    private ApiResponse<GetCarriersResponseBody> carriersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = carriersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GetCarriersResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call carriersAsync(final ApiCallback<GetCarriersResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = carriersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GetCarriersResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CarriersRequestBuilder {

        private CarriersRequestBuilder() {
        }

        /**
         * Build call for carriers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
            <tr><td> 207 </td><td> The request was a partial success. It contains results, as well as errors. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return carriersCall(_callback);
        }


        /**
         * Execute carriers request
         * @return GetCarriersResponseBody
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
            <tr><td> 207 </td><td> The request was a partial success. It contains results, as well as errors. </td><td>  -  </td></tr>
         </table>
         */
        public GetCarriersResponseBody execute() throws ApiException {
            ApiResponse<GetCarriersResponseBody> localVarResp = carriersWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute carriers request with HTTP info returned
         * @return ApiResponse&lt;GetCarriersResponseBody&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
            <tr><td> 207 </td><td> The request was a partial success. It contains results, as well as errors. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetCarriersResponseBody> executeWithHttpInfo() throws ApiException {
            return carriersWithHttpInfo();
        }

        /**
         * Execute carriers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
            <tr><td> 207 </td><td> The request was a partial success. It contains results, as well as errors. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetCarriersResponseBody> _callback) throws ApiException {
            return carriersAsync(_callback);
        }
    }

    /**
     * List Carriers
     * List all carriers that have been added to this account
     * @return CarriersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> The request was a partial success. It contains results, as well as errors. </td><td>  -  </td></tr>
     </table>
     */
    public CarriersRequestBuilder carriers() throws IllegalArgumentException {
        return new CarriersRequestBuilder();
    }
    private okhttp3.Call disconnectByIdCall(String carrierId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/carriers/{carrier_id}"
            .replace("{" + "carrier_id" + "}", localVarApiClient.escapeString(carrierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call disconnectByIdValidateBeforeCall(String carrierId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'carrierId' is set
        if (carrierId == null) {
            throw new ApiException("Missing the required parameter 'carrierId' when calling disconnectById(Async)");
        }

        return disconnectByIdCall(carrierId, _callback);

    }


    private ApiResponse<String> disconnectByIdWithHttpInfo(String carrierId) throws ApiException {
        okhttp3.Call localVarCall = disconnectByIdValidateBeforeCall(carrierId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call disconnectByIdAsync(String carrierId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = disconnectByIdValidateBeforeCall(carrierId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DisconnectByIdRequestBuilder {
        private final String carrierId;

        private DisconnectByIdRequestBuilder(String carrierId) {
            this.carrierId = carrierId;
        }

        /**
         * Build call for disconnectById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return disconnectByIdCall(carrierId, _callback);
        }


        /**
         * Execute disconnectById request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = disconnectByIdWithHttpInfo(carrierId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute disconnectById request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return disconnectByIdWithHttpInfo(carrierId);
        }

        /**
         * Execute disconnectById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return disconnectByIdAsync(carrierId, _callback);
        }
    }

    /**
     * Disconnect Carrier by ID
     * Disconnect a Carrier of the given ID from the account
     * @param carrierId Carrier ID (required)
     * @return DisconnectByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
     </table>
     */
    public DisconnectByIdRequestBuilder disconnectById(String carrierId) throws IllegalArgumentException {
        if (carrierId == null) throw new IllegalArgumentException("\"carrierId\" is required but got null");
            if (carrierId != null && carrierId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for carrierId. Length must be greater than or equal to 1.");
            }

        return new DisconnectByIdRequestBuilder(carrierId);
    }
    private okhttp3.Call getByIdCall(String carrierId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/carriers/{carrier_id}"
            .replace("{" + "carrier_id" + "}", localVarApiClient.escapeString(carrierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String carrierId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'carrierId' is set
        if (carrierId == null) {
            throw new ApiException("Missing the required parameter 'carrierId' when calling getById(Async)");
        }

        return getByIdCall(carrierId, _callback);

    }


    private ApiResponse<Carrier> getByIdWithHttpInfo(String carrierId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(carrierId, null);
        Type localVarReturnType = new TypeToken<Carrier>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String carrierId, final ApiCallback<Carrier> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(carrierId, _callback);
        Type localVarReturnType = new TypeToken<Carrier>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String carrierId;

        private GetByIdRequestBuilder(String carrierId) {
            this.carrierId = carrierId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(carrierId, _callback);
        }


        /**
         * Execute getById request
         * @return Carrier
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public Carrier execute() throws ApiException {
            ApiResponse<Carrier> localVarResp = getByIdWithHttpInfo(carrierId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Carrier&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Carrier> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(carrierId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Carrier> _callback) throws ApiException {
            return getByIdAsync(carrierId, _callback);
        }
    }

    /**
     * Get Carrier By ID
     * Retrive carrier info by ID
     * @param carrierId Carrier ID (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String carrierId) throws IllegalArgumentException {
        if (carrierId == null) throw new IllegalArgumentException("\"carrierId\" is required but got null");
            if (carrierId != null && carrierId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for carrierId. Length must be greater than or equal to 1.");
            }

        return new GetByIdRequestBuilder(carrierId);
    }
    private okhttp3.Call getOptionsCall(String carrierId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/carriers/{carrier_id}/options"
            .replace("{" + "carrier_id" + "}", localVarApiClient.escapeString(carrierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOptionsValidateBeforeCall(String carrierId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'carrierId' is set
        if (carrierId == null) {
            throw new ApiException("Missing the required parameter 'carrierId' when calling getOptions(Async)");
        }

        return getOptionsCall(carrierId, _callback);

    }


    private ApiResponse<GetCarrierOptionsResponseBody> getOptionsWithHttpInfo(String carrierId) throws ApiException {
        okhttp3.Call localVarCall = getOptionsValidateBeforeCall(carrierId, null);
        Type localVarReturnType = new TypeToken<GetCarrierOptionsResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOptionsAsync(String carrierId, final ApiCallback<GetCarrierOptionsResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOptionsValidateBeforeCall(carrierId, _callback);
        Type localVarReturnType = new TypeToken<GetCarrierOptionsResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetOptionsRequestBuilder {
        private final String carrierId;

        private GetOptionsRequestBuilder(String carrierId) {
            this.carrierId = carrierId;
        }

        /**
         * Build call for getOptions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOptionsCall(carrierId, _callback);
        }


        /**
         * Execute getOptions request
         * @return GetCarrierOptionsResponseBody
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public GetCarrierOptionsResponseBody execute() throws ApiException {
            ApiResponse<GetCarrierOptionsResponseBody> localVarResp = getOptionsWithHttpInfo(carrierId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getOptions request with HTTP info returned
         * @return ApiResponse&lt;GetCarrierOptionsResponseBody&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetCarrierOptionsResponseBody> executeWithHttpInfo() throws ApiException {
            return getOptionsWithHttpInfo(carrierId);
        }

        /**
         * Execute getOptions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetCarrierOptionsResponseBody> _callback) throws ApiException {
            return getOptionsAsync(carrierId, _callback);
        }
    }

    /**
     * Get Carrier Options
     * Get a list of the options available for the carrier
     * @param carrierId Carrier ID (required)
     * @return GetOptionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public GetOptionsRequestBuilder getOptions(String carrierId) throws IllegalArgumentException {
        if (carrierId == null) throw new IllegalArgumentException("\"carrierId\" is required but got null");
            if (carrierId != null && carrierId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for carrierId. Length must be greater than or equal to 1.");
            }

        return new GetOptionsRequestBuilder(carrierId);
    }
    private okhttp3.Call listPackageTypesCall(String carrierId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/carriers/{carrier_id}/packages"
            .replace("{" + "carrier_id" + "}", localVarApiClient.escapeString(carrierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPackageTypesValidateBeforeCall(String carrierId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'carrierId' is set
        if (carrierId == null) {
            throw new ApiException("Missing the required parameter 'carrierId' when calling listPackageTypes(Async)");
        }

        return listPackageTypesCall(carrierId, _callback);

    }


    private ApiResponse<ListCarrierPackageTypesResponseBody> listPackageTypesWithHttpInfo(String carrierId) throws ApiException {
        okhttp3.Call localVarCall = listPackageTypesValidateBeforeCall(carrierId, null);
        Type localVarReturnType = new TypeToken<ListCarrierPackageTypesResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listPackageTypesAsync(String carrierId, final ApiCallback<ListCarrierPackageTypesResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPackageTypesValidateBeforeCall(carrierId, _callback);
        Type localVarReturnType = new TypeToken<ListCarrierPackageTypesResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListPackageTypesRequestBuilder {
        private final String carrierId;

        private ListPackageTypesRequestBuilder(String carrierId) {
            this.carrierId = carrierId;
        }

        /**
         * Build call for listPackageTypes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listPackageTypesCall(carrierId, _callback);
        }


        /**
         * Execute listPackageTypes request
         * @return ListCarrierPackageTypesResponseBody
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ListCarrierPackageTypesResponseBody execute() throws ApiException {
            ApiResponse<ListCarrierPackageTypesResponseBody> localVarResp = listPackageTypesWithHttpInfo(carrierId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listPackageTypes request with HTTP info returned
         * @return ApiResponse&lt;ListCarrierPackageTypesResponseBody&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListCarrierPackageTypesResponseBody> executeWithHttpInfo() throws ApiException {
            return listPackageTypesWithHttpInfo(carrierId);
        }

        /**
         * Execute listPackageTypes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListCarrierPackageTypesResponseBody> _callback) throws ApiException {
            return listPackageTypesAsync(carrierId, _callback);
        }
    }

    /**
     * List Carrier Package Types
     * List the package types associated with the carrier
     * @param carrierId Carrier ID (required)
     * @return ListPackageTypesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public ListPackageTypesRequestBuilder listPackageTypes(String carrierId) throws IllegalArgumentException {
        if (carrierId == null) throw new IllegalArgumentException("\"carrierId\" is required but got null");
            if (carrierId != null && carrierId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for carrierId. Length must be greater than or equal to 1.");
            }

        return new ListPackageTypesRequestBuilder(carrierId);
    }
    private okhttp3.Call listServicesCall(String carrierId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/carriers/{carrier_id}/services"
            .replace("{" + "carrier_id" + "}", localVarApiClient.escapeString(carrierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listServicesValidateBeforeCall(String carrierId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'carrierId' is set
        if (carrierId == null) {
            throw new ApiException("Missing the required parameter 'carrierId' when calling listServices(Async)");
        }

        return listServicesCall(carrierId, _callback);

    }


    private ApiResponse<ListCarrierServicesResponseBody> listServicesWithHttpInfo(String carrierId) throws ApiException {
        okhttp3.Call localVarCall = listServicesValidateBeforeCall(carrierId, null);
        Type localVarReturnType = new TypeToken<ListCarrierServicesResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listServicesAsync(String carrierId, final ApiCallback<ListCarrierServicesResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listServicesValidateBeforeCall(carrierId, _callback);
        Type localVarReturnType = new TypeToken<ListCarrierServicesResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListServicesRequestBuilder {
        private final String carrierId;

        private ListServicesRequestBuilder(String carrierId) {
            this.carrierId = carrierId;
        }

        /**
         * Build call for listServices
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listServicesCall(carrierId, _callback);
        }


        /**
         * Execute listServices request
         * @return ListCarrierServicesResponseBody
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ListCarrierServicesResponseBody execute() throws ApiException {
            ApiResponse<ListCarrierServicesResponseBody> localVarResp = listServicesWithHttpInfo(carrierId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listServices request with HTTP info returned
         * @return ApiResponse&lt;ListCarrierServicesResponseBody&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListCarrierServicesResponseBody> executeWithHttpInfo() throws ApiException {
            return listServicesWithHttpInfo(carrierId);
        }

        /**
         * Execute listServices request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListCarrierServicesResponseBody> _callback) throws ApiException {
            return listServicesAsync(carrierId, _callback);
        }
    }

    /**
     * List Carrier Services
     * List the services associated with the carrier ID
     * @param carrierId Carrier ID (required)
     * @return ListServicesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public ListServicesRequestBuilder listServices(String carrierId) throws IllegalArgumentException {
        if (carrierId == null) throw new IllegalArgumentException("\"carrierId\" is required but got null");
            if (carrierId != null && carrierId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for carrierId. Length must be greater than or equal to 1.");
            }

        return new ListServicesRequestBuilder(carrierId);
    }
}
