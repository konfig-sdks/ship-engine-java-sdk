/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202403202303
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Batch;
import com.konfigthis.client.model.BatchStatus;
import com.konfigthis.client.model.BatchesSortBy;
import com.konfigthis.client.model.DisplayScheme;
import com.konfigthis.client.model.LabelFormat;
import com.konfigthis.client.model.LabelLayout;
import com.konfigthis.client.model.ListBatchErrorsResponseBody;
import com.konfigthis.client.model.ListBatchesResponseBody;
import com.konfigthis.client.model.ModifyBatch;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.ProcessBatchRequestBody;
import com.konfigthis.client.model.SortDir;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BatchesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BatchesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public BatchesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"API-Key\" is required but no API key was provided. Please set \"API-Key\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addToBatchCall(String batchId, ModifyBatch modifyBatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyBatch;

        // create path and map variables
        String localVarPath = "/v1/batches/{batch_id}/add"
            .replace("{" + "batch_id" + "}", localVarApiClient.escapeString(batchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addToBatchValidateBeforeCall(String batchId, ModifyBatch modifyBatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchId' is set
        if (batchId == null) {
            throw new ApiException("Missing the required parameter 'batchId' when calling addToBatch(Async)");
        }

        // verify the required parameter 'modifyBatch' is set
        if (modifyBatch == null) {
            throw new ApiException("Missing the required parameter 'modifyBatch' when calling addToBatch(Async)");
        }

        return addToBatchCall(batchId, modifyBatch, _callback);

    }


    private ApiResponse<String> addToBatchWithHttpInfo(String batchId, ModifyBatch modifyBatch) throws ApiException {
        okhttp3.Call localVarCall = addToBatchValidateBeforeCall(batchId, modifyBatch, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addToBatchAsync(String batchId, ModifyBatch modifyBatch, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = addToBatchValidateBeforeCall(batchId, modifyBatch, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddToBatchRequestBuilder {
        private final String batchId;
        private List<String> shipmentIds;
        private List<String> rateIds;

        private AddToBatchRequestBuilder(String batchId) {
            this.batchId = batchId;
        }

        /**
         * Set shipmentIds
         * @param shipmentIds The Shipment Ids to be modified on the batch (optional)
         * @return AddToBatchRequestBuilder
         */
        public AddToBatchRequestBuilder shipmentIds(List<String> shipmentIds) {
            this.shipmentIds = shipmentIds;
            return this;
        }
        
        /**
         * Set rateIds
         * @param rateIds Array of Rate IDs to be modifed on the batch (optional)
         * @return AddToBatchRequestBuilder
         */
        public AddToBatchRequestBuilder rateIds(List<String> rateIds) {
            this.rateIds = rateIds;
            return this;
        }
        
        /**
         * Build call for addToBatch
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ModifyBatch modifyBatch = buildBodyParams();
            return addToBatchCall(batchId, modifyBatch, _callback);
        }

        private ModifyBatch buildBodyParams() {
            ModifyBatch modifyBatch = new ModifyBatch();
            modifyBatch.shipmentIds(this.shipmentIds);
            modifyBatch.rateIds(this.rateIds);
            return modifyBatch;
        }

        /**
         * Execute addToBatch request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ModifyBatch modifyBatch = buildBodyParams();
            ApiResponse<String> localVarResp = addToBatchWithHttpInfo(batchId, modifyBatch);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addToBatch request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            ModifyBatch modifyBatch = buildBodyParams();
            return addToBatchWithHttpInfo(batchId, modifyBatch);
        }

        /**
         * Execute addToBatch request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            ModifyBatch modifyBatch = buildBodyParams();
            return addToBatchAsync(batchId, modifyBatch, _callback);
        }
    }

    /**
     * Add to a Batch
     * Add a Shipment or Rate to a Batch
     * @param batchId Batch ID (required)
     * @param modifyBatch  (required)
     * @return AddToBatchRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
     </table>
     */
    public AddToBatchRequestBuilder addToBatch(String batchId) throws IllegalArgumentException {
        if (batchId == null) throw new IllegalArgumentException("\"batchId\" is required but got null");
            if (batchId != null && batchId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for batchId. Length must be greater than or equal to 1.");
            }

        return new AddToBatchRequestBuilder(batchId);
    }
    private okhttp3.Call batchCall(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/batches";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling batch(Async)");
        }

        return batchCall(body, _callback);

    }


    private ApiResponse<Batch> batchWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = batchValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call batchAsync(Object body, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class BatchRequestBuilder {
        private Object body;

        private BatchRequestBuilder() {
        }

        /**
         * Set body
         * @param body  (optional)
         * @return BatchRequestBuilder
         */
        public BatchRequestBuilder body(Object body) {
            this.body = body;
            return this;
        }

        /**
         * Build call for batch
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
            <tr><td> 207 </td><td> The request was a partial success. It contains results, as well as processing errors. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return batchCall(body, _callback);
        }

        private Object buildBodyParams() {
            return this.body;
        }

        /**
         * Execute batch request
         * @return Batch
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
            <tr><td> 207 </td><td> The request was a partial success. It contains results, as well as processing errors. </td><td>  -  </td></tr>
         </table>
         */
        public Batch execute() throws ApiException {
            Object body = buildBodyParams();
            ApiResponse<Batch> localVarResp = batchWithHttpInfo(body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute batch request with HTTP info returned
         * @return ApiResponse&lt;Batch&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
            <tr><td> 207 </td><td> The request was a partial success. It contains results, as well as processing errors. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Batch> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return batchWithHttpInfo(body);
        }

        /**
         * Execute batch request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
            <tr><td> 207 </td><td> The request was a partial success. It contains results, as well as processing errors. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Batch> _callback) throws ApiException {
            Object body = buildBodyParams();
            return batchAsync(body, _callback);
        }
    }

    /**
     * Create A Batch
     * Create a Batch
     * @param body  (required)
     * @return BatchRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> The request was a partial success. It contains results, as well as processing errors. </td><td>  -  </td></tr>
     </table>
     */
    public BatchRequestBuilder batch() throws IllegalArgumentException {
        return new BatchRequestBuilder();
    }
    private okhttp3.Call batch_0Call(String batchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/batches/{batch_id}"
            .replace("{" + "batch_id" + "}", localVarApiClient.escapeString(batchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batch_0ValidateBeforeCall(String batchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchId' is set
        if (batchId == null) {
            throw new ApiException("Missing the required parameter 'batchId' when calling batch_0(Async)");
        }

        return batch_0Call(batchId, _callback);

    }


    private ApiResponse<String> batch_0WithHttpInfo(String batchId) throws ApiException {
        okhttp3.Call localVarCall = batch_0ValidateBeforeCall(batchId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call batch_0Async(String batchId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = batch_0ValidateBeforeCall(batchId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Batch0RequestBuilder {
        private final String batchId;

        private Batch0RequestBuilder(String batchId) {
            this.batchId = batchId;
        }

        /**
         * Build call for batch_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return batch_0Call(batchId, _callback);
        }


        /**
         * Execute batch_0 request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = batch_0WithHttpInfo(batchId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute batch_0 request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return batch_0WithHttpInfo(batchId);
        }

        /**
         * Execute batch_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return batch_0Async(batchId, _callback);
        }
    }

    /**
     * Update Batch By Id
     * Update Batch By Id
     * @param batchId Batch ID (required)
     * @return Batch0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
     </table>
     */
    public Batch0RequestBuilder batch_0(String batchId) throws IllegalArgumentException {
        if (batchId == null) throw new IllegalArgumentException("\"batchId\" is required but got null");
            if (batchId != null && batchId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for batchId. Length must be greater than or equal to 1.");
            }

        return new Batch0RequestBuilder(batchId);
    }
    private okhttp3.Call batch_1Call(String batchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/batches/{batch_id}"
            .replace("{" + "batch_id" + "}", localVarApiClient.escapeString(batchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batch_1ValidateBeforeCall(String batchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchId' is set
        if (batchId == null) {
            throw new ApiException("Missing the required parameter 'batchId' when calling batch_1(Async)");
        }

        return batch_1Call(batchId, _callback);

    }


    private ApiResponse<String> batch_1WithHttpInfo(String batchId) throws ApiException {
        okhttp3.Call localVarCall = batch_1ValidateBeforeCall(batchId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call batch_1Async(String batchId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = batch_1ValidateBeforeCall(batchId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Batch1RequestBuilder {
        private final String batchId;

        private Batch1RequestBuilder(String batchId) {
            this.batchId = batchId;
        }

        /**
         * Build call for batch_1
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return batch_1Call(batchId, _callback);
        }


        /**
         * Execute batch_1 request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = batch_1WithHttpInfo(batchId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute batch_1 request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return batch_1WithHttpInfo(batchId);
        }

        /**
         * Execute batch_1 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return batch_1Async(batchId, _callback);
        }
    }

    /**
     * Delete Batch By Id
     * Delete Batch By Id
     * @param batchId Batch ID (required)
     * @return Batch1RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
     </table>
     */
    public Batch1RequestBuilder batch_1(String batchId) throws IllegalArgumentException {
        if (batchId == null) throw new IllegalArgumentException("\"batchId\" is required but got null");
            if (batchId != null && batchId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for batchId. Length must be greater than or equal to 1.");
            }

        return new Batch1RequestBuilder(batchId);
    }
    private okhttp3.Call batch_2Call(String batchId, ProcessBatchRequestBody processBatchRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = processBatchRequestBody;

        // create path and map variables
        String localVarPath = "/v1/batches/{batch_id}/process/labels"
            .replace("{" + "batch_id" + "}", localVarApiClient.escapeString(batchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batch_2ValidateBeforeCall(String batchId, ProcessBatchRequestBody processBatchRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchId' is set
        if (batchId == null) {
            throw new ApiException("Missing the required parameter 'batchId' when calling batch_2(Async)");
        }

        // verify the required parameter 'processBatchRequestBody' is set
        if (processBatchRequestBody == null) {
            throw new ApiException("Missing the required parameter 'processBatchRequestBody' when calling batch_2(Async)");
        }

        return batch_2Call(batchId, processBatchRequestBody, _callback);

    }


    private ApiResponse<String> batch_2WithHttpInfo(String batchId, ProcessBatchRequestBody processBatchRequestBody) throws ApiException {
        okhttp3.Call localVarCall = batch_2ValidateBeforeCall(batchId, processBatchRequestBody, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call batch_2Async(String batchId, ProcessBatchRequestBody processBatchRequestBody, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = batch_2ValidateBeforeCall(batchId, processBatchRequestBody, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Batch2RequestBuilder {
        private final String batchId;
        private OffsetDateTime shipDate;
        private LabelLayout labelLayout;
        private LabelFormat labelFormat;
        private DisplayScheme displayScheme;

        private Batch2RequestBuilder(String batchId) {
            this.batchId = batchId;
        }

        /**
         * Set shipDate
         * @param shipDate An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date and time.  (optional)
         * @return Batch2RequestBuilder
         */
        public Batch2RequestBuilder shipDate(OffsetDateTime shipDate) {
            this.shipDate = shipDate;
            return this;
        }
        
        /**
         * Set labelLayout
         * @param labelLayout  (optional)
         * @return Batch2RequestBuilder
         */
        public Batch2RequestBuilder labelLayout(LabelLayout labelLayout) {
            this.labelLayout = labelLayout;
            return this;
        }
        
        /**
         * Set labelFormat
         * @param labelFormat  (optional)
         * @return Batch2RequestBuilder
         */
        public Batch2RequestBuilder labelFormat(LabelFormat labelFormat) {
            this.labelFormat = labelFormat;
            return this;
        }
        
        /**
         * Set displayScheme
         * @param displayScheme The display format that the label should be shown in. (optional)
         * @return Batch2RequestBuilder
         */
        public Batch2RequestBuilder displayScheme(DisplayScheme displayScheme) {
            this.displayScheme = displayScheme;
            return this;
        }
        
        /**
         * Build call for batch_2
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ProcessBatchRequestBody processBatchRequestBody = buildBodyParams();
            return batch_2Call(batchId, processBatchRequestBody, _callback);
        }

        private ProcessBatchRequestBody buildBodyParams() {
            ProcessBatchRequestBody processBatchRequestBody = new ProcessBatchRequestBody();
            processBatchRequestBody.shipDate(this.shipDate);
            processBatchRequestBody.labelLayout(this.labelLayout);
            processBatchRequestBody.labelFormat(this.labelFormat);
            processBatchRequestBody.displayScheme(this.displayScheme);
            return processBatchRequestBody;
        }

        /**
         * Execute batch_2 request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ProcessBatchRequestBody processBatchRequestBody = buildBodyParams();
            ApiResponse<String> localVarResp = batch_2WithHttpInfo(batchId, processBatchRequestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute batch_2 request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            ProcessBatchRequestBody processBatchRequestBody = buildBodyParams();
            return batch_2WithHttpInfo(batchId, processBatchRequestBody);
        }

        /**
         * Execute batch_2 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            ProcessBatchRequestBody processBatchRequestBody = buildBodyParams();
            return batch_2Async(batchId, processBatchRequestBody, _callback);
        }
    }

    /**
     * Process Batch ID Labels
     * Process Batch ID Labels
     * @param batchId Batch ID (required)
     * @param processBatchRequestBody  (required)
     * @return Batch2RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
     </table>
     */
    public Batch2RequestBuilder batch_2(String batchId) throws IllegalArgumentException {
        if (batchId == null) throw new IllegalArgumentException("\"batchId\" is required but got null");
            if (batchId != null && batchId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for batchId. Length must be greater than or equal to 1.");
            }

        return new Batch2RequestBuilder(batchId);
    }
    private okhttp3.Call batchesCall(BatchStatus status, Integer page, Integer pageSize, SortDir sortDir, String batchNumber, BatchesSortBy sortBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/batches";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (sortDir != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_dir", sortDir));
        }

        if (batchNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("batch_number", batchNumber));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchesValidateBeforeCall(BatchStatus status, Integer page, Integer pageSize, SortDir sortDir, String batchNumber, BatchesSortBy sortBy, final ApiCallback _callback) throws ApiException {
        return batchesCall(status, page, pageSize, sortDir, batchNumber, sortBy, _callback);

    }


    private ApiResponse<ListBatchesResponseBody> batchesWithHttpInfo(BatchStatus status, Integer page, Integer pageSize, SortDir sortDir, String batchNumber, BatchesSortBy sortBy) throws ApiException {
        okhttp3.Call localVarCall = batchesValidateBeforeCall(status, page, pageSize, sortDir, batchNumber, sortBy, null);
        Type localVarReturnType = new TypeToken<ListBatchesResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call batchesAsync(BatchStatus status, Integer page, Integer pageSize, SortDir sortDir, String batchNumber, BatchesSortBy sortBy, final ApiCallback<ListBatchesResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchesValidateBeforeCall(status, page, pageSize, sortDir, batchNumber, sortBy, _callback);
        Type localVarReturnType = new TypeToken<ListBatchesResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class BatchesRequestBuilder {
        private BatchStatus status;
        private Integer page;
        private Integer pageSize;
        private SortDir sortDir;
        private String batchNumber;
        private BatchesSortBy sortBy;

        private BatchesRequestBuilder() {
        }

        /**
         * Set status
         * @param status  (optional)
         * @return BatchesRequestBuilder
         */
        public BatchesRequestBuilder status(BatchStatus status) {
            this.status = status;
            return this;
        }
        
        /**
         * Set page
         * @param page Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)
         * @return BatchesRequestBuilder
         */
        public BatchesRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize The number of results to return per response. (optional, default to 25)
         * @return BatchesRequestBuilder
         */
        public BatchesRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set sortDir
         * @param sortDir Controls the sort order of the query. (optional)
         * @return BatchesRequestBuilder
         */
        public BatchesRequestBuilder sortDir(SortDir sortDir) {
            this.sortDir = sortDir;
            return this;
        }
        
        /**
         * Set batchNumber
         * @param batchNumber Batch Number (optional)
         * @return BatchesRequestBuilder
         */
        public BatchesRequestBuilder batchNumber(String batchNumber) {
            this.batchNumber = batchNumber;
            return this;
        }
        
        /**
         * Set sortBy
         * @param sortBy  (optional)
         * @return BatchesRequestBuilder
         */
        public BatchesRequestBuilder sortBy(BatchesSortBy sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Build call for batches
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return batchesCall(status, page, pageSize, sortDir, batchNumber, sortBy, _callback);
        }


        /**
         * Execute batches request
         * @return ListBatchesResponseBody
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ListBatchesResponseBody execute() throws ApiException {
            ApiResponse<ListBatchesResponseBody> localVarResp = batchesWithHttpInfo(status, page, pageSize, sortDir, batchNumber, sortBy);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute batches request with HTTP info returned
         * @return ApiResponse&lt;ListBatchesResponseBody&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListBatchesResponseBody> executeWithHttpInfo() throws ApiException {
            return batchesWithHttpInfo(status, page, pageSize, sortDir, batchNumber, sortBy);
        }

        /**
         * Execute batches request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListBatchesResponseBody> _callback) throws ApiException {
            return batchesAsync(status, page, pageSize, sortDir, batchNumber, sortBy, _callback);
        }
    }

    /**
     * List Batches
     * List Batches associated with your Shipengine account
     * @return BatchesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public BatchesRequestBuilder batches() throws IllegalArgumentException {
        return new BatchesRequestBuilder();
    }
    private okhttp3.Call getByExternalIdCall(String externalBatchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/batches/external_batch_id/{external_batch_id}"
            .replace("{" + "external_batch_id" + "}", localVarApiClient.escapeString(externalBatchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByExternalIdValidateBeforeCall(String externalBatchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'externalBatchId' is set
        if (externalBatchId == null) {
            throw new ApiException("Missing the required parameter 'externalBatchId' when calling getByExternalId(Async)");
        }

        return getByExternalIdCall(externalBatchId, _callback);

    }


    private ApiResponse<Batch> getByExternalIdWithHttpInfo(String externalBatchId) throws ApiException {
        okhttp3.Call localVarCall = getByExternalIdValidateBeforeCall(externalBatchId, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByExternalIdAsync(String externalBatchId, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByExternalIdValidateBeforeCall(externalBatchId, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByExternalIdRequestBuilder {
        private final String externalBatchId;

        private GetByExternalIdRequestBuilder(String externalBatchId) {
            this.externalBatchId = externalBatchId;
        }

        /**
         * Build call for getByExternalId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByExternalIdCall(externalBatchId, _callback);
        }


        /**
         * Execute getByExternalId request
         * @return Batch
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public Batch execute() throws ApiException {
            ApiResponse<Batch> localVarResp = getByExternalIdWithHttpInfo(externalBatchId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByExternalId request with HTTP info returned
         * @return ApiResponse&lt;Batch&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Batch> executeWithHttpInfo() throws ApiException {
            return getByExternalIdWithHttpInfo(externalBatchId);
        }

        /**
         * Execute getByExternalId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Batch> _callback) throws ApiException {
            return getByExternalIdAsync(externalBatchId, _callback);
        }
    }

    /**
     * Get Batch By External ID
     * Get Batch By External ID
     * @param externalBatchId  (required)
     * @return GetByExternalIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public GetByExternalIdRequestBuilder getByExternalId(String externalBatchId) throws IllegalArgumentException {
        if (externalBatchId == null) throw new IllegalArgumentException("\"externalBatchId\" is required but got null");
            

        return new GetByExternalIdRequestBuilder(externalBatchId);
    }
    private okhttp3.Call getByIdCall(String batchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/batches/{batch_id}"
            .replace("{" + "batch_id" + "}", localVarApiClient.escapeString(batchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String batchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchId' is set
        if (batchId == null) {
            throw new ApiException("Missing the required parameter 'batchId' when calling getById(Async)");
        }

        return getByIdCall(batchId, _callback);

    }


    private ApiResponse<Batch> getByIdWithHttpInfo(String batchId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(batchId, null);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String batchId, final ApiCallback<Batch> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(batchId, _callback);
        Type localVarReturnType = new TypeToken<Batch>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String batchId;

        private GetByIdRequestBuilder(String batchId) {
            this.batchId = batchId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(batchId, _callback);
        }


        /**
         * Execute getById request
         * @return Batch
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public Batch execute() throws ApiException {
            ApiResponse<Batch> localVarResp = getByIdWithHttpInfo(batchId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;Batch&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Batch> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(batchId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Batch> _callback) throws ApiException {
            return getByIdAsync(batchId, _callback);
        }
    }

    /**
     * Get Batch By ID
     * Get Batch By ID
     * @param batchId Batch ID (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String batchId) throws IllegalArgumentException {
        if (batchId == null) throw new IllegalArgumentException("\"batchId\" is required but got null");
            if (batchId != null && batchId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for batchId. Length must be greater than or equal to 1.");
            }

        return new GetByIdRequestBuilder(batchId);
    }
    private okhttp3.Call getErrorsCall(String batchId, Integer page, Integer pagesize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/batches/{batch_id}/errors"
            .replace("{" + "batch_id" + "}", localVarApiClient.escapeString(batchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pagesize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagesize", pagesize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getErrorsValidateBeforeCall(String batchId, Integer page, Integer pagesize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchId' is set
        if (batchId == null) {
            throw new ApiException("Missing the required parameter 'batchId' when calling getErrors(Async)");
        }

        return getErrorsCall(batchId, page, pagesize, _callback);

    }


    private ApiResponse<ListBatchErrorsResponseBody> getErrorsWithHttpInfo(String batchId, Integer page, Integer pagesize) throws ApiException {
        okhttp3.Call localVarCall = getErrorsValidateBeforeCall(batchId, page, pagesize, null);
        Type localVarReturnType = new TypeToken<ListBatchErrorsResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getErrorsAsync(String batchId, Integer page, Integer pagesize, final ApiCallback<ListBatchErrorsResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getErrorsValidateBeforeCall(batchId, page, pagesize, _callback);
        Type localVarReturnType = new TypeToken<ListBatchErrorsResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetErrorsRequestBuilder {
        private final String batchId;
        private Integer page;
        private Integer pagesize;

        private GetErrorsRequestBuilder(String batchId) {
            this.batchId = batchId;
        }

        /**
         * Set page
         * @param page Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)
         * @return GetErrorsRequestBuilder
         */
        public GetErrorsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pagesize
         * @param pagesize  (optional)
         * @return GetErrorsRequestBuilder
         */
        public GetErrorsRequestBuilder pagesize(Integer pagesize) {
            this.pagesize = pagesize;
            return this;
        }
        
        /**
         * Build call for getErrors
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getErrorsCall(batchId, page, pagesize, _callback);
        }


        /**
         * Execute getErrors request
         * @return ListBatchErrorsResponseBody
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ListBatchErrorsResponseBody execute() throws ApiException {
            ApiResponse<ListBatchErrorsResponseBody> localVarResp = getErrorsWithHttpInfo(batchId, page, pagesize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getErrors request with HTTP info returned
         * @return ApiResponse&lt;ListBatchErrorsResponseBody&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListBatchErrorsResponseBody> executeWithHttpInfo() throws ApiException {
            return getErrorsWithHttpInfo(batchId, page, pagesize);
        }

        /**
         * Execute getErrors request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListBatchErrorsResponseBody> _callback) throws ApiException {
            return getErrorsAsync(batchId, page, pagesize, _callback);
        }
    }

    /**
     * Get Batch Errors
     * Error handling in batches are handled differently than in a single synchronous request. You must retrieve the status of your batch by [getting a batch](https://www.shipengine.com/docs/reference/get-batch-by-id/) and getting an overview of the statuses or you can list errors directly here below to get detailed information about the errors. 
     * @param batchId Batch ID (required)
     * @return GetErrorsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public GetErrorsRequestBuilder getErrors(String batchId) throws IllegalArgumentException {
        if (batchId == null) throw new IllegalArgumentException("\"batchId\" is required but got null");
            if (batchId != null && batchId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for batchId. Length must be greater than or equal to 1.");
            }

        return new GetErrorsRequestBuilder(batchId);
    }
    private okhttp3.Call removeFromBatchCall(String batchId, ModifyBatch modifyBatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = modifyBatch;

        // create path and map variables
        String localVarPath = "/v1/batches/{batch_id}/remove"
            .replace("{" + "batch_id" + "}", localVarApiClient.escapeString(batchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeFromBatchValidateBeforeCall(String batchId, ModifyBatch modifyBatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'batchId' is set
        if (batchId == null) {
            throw new ApiException("Missing the required parameter 'batchId' when calling removeFromBatch(Async)");
        }

        // verify the required parameter 'modifyBatch' is set
        if (modifyBatch == null) {
            throw new ApiException("Missing the required parameter 'modifyBatch' when calling removeFromBatch(Async)");
        }

        return removeFromBatchCall(batchId, modifyBatch, _callback);

    }


    private ApiResponse<String> removeFromBatchWithHttpInfo(String batchId, ModifyBatch modifyBatch) throws ApiException {
        okhttp3.Call localVarCall = removeFromBatchValidateBeforeCall(batchId, modifyBatch, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeFromBatchAsync(String batchId, ModifyBatch modifyBatch, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeFromBatchValidateBeforeCall(batchId, modifyBatch, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveFromBatchRequestBuilder {
        private final String batchId;
        private List<String> shipmentIds;
        private List<String> rateIds;

        private RemoveFromBatchRequestBuilder(String batchId) {
            this.batchId = batchId;
        }

        /**
         * Set shipmentIds
         * @param shipmentIds The Shipment Ids to be modified on the batch (optional)
         * @return RemoveFromBatchRequestBuilder
         */
        public RemoveFromBatchRequestBuilder shipmentIds(List<String> shipmentIds) {
            this.shipmentIds = shipmentIds;
            return this;
        }
        
        /**
         * Set rateIds
         * @param rateIds Array of Rate IDs to be modifed on the batch (optional)
         * @return RemoveFromBatchRequestBuilder
         */
        public RemoveFromBatchRequestBuilder rateIds(List<String> rateIds) {
            this.rateIds = rateIds;
            return this;
        }
        
        /**
         * Build call for removeFromBatch
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ModifyBatch modifyBatch = buildBodyParams();
            return removeFromBatchCall(batchId, modifyBatch, _callback);
        }

        private ModifyBatch buildBodyParams() {
            ModifyBatch modifyBatch = new ModifyBatch();
            modifyBatch.shipmentIds(this.shipmentIds);
            modifyBatch.rateIds(this.rateIds);
            return modifyBatch;
        }

        /**
         * Execute removeFromBatch request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ModifyBatch modifyBatch = buildBodyParams();
            ApiResponse<String> localVarResp = removeFromBatchWithHttpInfo(batchId, modifyBatch);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeFromBatch request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            ModifyBatch modifyBatch = buildBodyParams();
            return removeFromBatchWithHttpInfo(batchId, modifyBatch);
        }

        /**
         * Execute removeFromBatch request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            ModifyBatch modifyBatch = buildBodyParams();
            return removeFromBatchAsync(batchId, modifyBatch, _callback);
        }
    }

    /**
     * Remove From Batch
     * Remove a shipment or rate from a batch
     * @param batchId Batch ID (required)
     * @param modifyBatch  (required)
     * @return RemoveFromBatchRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
     </table>
     */
    public RemoveFromBatchRequestBuilder removeFromBatch(String batchId) throws IllegalArgumentException {
        if (batchId == null) throw new IllegalArgumentException("\"batchId\" is required but got null");
            if (batchId != null && batchId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for batchId. Length must be greater than or equal to 1.");
            }

        return new RemoveFromBatchRequestBuilder(batchId);
    }
}
