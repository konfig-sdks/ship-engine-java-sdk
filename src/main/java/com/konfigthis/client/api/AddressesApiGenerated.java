/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202403202303
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddressValidationResult;
import com.konfigthis.client.model.ParseAddressRequestBody;
import com.konfigthis.client.model.ParseAddressResponseBody;
import com.konfigthis.client.model.PartialAddress;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AddressesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AddressesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AddressesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"API-Key\" is required but no API key was provided. Please set \"API-Key\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addressCall(ParseAddressRequestBody parseAddressRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parseAddressRequestBody;

        // create path and map variables
        String localVarPath = "/v1/addresses/recognize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addressValidateBeforeCall(ParseAddressRequestBody parseAddressRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'parseAddressRequestBody' is set
        if (parseAddressRequestBody == null) {
            throw new ApiException("Missing the required parameter 'parseAddressRequestBody' when calling address(Async)");
        }

        return addressCall(parseAddressRequestBody, _callback);

    }


    private ApiResponse<ParseAddressResponseBody> addressWithHttpInfo(ParseAddressRequestBody parseAddressRequestBody) throws ApiException {
        okhttp3.Call localVarCall = addressValidateBeforeCall(parseAddressRequestBody, null);
        Type localVarReturnType = new TypeToken<ParseAddressResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addressAsync(ParseAddressRequestBody parseAddressRequestBody, final ApiCallback<ParseAddressResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = addressValidateBeforeCall(parseAddressRequestBody, _callback);
        Type localVarReturnType = new TypeToken<ParseAddressResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddressRequestBuilder {
        private final String text;
        private PartialAddress address;

        private AddressRequestBuilder(String text) {
            this.text = text;
        }

        /**
         * Set address
         * @param address You can optionally provide any already-known address values. For example, you may already know the recipient&#39;s name, city, and country, and only want to parse the street address into separate lines.  (optional)
         * @return AddressRequestBuilder
         */
        public AddressRequestBuilder address(PartialAddress address) {
            this.address = address;
            return this;
        }
        
        /**
         * Build call for address
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the parsed address, as well as a confidence score and a list of all the entities that were recognized in the text.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ParseAddressRequestBody parseAddressRequestBody = buildBodyParams();
            return addressCall(parseAddressRequestBody, _callback);
        }

        private ParseAddressRequestBody buildBodyParams() {
            ParseAddressRequestBody parseAddressRequestBody = new ParseAddressRequestBody();
            parseAddressRequestBody.text(this.text);
            parseAddressRequestBody.address(this.address);
            return parseAddressRequestBody;
        }

        /**
         * Execute address request
         * @return ParseAddressResponseBody
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the parsed address, as well as a confidence score and a list of all the entities that were recognized in the text.  </td><td>  -  </td></tr>
         </table>
         */
        public ParseAddressResponseBody execute() throws ApiException {
            ParseAddressRequestBody parseAddressRequestBody = buildBodyParams();
            ApiResponse<ParseAddressResponseBody> localVarResp = addressWithHttpInfo(parseAddressRequestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute address request with HTTP info returned
         * @return ApiResponse&lt;ParseAddressResponseBody&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the parsed address, as well as a confidence score and a list of all the entities that were recognized in the text.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ParseAddressResponseBody> executeWithHttpInfo() throws ApiException {
            ParseAddressRequestBody parseAddressRequestBody = buildBodyParams();
            return addressWithHttpInfo(parseAddressRequestBody);
        }

        /**
         * Execute address request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the parsed address, as well as a confidence score and a list of all the entities that were recognized in the text.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ParseAddressResponseBody> _callback) throws ApiException {
            ParseAddressRequestBody parseAddressRequestBody = buildBodyParams();
            return addressAsync(parseAddressRequestBody, _callback);
        }
    }

    /**
     * Parse an address
     * The address-recognition API makes it easy for you to extract address data from unstructured text, including the recipient name, line 1, line 2, city, postal code, and more.  Data often enters your system as unstructured text (for example: emails, SMS messages, support tickets, or other documents). ShipEngine&#39;s address-recognition API helps you extract meaningful, structured data from this unstructured text. The parsed address data is returned in the same structure that&#39;s used for other ShipEngine APIs, such as address validation, rate quotes, and shipping labels.  &gt; **Note:** Address recognition is currently supported for the United States, Canada, Australia, New Zealand, the United Kingdom, and Ireland. 
     * @param parseAddressRequestBody The only required field is &#x60;text&#x60;, which is the text to be parsed. You can optionally also provide an &#x60;address&#x60; containing already-known values. For example, you may already know the recipient&#39;s name, city, and country, and only want to parse the street address into separate lines.  (required)
     * @return AddressRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the parsed address, as well as a confidence score and a list of all the entities that were recognized in the text.  </td><td>  -  </td></tr>
     </table>
     */
    public AddressRequestBuilder address(String text) throws IllegalArgumentException {
        if (text == null) throw new IllegalArgumentException("\"text\" is required but got null");
            if (text != null && text.length() < 1) {
              throw new IllegalArgumentException("Invalid value for text. Length must be greater than or equal to 1.");
            }

        return new AddressRequestBuilder(text);
    }
    private okhttp3.Call address_0Call(List<PartialAddress> partialAddress, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = partialAddress;

        // create path and map variables
        String localVarPath = "/v1/addresses/validate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call address_0ValidateBeforeCall(List<PartialAddress> partialAddress, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'partialAddress' is set
        if (partialAddress == null) {
            throw new ApiException("Missing the required parameter 'partialAddress' when calling address_0(Async)");
        }

        return address_0Call(partialAddress, _callback);

    }


    private ApiResponse<List<AddressValidationResult>> address_0WithHttpInfo(List<PartialAddress> partialAddress) throws ApiException {
        okhttp3.Call localVarCall = address_0ValidateBeforeCall(partialAddress, null);
        Type localVarReturnType = new TypeToken<List<AddressValidationResult>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call address_0Async(List<PartialAddress> partialAddress, final ApiCallback<List<AddressValidationResult>> _callback) throws ApiException {

        okhttp3.Call localVarCall = address_0ValidateBeforeCall(partialAddress, _callback);
        Type localVarReturnType = new TypeToken<List<AddressValidationResult>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Address0RequestBuilder {
        private List<PartialAddress> partialAddress;

        private Address0RequestBuilder() {
        }

        /**
         * Set partialAddress
         * @param partialAddress  (optional)
         * @return Address0RequestBuilder
         */
        public Address0RequestBuilder partialAddress(List<PartialAddress> partialAddress) {
            this.partialAddress = partialAddress;
            return this;
        }

        /**
         * Build call for address_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<PartialAddress> partialAddress = buildBodyParams();
            return address_0Call(partialAddress, _callback);
        }

        private List<PartialAddress> buildBodyParams() {
            return this.partialAddress;
        }

        /**
         * Execute address_0 request
         * @return List&lt;AddressValidationResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public List<AddressValidationResult> execute() throws ApiException {
            List<PartialAddress> partialAddress = buildBodyParams();
            ApiResponse<List<AddressValidationResult>> localVarResp = address_0WithHttpInfo(partialAddress);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute address_0 request with HTTP info returned
         * @return ApiResponse&lt;List&lt;AddressValidationResult&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<AddressValidationResult>> executeWithHttpInfo() throws ApiException {
            List<PartialAddress> partialAddress = buildBodyParams();
            return address_0WithHttpInfo(partialAddress);
        }

        /**
         * Execute address_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<AddressValidationResult>> _callback) throws ApiException {
            List<PartialAddress> partialAddress = buildBodyParams();
            return address_0Async(partialAddress, _callback);
        }
    }

    /**
     * Validate An Address
     * Address validation ensures accurate addresses and can lead to reduced shipping costs by preventing address correction surcharges. ShipEngine cross references multiple databases to validate addresses and identify potential deliverability issues. 
     * @param partialAddress  (required)
     * @return Address0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public Address0RequestBuilder address_0() throws IllegalArgumentException {
        return new Address0RequestBuilder();
    }
}
