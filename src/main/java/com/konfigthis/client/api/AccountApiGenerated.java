/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202403202303
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AccountSettings;
import com.konfigthis.client.model.AccountSettingsImages;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.PagedListResponseBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class AccountApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public AccountApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"API-Key\" is required but no API key was provided. Please set \"API-Key\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createImageCall(AccountSettingsImages accountSettingsImages, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountSettingsImages;

        // create path and map variables
        String localVarPath = "/v1/account/settings/images";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createImageValidateBeforeCall(AccountSettingsImages accountSettingsImages, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accountSettingsImages' is set
        if (accountSettingsImages == null) {
            throw new ApiException("Missing the required parameter 'accountSettingsImages' when calling createImage(Async)");
        }

        return createImageCall(accountSettingsImages, _callback);

    }


    private ApiResponse<AccountSettingsImages> createImageWithHttpInfo(AccountSettingsImages accountSettingsImages) throws ApiException {
        okhttp3.Call localVarCall = createImageValidateBeforeCall(accountSettingsImages, null);
        Type localVarReturnType = new TypeToken<AccountSettingsImages>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createImageAsync(AccountSettingsImages accountSettingsImages, final ApiCallback<AccountSettingsImages> _callback) throws ApiException {

        okhttp3.Call localVarCall = createImageValidateBeforeCall(accountSettingsImages, _callback);
        Type localVarReturnType = new TypeToken<AccountSettingsImages>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateImageRequestBuilder {
        private String labelImageId;
        private String name;
        private Boolean isDefault;
        private String imageContentType;
        private String imageData;
        private OffsetDateTime createdAt;
        private OffsetDateTime modifiedAt;

        private CreateImageRequestBuilder() {
        }

        /**
         * Set labelImageId
         * @param labelImageId Used to identify an image resource. (optional)
         * @return CreateImageRequestBuilder
         */
        public CreateImageRequestBuilder labelImageId(String labelImageId) {
            this.labelImageId = labelImageId;
            return this;
        }
        
        /**
         * Set name
         * @param name A human readable name for the image.  (optional)
         * @return CreateImageRequestBuilder
         */
        public CreateImageRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set isDefault
         * @param isDefault Indicates whether this image is set as default.  (optional)
         * @return CreateImageRequestBuilder
         */
        public CreateImageRequestBuilder isDefault(Boolean isDefault) {
            this.isDefault = isDefault;
            return this;
        }
        
        /**
         * Set imageContentType
         * @param imageContentType The image type (optional)
         * @return CreateImageRequestBuilder
         */
        public CreateImageRequestBuilder imageContentType(String imageContentType) {
            this.imageContentType = imageContentType;
            return this;
        }
        
        /**
         * Set imageData
         * @param imageData A base64 encoded string representation of the image.  (optional)
         * @return CreateImageRequestBuilder
         */
        public CreateImageRequestBuilder imageData(String imageData) {
            this.imageData = imageData;
            return this;
        }
        
        /**
         * Set createdAt
         * @param createdAt An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date and time.  (optional)
         * @return CreateImageRequestBuilder
         */
        public CreateImageRequestBuilder createdAt(OffsetDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }
        
        /**
         * Set modifiedAt
         * @param modifiedAt An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date and time.  (optional)
         * @return CreateImageRequestBuilder
         */
        public CreateImageRequestBuilder modifiedAt(OffsetDateTime modifiedAt) {
            this.modifiedAt = modifiedAt;
            return this;
        }
        
        /**
         * Build call for createImage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AccountSettingsImages accountSettingsImages = buildBodyParams();
            return createImageCall(accountSettingsImages, _callback);
        }

        private AccountSettingsImages buildBodyParams() {
            AccountSettingsImages accountSettingsImages = new AccountSettingsImages();
            accountSettingsImages.labelImageId(this.labelImageId);
            accountSettingsImages.name(this.name);
            accountSettingsImages.isDefault(this.isDefault);
            if (this.imageContentType != null)
            accountSettingsImages.imageContentType(AccountSettingsImages.ImageContentTypeEnum.fromValue(this.imageContentType));
            accountSettingsImages.imageData(this.imageData);
            accountSettingsImages.createdAt(this.createdAt);
            accountSettingsImages.modifiedAt(this.modifiedAt);
            return accountSettingsImages;
        }

        /**
         * Execute createImage request
         * @return AccountSettingsImages
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
         </table>
         */
        public AccountSettingsImages execute() throws ApiException {
            AccountSettingsImages accountSettingsImages = buildBodyParams();
            ApiResponse<AccountSettingsImages> localVarResp = createImageWithHttpInfo(accountSettingsImages);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createImage request with HTTP info returned
         * @return ApiResponse&lt;AccountSettingsImages&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccountSettingsImages> executeWithHttpInfo() throws ApiException {
            AccountSettingsImages accountSettingsImages = buildBodyParams();
            return createImageWithHttpInfo(accountSettingsImages);
        }

        /**
         * Execute createImage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccountSettingsImages> _callback) throws ApiException {
            AccountSettingsImages accountSettingsImages = buildBodyParams();
            return createImageAsync(accountSettingsImages, _callback);
        }
    }

    /**
     * Create an Account Image
     * Create an Account Image
     * @param accountSettingsImages  (required)
     * @return CreateImageRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
     </table>
     */
    public CreateImageRequestBuilder createImage() throws IllegalArgumentException {
        return new CreateImageRequestBuilder();
    }
    private okhttp3.Call deleteImageByIdCall(String labelImageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/settings/images/{label_image_id}"
            .replace("{" + "label_image_id" + "}", localVarApiClient.escapeString(labelImageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteImageByIdValidateBeforeCall(String labelImageId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'labelImageId' is set
        if (labelImageId == null) {
            throw new ApiException("Missing the required parameter 'labelImageId' when calling deleteImageById(Async)");
        }

        return deleteImageByIdCall(labelImageId, _callback);

    }


    private ApiResponse<String> deleteImageByIdWithHttpInfo(String labelImageId) throws ApiException {
        okhttp3.Call localVarCall = deleteImageByIdValidateBeforeCall(labelImageId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteImageByIdAsync(String labelImageId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteImageByIdValidateBeforeCall(labelImageId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteImageByIdRequestBuilder {
        private final String labelImageId;

        private DeleteImageByIdRequestBuilder(String labelImageId) {
            this.labelImageId = labelImageId;
        }

        /**
         * Build call for deleteImageById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteImageByIdCall(labelImageId, _callback);
        }


        /**
         * Execute deleteImageById request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = deleteImageByIdWithHttpInfo(labelImageId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteImageById request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return deleteImageByIdWithHttpInfo(labelImageId);
        }

        /**
         * Execute deleteImageById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return deleteImageByIdAsync(labelImageId, _callback);
        }
    }

    /**
     * Delete Account Image By Id
     * Delete Account Image By Id
     * @param labelImageId Label Image Id (required)
     * @return DeleteImageByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteImageByIdRequestBuilder deleteImageById(String labelImageId) throws IllegalArgumentException {
        if (labelImageId == null) throw new IllegalArgumentException("\"labelImageId\" is required but got null");
            if (labelImageId != null && labelImageId.length() < 4) {
              throw new IllegalArgumentException("Invalid value for labelImageId. Length must be greater than or equal to 4.");
            }

        return new DeleteImageByIdRequestBuilder(labelImageId);
    }
    private okhttp3.Call getImageByIdCall(String labelImageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/settings/images/{label_image_id}"
            .replace("{" + "label_image_id" + "}", localVarApiClient.escapeString(labelImageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImageByIdValidateBeforeCall(String labelImageId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'labelImageId' is set
        if (labelImageId == null) {
            throw new ApiException("Missing the required parameter 'labelImageId' when calling getImageById(Async)");
        }

        return getImageByIdCall(labelImageId, _callback);

    }


    private ApiResponse<AccountSettingsImages> getImageByIdWithHttpInfo(String labelImageId) throws ApiException {
        okhttp3.Call localVarCall = getImageByIdValidateBeforeCall(labelImageId, null);
        Type localVarReturnType = new TypeToken<AccountSettingsImages>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getImageByIdAsync(String labelImageId, final ApiCallback<AccountSettingsImages> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImageByIdValidateBeforeCall(labelImageId, _callback);
        Type localVarReturnType = new TypeToken<AccountSettingsImages>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetImageByIdRequestBuilder {
        private final String labelImageId;

        private GetImageByIdRequestBuilder(String labelImageId) {
            this.labelImageId = labelImageId;
        }

        /**
         * Build call for getImageById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getImageByIdCall(labelImageId, _callback);
        }


        /**
         * Execute getImageById request
         * @return AccountSettingsImages
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public AccountSettingsImages execute() throws ApiException {
            ApiResponse<AccountSettingsImages> localVarResp = getImageByIdWithHttpInfo(labelImageId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getImageById request with HTTP info returned
         * @return ApiResponse&lt;AccountSettingsImages&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccountSettingsImages> executeWithHttpInfo() throws ApiException {
            return getImageByIdWithHttpInfo(labelImageId);
        }

        /**
         * Execute getImageById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccountSettingsImages> _callback) throws ApiException {
            return getImageByIdAsync(labelImageId, _callback);
        }
    }

    /**
     * Get Account Image By ID
     * Retrieve information for an account image.
     * @param labelImageId Label Image Id (required)
     * @return GetImageByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public GetImageByIdRequestBuilder getImageById(String labelImageId) throws IllegalArgumentException {
        if (labelImageId == null) throw new IllegalArgumentException("\"labelImageId\" is required but got null");
            if (labelImageId != null && labelImageId.length() < 4) {
              throw new IllegalArgumentException("Invalid value for labelImageId. Length must be greater than or equal to 4.");
            }

        return new GetImageByIdRequestBuilder(labelImageId);
    }
    private okhttp3.Call listImagesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/settings/images";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listImagesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listImagesCall(_callback);

    }


    private ApiResponse<PagedListResponseBody> listImagesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listImagesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<PagedListResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listImagesAsync(final ApiCallback<PagedListResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listImagesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<PagedListResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListImagesRequestBuilder {

        private ListImagesRequestBuilder() {
        }

        /**
         * Build call for listImages
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listImagesCall(_callback);
        }


        /**
         * Execute listImages request
         * @return PagedListResponseBody
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public PagedListResponseBody execute() throws ApiException {
            ApiResponse<PagedListResponseBody> localVarResp = listImagesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listImages request with HTTP info returned
         * @return ApiResponse&lt;PagedListResponseBody&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagedListResponseBody> executeWithHttpInfo() throws ApiException {
            return listImagesWithHttpInfo();
        }

        /**
         * Execute listImages request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagedListResponseBody> _callback) throws ApiException {
            return listImagesAsync(_callback);
        }
    }

    /**
     * List Account Images
     * List all account images for the ShipEngine account
     * @return ListImagesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public ListImagesRequestBuilder listImages() throws IllegalArgumentException {
        return new ListImagesRequestBuilder();
    }
    private okhttp3.Call listSettingsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/account/settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSettingsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listSettingsCall(_callback);

    }


    private ApiResponse<AccountSettings> listSettingsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listSettingsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<AccountSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listSettingsAsync(final ApiCallback<AccountSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSettingsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<AccountSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListSettingsRequestBuilder {

        private ListSettingsRequestBuilder() {
        }

        /**
         * Build call for listSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listSettingsCall(_callback);
        }


        /**
         * Execute listSettings request
         * @return AccountSettings
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public AccountSettings execute() throws ApiException {
            ApiResponse<AccountSettings> localVarResp = listSettingsWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listSettings request with HTTP info returned
         * @return ApiResponse&lt;AccountSettings&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccountSettings> executeWithHttpInfo() throws ApiException {
            return listSettingsWithHttpInfo();
        }

        /**
         * Execute listSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccountSettings> _callback) throws ApiException {
            return listSettingsAsync(_callback);
        }
    }

    /**
     * List Account Settings
     * List all account settings for the ShipEngine account
     * @return ListSettingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public ListSettingsRequestBuilder listSettings() throws IllegalArgumentException {
        return new ListSettingsRequestBuilder();
    }
    private okhttp3.Call updateImageByIdCall(String labelImageId, AccountSettingsImages accountSettingsImages, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = accountSettingsImages;

        // create path and map variables
        String localVarPath = "/v1/account/settings/images/{label_image_id}"
            .replace("{" + "label_image_id" + "}", localVarApiClient.escapeString(labelImageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateImageByIdValidateBeforeCall(String labelImageId, AccountSettingsImages accountSettingsImages, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'labelImageId' is set
        if (labelImageId == null) {
            throw new ApiException("Missing the required parameter 'labelImageId' when calling updateImageById(Async)");
        }

        // verify the required parameter 'accountSettingsImages' is set
        if (accountSettingsImages == null) {
            throw new ApiException("Missing the required parameter 'accountSettingsImages' when calling updateImageById(Async)");
        }

        return updateImageByIdCall(labelImageId, accountSettingsImages, _callback);

    }


    private ApiResponse<String> updateImageByIdWithHttpInfo(String labelImageId, AccountSettingsImages accountSettingsImages) throws ApiException {
        okhttp3.Call localVarCall = updateImageByIdValidateBeforeCall(labelImageId, accountSettingsImages, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateImageByIdAsync(String labelImageId, AccountSettingsImages accountSettingsImages, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateImageByIdValidateBeforeCall(labelImageId, accountSettingsImages, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateImageByIdRequestBuilder {
        private final String labelImageId;
        private String labelImageId;
        private String name;
        private Boolean isDefault;
        private String imageContentType;
        private String imageData;
        private OffsetDateTime createdAt;
        private OffsetDateTime modifiedAt;

        private UpdateImageByIdRequestBuilder(String labelImageId) {
            this.labelImageId = labelImageId;
        }

        /**
         * Set labelImageId
         * @param labelImageId Used to identify an image resource. (optional)
         * @return UpdateImageByIdRequestBuilder
         */
        public UpdateImageByIdRequestBuilder labelImageId(String labelImageId) {
            this.labelImageId = labelImageId;
            return this;
        }
        
        /**
         * Set name
         * @param name A human readable name for the image.  (optional)
         * @return UpdateImageByIdRequestBuilder
         */
        public UpdateImageByIdRequestBuilder name(String name) {
            this.name = name;
            return this;
        }
        
        /**
         * Set isDefault
         * @param isDefault Indicates whether this image is set as default.  (optional)
         * @return UpdateImageByIdRequestBuilder
         */
        public UpdateImageByIdRequestBuilder isDefault(Boolean isDefault) {
            this.isDefault = isDefault;
            return this;
        }
        
        /**
         * Set imageContentType
         * @param imageContentType The image type (optional)
         * @return UpdateImageByIdRequestBuilder
         */
        public UpdateImageByIdRequestBuilder imageContentType(String imageContentType) {
            this.imageContentType = imageContentType;
            return this;
        }
        
        /**
         * Set imageData
         * @param imageData A base64 encoded string representation of the image.  (optional)
         * @return UpdateImageByIdRequestBuilder
         */
        public UpdateImageByIdRequestBuilder imageData(String imageData) {
            this.imageData = imageData;
            return this;
        }
        
        /**
         * Set createdAt
         * @param createdAt An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date and time.  (optional)
         * @return UpdateImageByIdRequestBuilder
         */
        public UpdateImageByIdRequestBuilder createdAt(OffsetDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }
        
        /**
         * Set modifiedAt
         * @param modifiedAt An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date and time.  (optional)
         * @return UpdateImageByIdRequestBuilder
         */
        public UpdateImageByIdRequestBuilder modifiedAt(OffsetDateTime modifiedAt) {
            this.modifiedAt = modifiedAt;
            return this;
        }
        
        /**
         * Build call for updateImageById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            AccountSettingsImages accountSettingsImages = buildBodyParams();
            return updateImageByIdCall(labelImageId, accountSettingsImages, _callback);
        }

        private AccountSettingsImages buildBodyParams() {
            AccountSettingsImages accountSettingsImages = new AccountSettingsImages();
            accountSettingsImages.labelImageId(this.labelImageId);
            accountSettingsImages.name(this.name);
            accountSettingsImages.isDefault(this.isDefault);
            if (this.imageContentType != null)
            accountSettingsImages.imageContentType(AccountSettingsImages.ImageContentTypeEnum.fromValue(this.imageContentType));
            accountSettingsImages.imageData(this.imageData);
            accountSettingsImages.createdAt(this.createdAt);
            accountSettingsImages.modifiedAt(this.modifiedAt);
            return accountSettingsImages;
        }

        /**
         * Execute updateImageById request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            AccountSettingsImages accountSettingsImages = buildBodyParams();
            ApiResponse<String> localVarResp = updateImageByIdWithHttpInfo(labelImageId, accountSettingsImages);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateImageById request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            AccountSettingsImages accountSettingsImages = buildBodyParams();
            return updateImageByIdWithHttpInfo(labelImageId, accountSettingsImages);
        }

        /**
         * Execute updateImageById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            AccountSettingsImages accountSettingsImages = buildBodyParams();
            return updateImageByIdAsync(labelImageId, accountSettingsImages, _callback);
        }
    }

    /**
     * Update Account Image By ID
     * Update information for an account image.
     * @param labelImageId Label Image Id (required)
     * @param accountSettingsImages  (required)
     * @return UpdateImageByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateImageByIdRequestBuilder updateImageById(String labelImageId) throws IllegalArgumentException {
        if (labelImageId == null) throw new IllegalArgumentException("\"labelImageId\" is required but got null");
            if (labelImageId != null && labelImageId.length() < 4) {
              throw new IllegalArgumentException("Invalid value for labelImageId. Length must be greater than or equal to 4.");
            }

        return new UpdateImageByIdRequestBuilder(labelImageId);
    }
}
