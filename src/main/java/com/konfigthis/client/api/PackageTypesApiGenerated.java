/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202403202303
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Dimensions;
import com.konfigthis.client.model.ListPackageTypesResponseBody;
import com.konfigthis.client.model.PackageType;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PackageTypesApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PackageTypesApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PackageTypesApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"API-Key\" is required but no API key was provided. Please set \"API-Key\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createCustomPackageTypeCall(PackageType packageType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = packageType;

        // create path and map variables
        String localVarPath = "/v1/packages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCustomPackageTypeValidateBeforeCall(PackageType packageType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'packageType' is set
        if (packageType == null) {
            throw new ApiException("Missing the required parameter 'packageType' when calling createCustomPackageType(Async)");
        }

        return createCustomPackageTypeCall(packageType, _callback);

    }


    private ApiResponse<PackageType> createCustomPackageTypeWithHttpInfo(PackageType packageType) throws ApiException {
        okhttp3.Call localVarCall = createCustomPackageTypeValidateBeforeCall(packageType, null);
        Type localVarReturnType = new TypeToken<PackageType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createCustomPackageTypeAsync(PackageType packageType, final ApiCallback<PackageType> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCustomPackageTypeValidateBeforeCall(packageType, _callback);
        Type localVarReturnType = new TypeToken<PackageType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateCustomPackageTypeRequestBuilder {
        private final String packageCode;
        private final String name;
        private String description;
        private String packageId;
        private Dimensions dimensions;

        private CreateCustomPackageTypeRequestBuilder(String packageCode, String name) {
            this.packageCode = packageCode;
            this.name = name;
        }

        /**
         * Set description
         * @param description Provides a helpful description for the custom package. (optional)
         * @return CreateCustomPackageTypeRequestBuilder
         */
        public CreateCustomPackageTypeRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set packageId
         * @param packageId A string that uniquely identifies a ShipEngine resource, such as a carrier, label, shipment, etc. (optional)
         * @return CreateCustomPackageTypeRequestBuilder
         */
        public CreateCustomPackageTypeRequestBuilder packageId(String packageId) {
            this.packageId = packageId;
            return this;
        }
        
        /**
         * Set dimensions
         * @param dimensions The custom dimensions for the package. (optional)
         * @return CreateCustomPackageTypeRequestBuilder
         */
        public CreateCustomPackageTypeRequestBuilder dimensions(Dimensions dimensions) {
            this.dimensions = dimensions;
            return this;
        }
        
        /**
         * Build call for createCustomPackageType
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PackageType packageType = buildBodyParams();
            return createCustomPackageTypeCall(packageType, _callback);
        }

        private PackageType buildBodyParams() {
            PackageType packageType = new PackageType();
            packageType.description(this.description);
            packageType.packageId(this.packageId);
            packageType.packageCode(this.packageCode);
            packageType.name(this.name);
            packageType.dimensions(this.dimensions);
            return packageType;
        }

        /**
         * Execute createCustomPackageType request
         * @return PackageType
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public PackageType execute() throws ApiException {
            PackageType packageType = buildBodyParams();
            ApiResponse<PackageType> localVarResp = createCustomPackageTypeWithHttpInfo(packageType);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createCustomPackageType request with HTTP info returned
         * @return ApiResponse&lt;PackageType&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PackageType> executeWithHttpInfo() throws ApiException {
            PackageType packageType = buildBodyParams();
            return createCustomPackageTypeWithHttpInfo(packageType);
        }

        /**
         * Execute createCustomPackageType request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PackageType> _callback) throws ApiException {
            PackageType packageType = buildBodyParams();
            return createCustomPackageTypeAsync(packageType, _callback);
        }
    }

    /**
     * Create Custom Package Type
     * Create a custom package type to better assist in getting accurate rate estimates
     * @param packageType  (required)
     * @return CreateCustomPackageTypeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public CreateCustomPackageTypeRequestBuilder createCustomPackageType(String packageCode, String name) throws IllegalArgumentException {
        if (packageCode == null) throw new IllegalArgumentException("\"packageCode\" is required but got null");
            if (packageCode != null && packageCode.length() < 1) {
              throw new IllegalArgumentException("Invalid value for packageCode. Length must be greater than or equal to 1.");
            }

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            if (name != null && name.length() < 1) {
              throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
            }

        return new CreateCustomPackageTypeRequestBuilder(packageCode, name);
    }
    private okhttp3.Call deleteCustomPackageByIdCall(String packageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/packages/{package_id}"
            .replace("{" + "package_id" + "}", localVarApiClient.escapeString(packageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCustomPackageByIdValidateBeforeCall(String packageId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'packageId' is set
        if (packageId == null) {
            throw new ApiException("Missing the required parameter 'packageId' when calling deleteCustomPackageById(Async)");
        }

        return deleteCustomPackageByIdCall(packageId, _callback);

    }


    private ApiResponse<String> deleteCustomPackageByIdWithHttpInfo(String packageId) throws ApiException {
        okhttp3.Call localVarCall = deleteCustomPackageByIdValidateBeforeCall(packageId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteCustomPackageByIdAsync(String packageId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCustomPackageByIdValidateBeforeCall(packageId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteCustomPackageByIdRequestBuilder {
        private final String packageId;

        private DeleteCustomPackageByIdRequestBuilder(String packageId) {
            this.packageId = packageId;
        }

        /**
         * Build call for deleteCustomPackageById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteCustomPackageByIdCall(packageId, _callback);
        }


        /**
         * Execute deleteCustomPackageById request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = deleteCustomPackageByIdWithHttpInfo(packageId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteCustomPackageById request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return deleteCustomPackageByIdWithHttpInfo(packageId);
        }

        /**
         * Execute deleteCustomPackageById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return deleteCustomPackageByIdAsync(packageId, _callback);
        }
    }

    /**
     * Delete A Custom Package By ID
     * Delete a custom package using the ID
     * @param packageId Package ID (required)
     * @return DeleteCustomPackageByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteCustomPackageByIdRequestBuilder deleteCustomPackageById(String packageId) throws IllegalArgumentException {
        if (packageId == null) throw new IllegalArgumentException("\"packageId\" is required but got null");
            if (packageId != null && packageId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for packageId. Length must be greater than or equal to 1.");
            }

        return new DeleteCustomPackageByIdRequestBuilder(packageId);
    }
    private okhttp3.Call getByIdCall(String packageId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/packages/{package_id}"
            .replace("{" + "package_id" + "}", localVarApiClient.escapeString(packageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String packageId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'packageId' is set
        if (packageId == null) {
            throw new ApiException("Missing the required parameter 'packageId' when calling getById(Async)");
        }

        return getByIdCall(packageId, _callback);

    }


    private ApiResponse<PackageType> getByIdWithHttpInfo(String packageId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(packageId, null);
        Type localVarReturnType = new TypeToken<PackageType>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String packageId, final ApiCallback<PackageType> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(packageId, _callback);
        Type localVarReturnType = new TypeToken<PackageType>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String packageId;

        private GetByIdRequestBuilder(String packageId) {
            this.packageId = packageId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(packageId, _callback);
        }


        /**
         * Execute getById request
         * @return PackageType
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public PackageType execute() throws ApiException {
            ApiResponse<PackageType> localVarResp = getByIdWithHttpInfo(packageId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;PackageType&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PackageType> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(packageId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PackageType> _callback) throws ApiException {
            return getByIdAsync(packageId, _callback);
        }
    }

    /**
     * Get Custom Package Type By ID
     * Get Custom Package Type by ID
     * @param packageId Package ID (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String packageId) throws IllegalArgumentException {
        if (packageId == null) throw new IllegalArgumentException("\"packageId\" is required but got null");
            if (packageId != null && packageId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for packageId. Length must be greater than or equal to 1.");
            }

        return new GetByIdRequestBuilder(packageId);
    }
    private okhttp3.Call listCustomPackageTypesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/packages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCustomPackageTypesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listCustomPackageTypesCall(_callback);

    }


    private ApiResponse<ListPackageTypesResponseBody> listCustomPackageTypesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listCustomPackageTypesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ListPackageTypesResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listCustomPackageTypesAsync(final ApiCallback<ListPackageTypesResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCustomPackageTypesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ListPackageTypesResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListCustomPackageTypesRequestBuilder {

        private ListCustomPackageTypesRequestBuilder() {
        }

        /**
         * Build call for listCustomPackageTypes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listCustomPackageTypesCall(_callback);
        }


        /**
         * Execute listCustomPackageTypes request
         * @return ListPackageTypesResponseBody
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ListPackageTypesResponseBody execute() throws ApiException {
            ApiResponse<ListPackageTypesResponseBody> localVarResp = listCustomPackageTypesWithHttpInfo();
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listCustomPackageTypes request with HTTP info returned
         * @return ApiResponse&lt;ListPackageTypesResponseBody&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListPackageTypesResponseBody> executeWithHttpInfo() throws ApiException {
            return listCustomPackageTypesWithHttpInfo();
        }

        /**
         * Execute listCustomPackageTypes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListPackageTypesResponseBody> _callback) throws ApiException {
            return listCustomPackageTypesAsync(_callback);
        }
    }

    /**
     * List Custom Package Types
     * List the custom package types associated with the account
     * @return ListCustomPackageTypesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public ListCustomPackageTypesRequestBuilder listCustomPackageTypes() throws IllegalArgumentException {
        return new ListCustomPackageTypesRequestBuilder();
    }
    private okhttp3.Call updateCustomPackageTypeByIdCall(String packageId, PackageType packageType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = packageType;

        // create path and map variables
        String localVarPath = "/v1/packages/{package_id}"
            .replace("{" + "package_id" + "}", localVarApiClient.escapeString(packageId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCustomPackageTypeByIdValidateBeforeCall(String packageId, PackageType packageType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'packageId' is set
        if (packageId == null) {
            throw new ApiException("Missing the required parameter 'packageId' when calling updateCustomPackageTypeById(Async)");
        }

        // verify the required parameter 'packageType' is set
        if (packageType == null) {
            throw new ApiException("Missing the required parameter 'packageType' when calling updateCustomPackageTypeById(Async)");
        }

        return updateCustomPackageTypeByIdCall(packageId, packageType, _callback);

    }


    private ApiResponse<String> updateCustomPackageTypeByIdWithHttpInfo(String packageId, PackageType packageType) throws ApiException {
        okhttp3.Call localVarCall = updateCustomPackageTypeByIdValidateBeforeCall(packageId, packageType, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateCustomPackageTypeByIdAsync(String packageId, PackageType packageType, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCustomPackageTypeByIdValidateBeforeCall(packageId, packageType, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateCustomPackageTypeByIdRequestBuilder {
        private final String packageCode;
        private final String name;
        private final String packageId;
        private String description;
        private String packageId;
        private Dimensions dimensions;

        private UpdateCustomPackageTypeByIdRequestBuilder(String packageCode, String name, String packageId) {
            this.packageCode = packageCode;
            this.name = name;
            this.packageId = packageId;
        }

        /**
         * Set description
         * @param description Provides a helpful description for the custom package. (optional)
         * @return UpdateCustomPackageTypeByIdRequestBuilder
         */
        public UpdateCustomPackageTypeByIdRequestBuilder description(String description) {
            this.description = description;
            return this;
        }
        
        /**
         * Set packageId
         * @param packageId A string that uniquely identifies a ShipEngine resource, such as a carrier, label, shipment, etc. (optional)
         * @return UpdateCustomPackageTypeByIdRequestBuilder
         */
        public UpdateCustomPackageTypeByIdRequestBuilder packageId(String packageId) {
            this.packageId = packageId;
            return this;
        }
        
        /**
         * Set dimensions
         * @param dimensions The custom dimensions for the package. (optional)
         * @return UpdateCustomPackageTypeByIdRequestBuilder
         */
        public UpdateCustomPackageTypeByIdRequestBuilder dimensions(Dimensions dimensions) {
            this.dimensions = dimensions;
            return this;
        }
        
        /**
         * Build call for updateCustomPackageTypeById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PackageType packageType = buildBodyParams();
            return updateCustomPackageTypeByIdCall(packageId, packageType, _callback);
        }

        private PackageType buildBodyParams() {
            PackageType packageType = new PackageType();
            packageType.description(this.description);
            packageType.packageId(this.packageId);
            packageType.packageCode(this.packageCode);
            packageType.name(this.name);
            packageType.dimensions(this.dimensions);
            return packageType;
        }

        /**
         * Execute updateCustomPackageTypeById request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            PackageType packageType = buildBodyParams();
            ApiResponse<String> localVarResp = updateCustomPackageTypeByIdWithHttpInfo(packageId, packageType);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateCustomPackageTypeById request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            PackageType packageType = buildBodyParams();
            return updateCustomPackageTypeByIdWithHttpInfo(packageId, packageType);
        }

        /**
         * Execute updateCustomPackageTypeById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            PackageType packageType = buildBodyParams();
            return updateCustomPackageTypeByIdAsync(packageId, packageType, _callback);
        }
    }

    /**
     * Update Custom Package Type By ID
     * Update the custom package type object by ID
     * @param packageId Package ID (required)
     * @param packageType  (required)
     * @return UpdateCustomPackageTypeByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCustomPackageTypeByIdRequestBuilder updateCustomPackageTypeById(String packageCode, String name, String packageId) throws IllegalArgumentException {
        if (packageCode == null) throw new IllegalArgumentException("\"packageCode\" is required but got null");
            if (packageCode != null && packageCode.length() < 1) {
              throw new IllegalArgumentException("Invalid value for packageCode. Length must be greater than or equal to 1.");
            }

        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            if (name != null && name.length() < 1) {
              throw new IllegalArgumentException("Invalid value for name. Length must be greater than or equal to 1.");
            }

        if (packageId == null) throw new IllegalArgumentException("\"packageId\" is required but got null");
            if (packageId != null && packageId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for packageId. Length must be greater than or equal to 1.");
            }

        return new UpdateCustomPackageTypeByIdRequestBuilder(packageCode, name, packageId);
    }
}
