/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202403202303
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.CarrierName;
import com.konfigthis.client.model.CarrierNameWithSettings;
import com.konfigthis.client.model.ConnectCarrierResponseBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CarrierAccountsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CarrierAccountsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CarrierAccountsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"API-Key\" is required but no API key was provided. Please set \"API-Key\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call carrierCall(CarrierName carrierName, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/connections/carriers/{carrier_name}"
            .replace("{" + "carrier_name" + "}", localVarApiClient.escapeString(carrierName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call carrierValidateBeforeCall(CarrierName carrierName, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'carrierName' is set
        if (carrierName == null) {
            throw new ApiException("Missing the required parameter 'carrierName' when calling carrier(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling carrier(Async)");
        }

        return carrierCall(carrierName, body, _callback);

    }


    private ApiResponse<ConnectCarrierResponseBody> carrierWithHttpInfo(CarrierName carrierName, Object body) throws ApiException {
        okhttp3.Call localVarCall = carrierValidateBeforeCall(carrierName, body, null);
        Type localVarReturnType = new TypeToken<ConnectCarrierResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call carrierAsync(CarrierName carrierName, Object body, final ApiCallback<ConnectCarrierResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = carrierValidateBeforeCall(carrierName, body, _callback);
        Type localVarReturnType = new TypeToken<ConnectCarrierResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CarrierRequestBuilder {
        private final CarrierName carrierName;
        private Object body;

        private CarrierRequestBuilder(CarrierName carrierName) {
            this.carrierName = carrierName;
        }

        /**
         * Set body
         * @param body  (optional)
         * @return CarrierRequestBuilder
         */
        public CarrierRequestBuilder body(Object body) {
            this.body = body;
            return this;
        }

        /**
         * Build call for carrier
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return carrierCall(carrierName, body, _callback);
        }

        private Object buildBodyParams() {
            return this.body;
        }

        /**
         * Execute carrier request
         * @return ConnectCarrierResponseBody
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ConnectCarrierResponseBody execute() throws ApiException {
            Object body = buildBodyParams();
            ApiResponse<ConnectCarrierResponseBody> localVarResp = carrierWithHttpInfo(carrierName, body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute carrier request with HTTP info returned
         * @return ApiResponse&lt;ConnectCarrierResponseBody&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConnectCarrierResponseBody> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return carrierWithHttpInfo(carrierName, body);
        }

        /**
         * Execute carrier request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConnectCarrierResponseBody> _callback) throws ApiException {
            Object body = buildBodyParams();
            return carrierAsync(carrierName, body, _callback);
        }
    }

    /**
     * Connect a carrier account
     * Connect a carrier account
     * @param carrierName The carrier name, such as &#x60;stamps_com&#x60;, &#x60;ups&#x60;, &#x60;fedex&#x60;, or &#x60;dhl_express&#x60;. (required)
     * @param body  (required)
     * @return CarrierRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public CarrierRequestBuilder carrier(CarrierName carrierName) throws IllegalArgumentException {
        if (carrierName == null) throw new IllegalArgumentException("\"carrierName\" is required but got null");
        return new CarrierRequestBuilder(carrierName);
    }
    private okhttp3.Call carrier_0Call(CarrierName carrierName, String carrierId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/connections/carriers/{carrier_name}/{carrier_id}"
            .replace("{" + "carrier_name" + "}", localVarApiClient.escapeString(carrierName.toString()))
            .replace("{" + "carrier_id" + "}", localVarApiClient.escapeString(carrierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call carrier_0ValidateBeforeCall(CarrierName carrierName, String carrierId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'carrierName' is set
        if (carrierName == null) {
            throw new ApiException("Missing the required parameter 'carrierName' when calling carrier_0(Async)");
        }

        // verify the required parameter 'carrierId' is set
        if (carrierId == null) {
            throw new ApiException("Missing the required parameter 'carrierId' when calling carrier_0(Async)");
        }

        return carrier_0Call(carrierName, carrierId, _callback);

    }


    private ApiResponse<String> carrier_0WithHttpInfo(CarrierName carrierName, String carrierId) throws ApiException {
        okhttp3.Call localVarCall = carrier_0ValidateBeforeCall(carrierName, carrierId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call carrier_0Async(CarrierName carrierName, String carrierId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = carrier_0ValidateBeforeCall(carrierName, carrierId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Carrier0RequestBuilder {
        private final CarrierName carrierName;
        private final String carrierId;

        private Carrier0RequestBuilder(CarrierName carrierName, String carrierId) {
            this.carrierName = carrierName;
            this.carrierId = carrierId;
        }

        /**
         * Build call for carrier_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return carrier_0Call(carrierName, carrierId, _callback);
        }


        /**
         * Execute carrier_0 request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = carrier_0WithHttpInfo(carrierName, carrierId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute carrier_0 request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return carrier_0WithHttpInfo(carrierName, carrierId);
        }

        /**
         * Execute carrier_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return carrier_0Async(carrierName, carrierId, _callback);
        }
    }

    /**
     * Disconnect a carrier
     * Disconnect a carrier
     * @param carrierName The carrier name, such as &#x60;stamps_com&#x60;, &#x60;ups&#x60;, &#x60;fedex&#x60;, or &#x60;dhl_express&#x60;. (required)
     * @param carrierId Carrier ID (required)
     * @return Carrier0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
     </table>
     */
    public Carrier0RequestBuilder carrier_0(CarrierName carrierName, String carrierId) throws IllegalArgumentException {
        if (carrierName == null) throw new IllegalArgumentException("\"carrierName\" is required but got null");
        if (carrierId == null) throw new IllegalArgumentException("\"carrierId\" is required but got null");
            if (carrierId != null && carrierId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for carrierId. Length must be greater than or equal to 1.");
            }

        return new Carrier0RequestBuilder(carrierName, carrierId);
    }
    private okhttp3.Call getSettingsCall(CarrierNameWithSettings carrierName, String carrierId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/connections/carriers/{carrier_name}/{carrier_id}/settings"
            .replace("{" + "carrier_name" + "}", localVarApiClient.escapeString(carrierName.toString()))
            .replace("{" + "carrier_id" + "}", localVarApiClient.escapeString(carrierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSettingsValidateBeforeCall(CarrierNameWithSettings carrierName, String carrierId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'carrierName' is set
        if (carrierName == null) {
            throw new ApiException("Missing the required parameter 'carrierName' when calling getSettings(Async)");
        }

        // verify the required parameter 'carrierId' is set
        if (carrierId == null) {
            throw new ApiException("Missing the required parameter 'carrierId' when calling getSettings(Async)");
        }

        return getSettingsCall(carrierName, carrierId, _callback);

    }


    private ApiResponse<Object> getSettingsWithHttpInfo(CarrierNameWithSettings carrierName, String carrierId) throws ApiException {
        okhttp3.Call localVarCall = getSettingsValidateBeforeCall(carrierName, carrierId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSettingsAsync(CarrierNameWithSettings carrierName, String carrierId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSettingsValidateBeforeCall(carrierName, carrierId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSettingsRequestBuilder {
        private final CarrierNameWithSettings carrierName;
        private final String carrierId;

        private GetSettingsRequestBuilder(CarrierNameWithSettings carrierName, String carrierId) {
            this.carrierName = carrierName;
            this.carrierId = carrierId;
        }

        /**
         * Build call for getSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSettingsCall(carrierName, carrierId, _callback);
        }


        /**
         * Execute getSettings request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getSettingsWithHttpInfo(carrierName, carrierId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSettings request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getSettingsWithHttpInfo(carrierName, carrierId);
        }

        /**
         * Execute getSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getSettingsAsync(carrierName, carrierId, _callback);
        }
    }

    /**
     * Get carrier settings
     * Get carrier settings
     * @param carrierName The carrier name, such as &#x60;ups&#x60;, &#x60;fedex&#x60;, or &#x60;dhl_express&#x60;. (required)
     * @param carrierId Carrier ID (required)
     * @return GetSettingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public GetSettingsRequestBuilder getSettings(CarrierNameWithSettings carrierName, String carrierId) throws IllegalArgumentException {
        if (carrierName == null) throw new IllegalArgumentException("\"carrierName\" is required but got null");
        if (carrierId == null) throw new IllegalArgumentException("\"carrierId\" is required but got null");
            if (carrierId != null && carrierId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for carrierId. Length must be greater than or equal to 1.");
            }

        return new GetSettingsRequestBuilder(carrierName, carrierId);
    }
    private okhttp3.Call updateSettingsCall(CarrierNameWithSettings carrierName, String carrierId, Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/connections/carriers/{carrier_name}/{carrier_id}/settings"
            .replace("{" + "carrier_name" + "}", localVarApiClient.escapeString(carrierName.toString()))
            .replace("{" + "carrier_id" + "}", localVarApiClient.escapeString(carrierId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSettingsValidateBeforeCall(CarrierNameWithSettings carrierName, String carrierId, Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'carrierName' is set
        if (carrierName == null) {
            throw new ApiException("Missing the required parameter 'carrierName' when calling updateSettings(Async)");
        }

        // verify the required parameter 'carrierId' is set
        if (carrierId == null) {
            throw new ApiException("Missing the required parameter 'carrierId' when calling updateSettings(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateSettings(Async)");
        }

        return updateSettingsCall(carrierName, carrierId, body, _callback);

    }


    private ApiResponse<String> updateSettingsWithHttpInfo(CarrierNameWithSettings carrierName, String carrierId, Object body) throws ApiException {
        okhttp3.Call localVarCall = updateSettingsValidateBeforeCall(carrierName, carrierId, body, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateSettingsAsync(CarrierNameWithSettings carrierName, String carrierId, Object body, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSettingsValidateBeforeCall(carrierName, carrierId, body, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateSettingsRequestBuilder {
        private final CarrierNameWithSettings carrierName;
        private final String carrierId;
        private Object body;

        private UpdateSettingsRequestBuilder(CarrierNameWithSettings carrierName, String carrierId) {
            this.carrierName = carrierName;
            this.carrierId = carrierId;
        }

        /**
         * Set body
         * @param body  (optional)
         * @return UpdateSettingsRequestBuilder
         */
        public UpdateSettingsRequestBuilder body(Object body) {
            this.body = body;
            return this;
        }

        /**
         * Build call for updateSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Object body = buildBodyParams();
            return updateSettingsCall(carrierName, carrierId, body, _callback);
        }

        private Object buildBodyParams() {
            return this.body;
        }

        /**
         * Execute updateSettings request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            Object body = buildBodyParams();
            ApiResponse<String> localVarResp = updateSettingsWithHttpInfo(carrierName, carrierId, body);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateSettings request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            Object body = buildBodyParams();
            return updateSettingsWithHttpInfo(carrierName, carrierId, body);
        }

        /**
         * Execute updateSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            Object body = buildBodyParams();
            return updateSettingsAsync(carrierName, carrierId, body, _callback);
        }
    }

    /**
     * Update carrier settings
     * Update carrier settings
     * @param carrierName The carrier name, such as &#x60;ups&#x60;, &#x60;fedex&#x60;, or &#x60;dhl_express&#x60;. (required)
     * @param carrierId Carrier ID (required)
     * @param body  (required)
     * @return UpdateSettingsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSettingsRequestBuilder updateSettings(CarrierNameWithSettings carrierName, String carrierId) throws IllegalArgumentException {
        if (carrierName == null) throw new IllegalArgumentException("\"carrierName\" is required but got null");
        if (carrierId == null) throw new IllegalArgumentException("\"carrierId\" is required but got null");
            if (carrierId != null && carrierId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for carrierId. Length must be greater than or equal to 1.");
            }

        return new UpdateSettingsRequestBuilder(carrierName, carrierId);
    }
}
