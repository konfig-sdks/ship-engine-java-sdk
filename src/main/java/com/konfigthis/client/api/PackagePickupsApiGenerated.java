/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202403202303
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.ContactDetails;
import com.konfigthis.client.model.DeletePickupByIdResponseBody;
import com.konfigthis.client.model.GetPickupByIdResponseBody;
import com.konfigthis.client.model.GetPickupsResponseBody;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.PartialAddress;
import com.konfigthis.client.model.Pickup;
import com.konfigthis.client.model.PickupWindow;
import com.konfigthis.client.model.PickupWindows;
import com.konfigthis.client.model.SchedulePickupResponseBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PackagePickupsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PackagePickupsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PackagePickupsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"API-Key\" is required but no API key was provided. Please set \"API-Key\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getByIdCall(String pickupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/pickups/{pickup_id}"
            .replace("{" + "pickup_id" + "}", localVarApiClient.escapeString(pickupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String pickupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pickupId' is set
        if (pickupId == null) {
            throw new ApiException("Missing the required parameter 'pickupId' when calling getById(Async)");
        }

        return getByIdCall(pickupId, _callback);

    }


    private ApiResponse<GetPickupByIdResponseBody> getByIdWithHttpInfo(String pickupId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(pickupId, null);
        Type localVarReturnType = new TypeToken<GetPickupByIdResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String pickupId, final ApiCallback<GetPickupByIdResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(pickupId, _callback);
        Type localVarReturnType = new TypeToken<GetPickupByIdResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String pickupId;

        private GetByIdRequestBuilder(String pickupId) {
            this.pickupId = pickupId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(pickupId, _callback);
        }


        /**
         * Execute getById request
         * @return GetPickupByIdResponseBody
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public GetPickupByIdResponseBody execute() throws ApiException {
            ApiResponse<GetPickupByIdResponseBody> localVarResp = getByIdWithHttpInfo(pickupId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;GetPickupByIdResponseBody&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetPickupByIdResponseBody> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(pickupId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetPickupByIdResponseBody> _callback) throws ApiException {
            return getByIdAsync(pickupId, _callback);
        }
    }

    /**
     * Get Pickup By ID
     * Get Pickup By ID
     * @param pickupId  (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String pickupId) throws IllegalArgumentException {
        if (pickupId == null) throw new IllegalArgumentException("\"pickupId\" is required but got null");
            if (pickupId != null && pickupId.length() < 4) {
              throw new IllegalArgumentException("Invalid value for pickupId. Length must be greater than or equal to 4.");
            }

        return new GetByIdRequestBuilder(pickupId);
    }
    private okhttp3.Call listScheduledPickupsCall(String carrierId, String warehouseId, OffsetDateTime createdAtStart, OffsetDateTime createdAtEnd, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/pickups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (carrierId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("carrier_id", carrierId));
        }

        if (warehouseId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("warehouse_id", warehouseId));
        }

        if (createdAtStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at_start", createdAtStart));
        }

        if (createdAtEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at_end", createdAtEnd));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listScheduledPickupsValidateBeforeCall(String carrierId, String warehouseId, OffsetDateTime createdAtStart, OffsetDateTime createdAtEnd, Integer page, Integer pageSize, final ApiCallback _callback) throws ApiException {
        return listScheduledPickupsCall(carrierId, warehouseId, createdAtStart, createdAtEnd, page, pageSize, _callback);

    }


    private ApiResponse<GetPickupsResponseBody> listScheduledPickupsWithHttpInfo(String carrierId, String warehouseId, OffsetDateTime createdAtStart, OffsetDateTime createdAtEnd, Integer page, Integer pageSize) throws ApiException {
        okhttp3.Call localVarCall = listScheduledPickupsValidateBeforeCall(carrierId, warehouseId, createdAtStart, createdAtEnd, page, pageSize, null);
        Type localVarReturnType = new TypeToken<GetPickupsResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listScheduledPickupsAsync(String carrierId, String warehouseId, OffsetDateTime createdAtStart, OffsetDateTime createdAtEnd, Integer page, Integer pageSize, final ApiCallback<GetPickupsResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = listScheduledPickupsValidateBeforeCall(carrierId, warehouseId, createdAtStart, createdAtEnd, page, pageSize, _callback);
        Type localVarReturnType = new TypeToken<GetPickupsResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListScheduledPickupsRequestBuilder {
        private String carrierId;
        private String warehouseId;
        private OffsetDateTime createdAtStart;
        private OffsetDateTime createdAtEnd;
        private Integer page;
        private Integer pageSize;

        private ListScheduledPickupsRequestBuilder() {
        }

        /**
         * Set carrierId
         * @param carrierId Carrier ID (optional)
         * @return ListScheduledPickupsRequestBuilder
         */
        public ListScheduledPickupsRequestBuilder carrierId(String carrierId) {
            this.carrierId = carrierId;
            return this;
        }
        
        /**
         * Set warehouseId
         * @param warehouseId Warehouse ID (optional)
         * @return ListScheduledPickupsRequestBuilder
         */
        public ListScheduledPickupsRequestBuilder warehouseId(String warehouseId) {
            this.warehouseId = warehouseId;
            return this;
        }
        
        /**
         * Set createdAtStart
         * @param createdAtStart Only return scheduled pickups that were created on or after a specific date/time (optional)
         * @return ListScheduledPickupsRequestBuilder
         */
        public ListScheduledPickupsRequestBuilder createdAtStart(OffsetDateTime createdAtStart) {
            this.createdAtStart = createdAtStart;
            return this;
        }
        
        /**
         * Set createdAtEnd
         * @param createdAtEnd Only return scheduled pickups that were created on or before a specific date/time (optional)
         * @return ListScheduledPickupsRequestBuilder
         */
        public ListScheduledPickupsRequestBuilder createdAtEnd(OffsetDateTime createdAtEnd) {
            this.createdAtEnd = createdAtEnd;
            return this;
        }
        
        /**
         * Set page
         * @param page Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)
         * @return ListScheduledPickupsRequestBuilder
         */
        public ListScheduledPickupsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize The number of results to return per response. (optional, default to 25)
         * @return ListScheduledPickupsRequestBuilder
         */
        public ListScheduledPickupsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Build call for listScheduledPickups
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listScheduledPickupsCall(carrierId, warehouseId, createdAtStart, createdAtEnd, page, pageSize, _callback);
        }


        /**
         * Execute listScheduledPickups request
         * @return GetPickupsResponseBody
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public GetPickupsResponseBody execute() throws ApiException {
            ApiResponse<GetPickupsResponseBody> localVarResp = listScheduledPickupsWithHttpInfo(carrierId, warehouseId, createdAtStart, createdAtEnd, page, pageSize);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listScheduledPickups request with HTTP info returned
         * @return ApiResponse&lt;GetPickupsResponseBody&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GetPickupsResponseBody> executeWithHttpInfo() throws ApiException {
            return listScheduledPickupsWithHttpInfo(carrierId, warehouseId, createdAtStart, createdAtEnd, page, pageSize);
        }

        /**
         * Execute listScheduledPickups request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GetPickupsResponseBody> _callback) throws ApiException {
            return listScheduledPickupsAsync(carrierId, warehouseId, createdAtStart, createdAtEnd, page, pageSize, _callback);
        }
    }

    /**
     * List Scheduled Pickups
     * List all pickups that have been scheduled for this carrier
     * @return ListScheduledPickupsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public ListScheduledPickupsRequestBuilder listScheduledPickups() throws IllegalArgumentException {
        return new ListScheduledPickupsRequestBuilder();
    }
    private okhttp3.Call pickupCall(Pickup pickup, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = pickup;

        // create path and map variables
        String localVarPath = "/v1/pickups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pickupValidateBeforeCall(Pickup pickup, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pickup' is set
        if (pickup == null) {
            throw new ApiException("Missing the required parameter 'pickup' when calling pickup(Async)");
        }

        return pickupCall(pickup, _callback);

    }


    private ApiResponse<SchedulePickupResponseBody> pickupWithHttpInfo(Pickup pickup) throws ApiException {
        okhttp3.Call localVarCall = pickupValidateBeforeCall(pickup, null);
        Type localVarReturnType = new TypeToken<SchedulePickupResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call pickupAsync(Pickup pickup, final ApiCallback<SchedulePickupResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = pickupValidateBeforeCall(pickup, _callback);
        Type localVarReturnType = new TypeToken<SchedulePickupResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PickupRequestBuilder {
        private String pickupId;
        private List<String> labelIds;
        private OffsetDateTime createdAt;
        private OffsetDateTime cancelledAt;
        private String carrierId;
        private String confirmationNumber;
        private String warehouseId;
        private PartialAddress pickupAddress;
        private ContactDetails contactDetails;
        private String pickupNotes;
        private PickupWindow pickupWindow;
        private List<PickupWindows> pickupWindows;

        private PickupRequestBuilder() {
        }

        /**
         * Set pickupId
         * @param pickupId Pickup Resource ID (optional)
         * @return PickupRequestBuilder
         */
        public PickupRequestBuilder pickupId(String pickupId) {
            this.pickupId = pickupId;
            return this;
        }
        
        /**
         * Set labelIds
         * @param labelIds Label IDs that will be included in the pickup request (optional)
         * @return PickupRequestBuilder
         */
        public PickupRequestBuilder labelIds(List<String> labelIds) {
            this.labelIds = labelIds;
            return this;
        }
        
        /**
         * Set createdAt
         * @param createdAt An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date and time.  (optional)
         * @return PickupRequestBuilder
         */
        public PickupRequestBuilder createdAt(OffsetDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }
        
        /**
         * Set cancelledAt
         * @param cancelledAt An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date and time.  (optional)
         * @return PickupRequestBuilder
         */
        public PickupRequestBuilder cancelledAt(OffsetDateTime cancelledAt) {
            this.cancelledAt = cancelledAt;
            return this;
        }
        
        /**
         * Set carrierId
         * @param carrierId A string that uniquely identifies a ShipEngine resource, such as a carrier, label, shipment, etc. (optional)
         * @return PickupRequestBuilder
         */
        public PickupRequestBuilder carrierId(String carrierId) {
            this.carrierId = carrierId;
            return this;
        }
        
        /**
         * Set confirmationNumber
         * @param confirmationNumber The carrier confirmation number for the scheduled pickup. (optional)
         * @return PickupRequestBuilder
         */
        public PickupRequestBuilder confirmationNumber(String confirmationNumber) {
            this.confirmationNumber = confirmationNumber;
            return this;
        }
        
        /**
         * Set warehouseId
         * @param warehouseId A string that uniquely identifies a ShipEngine resource, such as a carrier, label, shipment, etc. (optional)
         * @return PickupRequestBuilder
         */
        public PickupRequestBuilder warehouseId(String warehouseId) {
            this.warehouseId = warehouseId;
            return this;
        }
        
        /**
         * Set pickupAddress
         * @param pickupAddress  (optional)
         * @return PickupRequestBuilder
         */
        public PickupRequestBuilder pickupAddress(PartialAddress pickupAddress) {
            this.pickupAddress = pickupAddress;
            return this;
        }
        
        /**
         * Set contactDetails
         * @param contactDetails  (optional)
         * @return PickupRequestBuilder
         */
        public PickupRequestBuilder contactDetails(ContactDetails contactDetails) {
            this.contactDetails = contactDetails;
            return this;
        }
        
        /**
         * Set pickupNotes
         * @param pickupNotes Used by some carriers to give special instructions for a package pickup (optional)
         * @return PickupRequestBuilder
         */
        public PickupRequestBuilder pickupNotes(String pickupNotes) {
            this.pickupNotes = pickupNotes;
            return this;
        }
        
        /**
         * Set pickupWindow
         * @param pickupWindow  (optional)
         * @return PickupRequestBuilder
         */
        public PickupRequestBuilder pickupWindow(PickupWindow pickupWindow) {
            this.pickupWindow = pickupWindow;
            return this;
        }
        
        /**
         * Set pickupWindows
         * @param pickupWindows An array of available pickup windows. Carriers can return multiple times that they will pickup packages.  (optional)
         * @return PickupRequestBuilder
         */
        public PickupRequestBuilder pickupWindows(List<PickupWindows> pickupWindows) {
            this.pickupWindows = pickupWindows;
            return this;
        }
        
        /**
         * Build call for pickup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            Pickup pickup = buildBodyParams();
            return pickupCall(pickup, _callback);
        }

        private Pickup buildBodyParams() {
            Pickup pickup = new Pickup();
            pickup.pickupId(this.pickupId);
            pickup.labelIds(this.labelIds);
            pickup.createdAt(this.createdAt);
            pickup.cancelledAt(this.cancelledAt);
            pickup.carrierId(this.carrierId);
            pickup.confirmationNumber(this.confirmationNumber);
            pickup.warehouseId(this.warehouseId);
            pickup.pickupAddress(this.pickupAddress);
            pickup.contactDetails(this.contactDetails);
            pickup.pickupNotes(this.pickupNotes);
            pickup.pickupWindow(this.pickupWindow);
            pickup.pickupWindows(this.pickupWindows);
            return pickup;
        }

        /**
         * Execute pickup request
         * @return SchedulePickupResponseBody
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public SchedulePickupResponseBody execute() throws ApiException {
            Pickup pickup = buildBodyParams();
            ApiResponse<SchedulePickupResponseBody> localVarResp = pickupWithHttpInfo(pickup);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute pickup request with HTTP info returned
         * @return ApiResponse&lt;SchedulePickupResponseBody&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SchedulePickupResponseBody> executeWithHttpInfo() throws ApiException {
            Pickup pickup = buildBodyParams();
            return pickupWithHttpInfo(pickup);
        }

        /**
         * Execute pickup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SchedulePickupResponseBody> _callback) throws ApiException {
            Pickup pickup = buildBodyParams();
            return pickupAsync(pickup, _callback);
        }
    }

    /**
     * Schedule a Pickup
     * Schedule a package pickup with a carrier
     * @param pickup  (required)
     * @return PickupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public PickupRequestBuilder pickup() throws IllegalArgumentException {
        return new PickupRequestBuilder();
    }
    private okhttp3.Call removeScheduledPickupCall(String pickupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/pickups/{pickup_id}"
            .replace("{" + "pickup_id" + "}", localVarApiClient.escapeString(pickupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeScheduledPickupValidateBeforeCall(String pickupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'pickupId' is set
        if (pickupId == null) {
            throw new ApiException("Missing the required parameter 'pickupId' when calling removeScheduledPickup(Async)");
        }

        return removeScheduledPickupCall(pickupId, _callback);

    }


    private ApiResponse<DeletePickupByIdResponseBody> removeScheduledPickupWithHttpInfo(String pickupId) throws ApiException {
        okhttp3.Call localVarCall = removeScheduledPickupValidateBeforeCall(pickupId, null);
        Type localVarReturnType = new TypeToken<DeletePickupByIdResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call removeScheduledPickupAsync(String pickupId, final ApiCallback<DeletePickupByIdResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeScheduledPickupValidateBeforeCall(pickupId, _callback);
        Type localVarReturnType = new TypeToken<DeletePickupByIdResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class RemoveScheduledPickupRequestBuilder {
        private final String pickupId;

        private RemoveScheduledPickupRequestBuilder(String pickupId) {
            this.pickupId = pickupId;
        }

        /**
         * Build call for removeScheduledPickup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Return the &#x60;pickup_id&#x60; of the scheduled pickup that was successfully deleted  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return removeScheduledPickupCall(pickupId, _callback);
        }


        /**
         * Execute removeScheduledPickup request
         * @return DeletePickupByIdResponseBody
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Return the &#x60;pickup_id&#x60; of the scheduled pickup that was successfully deleted  </td><td>  -  </td></tr>
         </table>
         */
        public DeletePickupByIdResponseBody execute() throws ApiException {
            ApiResponse<DeletePickupByIdResponseBody> localVarResp = removeScheduledPickupWithHttpInfo(pickupId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute removeScheduledPickup request with HTTP info returned
         * @return ApiResponse&lt;DeletePickupByIdResponseBody&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Return the &#x60;pickup_id&#x60; of the scheduled pickup that was successfully deleted  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeletePickupByIdResponseBody> executeWithHttpInfo() throws ApiException {
            return removeScheduledPickupWithHttpInfo(pickupId);
        }

        /**
         * Execute removeScheduledPickup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Return the &#x60;pickup_id&#x60; of the scheduled pickup that was successfully deleted  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeletePickupByIdResponseBody> _callback) throws ApiException {
            return removeScheduledPickupAsync(pickupId, _callback);
        }
    }

    /**
     * Delete a Scheduled Pickup
     * Delete a previously-scheduled pickup by ID
     * @param pickupId  (required)
     * @return RemoveScheduledPickupRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return the &#x60;pickup_id&#x60; of the scheduled pickup that was successfully deleted  </td><td>  -  </td></tr>
     </table>
     */
    public RemoveScheduledPickupRequestBuilder removeScheduledPickup(String pickupId) throws IllegalArgumentException {
        if (pickupId == null) throw new IllegalArgumentException("\"pickupId\" is required but got null");
            if (pickupId != null && pickupId.length() < 4) {
              throw new IllegalArgumentException("Invalid value for pickupId. Length must be greater than or equal to 4.");
            }

        return new RemoveScheduledPickupRequestBuilder(pickupId);
    }
}
