/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202403202303
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AddressValidatingShipment;
import com.konfigthis.client.model.AdvancedShipmentOptions;
import com.konfigthis.client.model.CreateAndValidateShipment;
import com.konfigthis.client.model.CreateShipmentsRequestBody;
import com.konfigthis.client.model.CreateShipmentsResponseBody;
import com.konfigthis.client.model.DeliveryConfirmation;
import com.konfigthis.client.model.InsuranceProvider;
import com.konfigthis.client.model.InternationalShipmentOptionsNullable;
import com.konfigthis.client.model.ListShipmentsResponseBody;
import com.konfigthis.client.model.ModelPackage;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.OrderSourceName;
import com.konfigthis.client.model.ParseShipmentRequestBody;
import com.konfigthis.client.model.ParseShipmentResponseBody;
import com.konfigthis.client.model.PartialShipment;
import com.konfigthis.client.model.RatesInformation;
import com.konfigthis.client.model.ShipmentItem;
import com.konfigthis.client.model.ShipmentStatus;
import com.konfigthis.client.model.ShipmentsSortBy;
import com.konfigthis.client.model.ShippingAddress;
import com.konfigthis.client.model.ShippingAddressTo;
import com.konfigthis.client.model.SortDir;
import com.konfigthis.client.model.Tag;
import com.konfigthis.client.model.TagShipmentResponseBody;
import com.konfigthis.client.model.TaxIdentifier;
import com.konfigthis.client.model.UpdateShipmentRequestBody;
import com.konfigthis.client.model.UpdateShipmentsTags;
import com.konfigthis.client.model.UpdateShipmentsTagsShipmentsTagsInner;
import com.konfigthis.client.model.ValidateAddress;
import com.konfigthis.client.model.Weight;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ShipmentsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ShipmentsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ShipmentsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKey() == null) {
            throw new IllegalArgumentException("\"API-Key\" is required but no API key was provided. Please set \"API-Key\" with ApiClient#setApiKey(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getByExternalIdCall(String externalShipmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/shipments/external_shipment_id/{external_shipment_id}"
            .replace("{" + "external_shipment_id" + "}", localVarApiClient.escapeString(externalShipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByExternalIdValidateBeforeCall(String externalShipmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'externalShipmentId' is set
        if (externalShipmentId == null) {
            throw new ApiException("Missing the required parameter 'externalShipmentId' when calling getByExternalId(Async)");
        }

        return getByExternalIdCall(externalShipmentId, _callback);

    }


    private ApiResponse<PartialShipment> getByExternalIdWithHttpInfo(String externalShipmentId) throws ApiException {
        okhttp3.Call localVarCall = getByExternalIdValidateBeforeCall(externalShipmentId, null);
        Type localVarReturnType = new TypeToken<PartialShipment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByExternalIdAsync(String externalShipmentId, final ApiCallback<PartialShipment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByExternalIdValidateBeforeCall(externalShipmentId, _callback);
        Type localVarReturnType = new TypeToken<PartialShipment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByExternalIdRequestBuilder {
        private final String externalShipmentId;

        private GetByExternalIdRequestBuilder(String externalShipmentId) {
            this.externalShipmentId = externalShipmentId;
        }

        /**
         * Build call for getByExternalId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByExternalIdCall(externalShipmentId, _callback);
        }


        /**
         * Execute getByExternalId request
         * @return PartialShipment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public PartialShipment execute() throws ApiException {
            ApiResponse<PartialShipment> localVarResp = getByExternalIdWithHttpInfo(externalShipmentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByExternalId request with HTTP info returned
         * @return ApiResponse&lt;PartialShipment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PartialShipment> executeWithHttpInfo() throws ApiException {
            return getByExternalIdWithHttpInfo(externalShipmentId);
        }

        /**
         * Execute getByExternalId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PartialShipment> _callback) throws ApiException {
            return getByExternalIdAsync(externalShipmentId, _callback);
        }
    }

    /**
     * Get Shipment By External ID
     * Query Shipments created using your own custom ID convention using this endpint
     * @param externalShipmentId  (required)
     * @return GetByExternalIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public GetByExternalIdRequestBuilder getByExternalId(String externalShipmentId) throws IllegalArgumentException {
        if (externalShipmentId == null) throw new IllegalArgumentException("\"externalShipmentId\" is required but got null");
            

        return new GetByExternalIdRequestBuilder(externalShipmentId);
    }
    private okhttp3.Call getByIdCall(String shipmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/shipments/{shipment_id}"
            .replace("{" + "shipment_id" + "}", localVarApiClient.escapeString(shipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String shipmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException("Missing the required parameter 'shipmentId' when calling getById(Async)");
        }

        return getByIdCall(shipmentId, _callback);

    }


    private ApiResponse<PartialShipment> getByIdWithHttpInfo(String shipmentId) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(shipmentId, null);
        Type localVarReturnType = new TypeToken<PartialShipment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String shipmentId, final ApiCallback<PartialShipment> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(shipmentId, _callback);
        Type localVarReturnType = new TypeToken<PartialShipment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String shipmentId;

        private GetByIdRequestBuilder(String shipmentId) {
            this.shipmentId = shipmentId;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(shipmentId, _callback);
        }


        /**
         * Execute getById request
         * @return PartialShipment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public PartialShipment execute() throws ApiException {
            ApiResponse<PartialShipment> localVarResp = getByIdWithHttpInfo(shipmentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;PartialShipment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PartialShipment> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(shipmentId);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PartialShipment> _callback) throws ApiException {
            return getByIdAsync(shipmentId, _callback);
        }
    }

    /**
     * Get Shipment By ID
     * Get an individual shipment based on its ID
     * @param shipmentId Shipment ID (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String shipmentId) throws IllegalArgumentException {
        if (shipmentId == null) throw new IllegalArgumentException("\"shipmentId\" is required but got null");
            if (shipmentId != null && shipmentId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for shipmentId. Length must be greater than or equal to 1.");
            }

        return new GetByIdRequestBuilder(shipmentId);
    }
    private okhttp3.Call getRatesForShipmentCall(String shipmentId, OffsetDateTime createdAtStart, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/shipments/{shipment_id}/rates"
            .replace("{" + "shipment_id" + "}", localVarApiClient.escapeString(shipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (createdAtStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at_start", createdAtStart));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRatesForShipmentValidateBeforeCall(String shipmentId, OffsetDateTime createdAtStart, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException("Missing the required parameter 'shipmentId' when calling getRatesForShipment(Async)");
        }

        return getRatesForShipmentCall(shipmentId, createdAtStart, _callback);

    }


    private ApiResponse<RatesInformation> getRatesForShipmentWithHttpInfo(String shipmentId, OffsetDateTime createdAtStart) throws ApiException {
        okhttp3.Call localVarCall = getRatesForShipmentValidateBeforeCall(shipmentId, createdAtStart, null);
        Type localVarReturnType = new TypeToken<RatesInformation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRatesForShipmentAsync(String shipmentId, OffsetDateTime createdAtStart, final ApiCallback<RatesInformation> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRatesForShipmentValidateBeforeCall(shipmentId, createdAtStart, _callback);
        Type localVarReturnType = new TypeToken<RatesInformation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRatesForShipmentRequestBuilder {
        private final String shipmentId;
        private OffsetDateTime createdAtStart;

        private GetRatesForShipmentRequestBuilder(String shipmentId) {
            this.shipmentId = shipmentId;
        }

        /**
         * Set createdAtStart
         * @param createdAtStart Used to create a filter for when a resource was created (ex. A shipment that was created after a certain time) (optional)
         * @return GetRatesForShipmentRequestBuilder
         */
        public GetRatesForShipmentRequestBuilder createdAtStart(OffsetDateTime createdAtStart) {
            this.createdAtStart = createdAtStart;
            return this;
        }
        
        /**
         * Build call for getRatesForShipment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRatesForShipmentCall(shipmentId, createdAtStart, _callback);
        }


        /**
         * Execute getRatesForShipment request
         * @return RatesInformation
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public RatesInformation execute() throws ApiException {
            ApiResponse<RatesInformation> localVarResp = getRatesForShipmentWithHttpInfo(shipmentId, createdAtStart);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getRatesForShipment request with HTTP info returned
         * @return ApiResponse&lt;RatesInformation&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RatesInformation> executeWithHttpInfo() throws ApiException {
            return getRatesForShipmentWithHttpInfo(shipmentId, createdAtStart);
        }

        /**
         * Execute getRatesForShipment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RatesInformation> _callback) throws ApiException {
            return getRatesForShipmentAsync(shipmentId, createdAtStart, _callback);
        }
    }

    /**
     * Get Shipment Rates
     * Get Rates for the shipment information associated with the shipment ID
     * @param shipmentId Shipment ID (required)
     * @return GetRatesForShipmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public GetRatesForShipmentRequestBuilder getRatesForShipment(String shipmentId) throws IllegalArgumentException {
        if (shipmentId == null) throw new IllegalArgumentException("\"shipmentId\" is required but got null");
            if (shipmentId != null && shipmentId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for shipmentId. Length must be greater than or equal to 1.");
            }

        return new GetRatesForShipmentRequestBuilder(shipmentId);
    }
    private okhttp3.Call getTagsByIdCall(String shipmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/shipments/{shipment_id}/tags"
            .replace("{" + "shipment_id" + "}", localVarApiClient.escapeString(shipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTagsByIdValidateBeforeCall(String shipmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException("Missing the required parameter 'shipmentId' when calling getTagsById(Async)");
        }

        return getTagsByIdCall(shipmentId, _callback);

    }


    private ApiResponse<TagShipmentResponseBody> getTagsByIdWithHttpInfo(String shipmentId) throws ApiException {
        okhttp3.Call localVarCall = getTagsByIdValidateBeforeCall(shipmentId, null);
        Type localVarReturnType = new TypeToken<TagShipmentResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTagsByIdAsync(String shipmentId, final ApiCallback<TagShipmentResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTagsByIdValidateBeforeCall(shipmentId, _callback);
        Type localVarReturnType = new TypeToken<TagShipmentResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetTagsByIdRequestBuilder {
        private final String shipmentId;

        private GetTagsByIdRequestBuilder(String shipmentId) {
            this.shipmentId = shipmentId;
        }

        /**
         * Build call for getTagsById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTagsByIdCall(shipmentId, _callback);
        }


        /**
         * Execute getTagsById request
         * @return TagShipmentResponseBody
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public TagShipmentResponseBody execute() throws ApiException {
            ApiResponse<TagShipmentResponseBody> localVarResp = getTagsByIdWithHttpInfo(shipmentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getTagsById request with HTTP info returned
         * @return ApiResponse&lt;TagShipmentResponseBody&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TagShipmentResponseBody> executeWithHttpInfo() throws ApiException {
            return getTagsByIdWithHttpInfo(shipmentId);
        }

        /**
         * Execute getTagsById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TagShipmentResponseBody> _callback) throws ApiException {
            return getTagsByIdAsync(shipmentId, _callback);
        }
    }

    /**
     * Get Shipment Tags
     * Get Shipment tags based on its ID
     * @param shipmentId Shipment ID (required)
     * @return GetTagsByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public GetTagsByIdRequestBuilder getTagsById(String shipmentId) throws IllegalArgumentException {
        if (shipmentId == null) throw new IllegalArgumentException("\"shipmentId\" is required but got null");
            if (shipmentId != null && shipmentId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for shipmentId. Length must be greater than or equal to 1.");
            }

        return new GetTagsByIdRequestBuilder(shipmentId);
    }
    private okhttp3.Call shipmentCall(ParseShipmentRequestBody parseShipmentRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parseShipmentRequestBody;

        // create path and map variables
        String localVarPath = "/v1/shipments/recognize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shipmentValidateBeforeCall(ParseShipmentRequestBody parseShipmentRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'parseShipmentRequestBody' is set
        if (parseShipmentRequestBody == null) {
            throw new ApiException("Missing the required parameter 'parseShipmentRequestBody' when calling shipment(Async)");
        }

        return shipmentCall(parseShipmentRequestBody, _callback);

    }


    private ApiResponse<ParseShipmentResponseBody> shipmentWithHttpInfo(ParseShipmentRequestBody parseShipmentRequestBody) throws ApiException {
        okhttp3.Call localVarCall = shipmentValidateBeforeCall(parseShipmentRequestBody, null);
        Type localVarReturnType = new TypeToken<ParseShipmentResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call shipmentAsync(ParseShipmentRequestBody parseShipmentRequestBody, final ApiCallback<ParseShipmentResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = shipmentValidateBeforeCall(parseShipmentRequestBody, _callback);
        Type localVarReturnType = new TypeToken<ParseShipmentResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ShipmentRequestBuilder {
        private final String text;
        private PartialShipment shipment;

        private ShipmentRequestBuilder(String text) {
            this.text = text;
        }

        /**
         * Set shipment
         * @param shipment You can optionally provide a &#x60;shipment&#x60; object containing any already-known values. For example, you probably already know the &#x60;ship_from&#x60; address, and you may also already know what carrier and service you want to use.  (optional)
         * @return ShipmentRequestBuilder
         */
        public ShipmentRequestBuilder shipment(PartialShipment shipment) {
            this.shipment = shipment;
            return this;
        }
        
        /**
         * Build call for shipment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the parsed shipment, as well as a confidence score and a list of all the shipping entities that were recognized in the text.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            ParseShipmentRequestBody parseShipmentRequestBody = buildBodyParams();
            return shipmentCall(parseShipmentRequestBody, _callback);
        }

        private ParseShipmentRequestBody buildBodyParams() {
            ParseShipmentRequestBody parseShipmentRequestBody = new ParseShipmentRequestBody();
            parseShipmentRequestBody.text(this.text);
            parseShipmentRequestBody.shipment(this.shipment);
            return parseShipmentRequestBody;
        }

        /**
         * Execute shipment request
         * @return ParseShipmentResponseBody
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the parsed shipment, as well as a confidence score and a list of all the shipping entities that were recognized in the text.  </td><td>  -  </td></tr>
         </table>
         */
        public ParseShipmentResponseBody execute() throws ApiException {
            ParseShipmentRequestBody parseShipmentRequestBody = buildBodyParams();
            ApiResponse<ParseShipmentResponseBody> localVarResp = shipmentWithHttpInfo(parseShipmentRequestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute shipment request with HTTP info returned
         * @return ApiResponse&lt;ParseShipmentResponseBody&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the parsed shipment, as well as a confidence score and a list of all the shipping entities that were recognized in the text.  </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ParseShipmentResponseBody> executeWithHttpInfo() throws ApiException {
            ParseShipmentRequestBody parseShipmentRequestBody = buildBodyParams();
            return shipmentWithHttpInfo(parseShipmentRequestBody);
        }

        /**
         * Execute shipment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Returns the parsed shipment, as well as a confidence score and a list of all the shipping entities that were recognized in the text.  </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ParseShipmentResponseBody> _callback) throws ApiException {
            ParseShipmentRequestBody parseShipmentRequestBody = buildBodyParams();
            return shipmentAsync(parseShipmentRequestBody, _callback);
        }
    }

    /**
     * Parse shipping info
     * The shipment-recognition API makes it easy for you to extract shipping data from unstructured text, including people&#39;s names, addresses, package weights and dimensions, insurance and delivery requirements, and more.  Data often enters your system as unstructured text (for example: emails, SMS messages, support tickets, or other documents). ShipEngine&#39;s shipment-recognition API helps you extract meaningful, structured data from this unstructured text. The parsed shipment data is returned in the same structure that&#39;s used for other ShipEngine APIs, so you can easily use the parsed data to create a shipping label.  &gt; **Note:** Shipment recognition is currently supported for the United States, Canada, Australia, New Zealand, the United Kingdom, and Ireland. 
     * @param parseShipmentRequestBody The only required field is &#x60;text&#x60;, which is the text to be parsed. You can optionally also provide a &#x60;shipment&#x60; containing any already-known values. For example, you probably already know the &#x60;ship_from&#x60; address, and you may also already know what carrier and service you want to use.  (required)
     * @return ShipmentRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the parsed shipment, as well as a confidence score and a list of all the shipping entities that were recognized in the text.  </td><td>  -  </td></tr>
     </table>
     */
    public ShipmentRequestBuilder shipment(String text) throws IllegalArgumentException {
        if (text == null) throw new IllegalArgumentException("\"text\" is required but got null");
            if (text != null && text.length() < 1) {
              throw new IllegalArgumentException("Invalid value for text. Length must be greater than or equal to 1.");
            }

        return new ShipmentRequestBuilder(text);
    }
    private okhttp3.Call shipment_0Call(String shipmentId, UpdateShipmentRequestBody updateShipmentRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateShipmentRequestBody;

        // create path and map variables
        String localVarPath = "/v1/shipments/{shipment_id}"
            .replace("{" + "shipment_id" + "}", localVarApiClient.escapeString(shipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shipment_0ValidateBeforeCall(String shipmentId, UpdateShipmentRequestBody updateShipmentRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException("Missing the required parameter 'shipmentId' when calling shipment_0(Async)");
        }

        // verify the required parameter 'updateShipmentRequestBody' is set
        if (updateShipmentRequestBody == null) {
            throw new ApiException("Missing the required parameter 'updateShipmentRequestBody' when calling shipment_0(Async)");
        }

        return shipment_0Call(shipmentId, updateShipmentRequestBody, _callback);

    }


    private ApiResponse<CreateAndValidateShipment> shipment_0WithHttpInfo(String shipmentId, UpdateShipmentRequestBody updateShipmentRequestBody) throws ApiException {
        okhttp3.Call localVarCall = shipment_0ValidateBeforeCall(shipmentId, updateShipmentRequestBody, null);
        Type localVarReturnType = new TypeToken<CreateAndValidateShipment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call shipment_0Async(String shipmentId, UpdateShipmentRequestBody updateShipmentRequestBody, final ApiCallback<CreateAndValidateShipment> _callback) throws ApiException {

        okhttp3.Call localVarCall = shipment_0ValidateBeforeCall(shipmentId, updateShipmentRequestBody, _callback);
        Type localVarReturnType = new TypeToken<CreateAndValidateShipment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Shipment0RequestBuilder {
        private final ShippingAddressTo shipTo;
        private final ShippingAddress shipFrom;
        private final String shipmentId;
        private List<Tag> tags;
        private String shipmentId;
        private String carrierId;
        private String serviceCode;
        private String externalOrderId;
        private List<ShipmentItem> items;
        private List<TaxIdentifier> taxIdentifiers;
        private String externalShipmentId;
        private String shipmentNumber;
        private OffsetDateTime shipDate;
        private OffsetDateTime createdAt;
        private OffsetDateTime modifiedAt;
        private ShipmentStatus shipmentStatus;
        private String warehouseId;
        private ShippingAddress returnTo;
        private Boolean isReturn;
        private DeliveryConfirmation confirmation;
        private InternationalShipmentOptionsNullable customs;
        private AdvancedShipmentOptions advancedOptions;
        private InsuranceProvider insuranceProvider;
        private OrderSourceName orderSourceCode;
        private List<ModelPackage> packages;
        private Weight totalWeight;
        private String comparisonRateType;
        private ValidateAddress validateAddress;

        private Shipment0RequestBuilder(ShippingAddressTo shipTo, ShippingAddress shipFrom, String shipmentId) {
            this.shipTo = shipTo;
            this.shipFrom = shipFrom;
            this.shipmentId = shipmentId;
        }

        /**
         * Set tags
         * @param tags Arbitrary tags associated with this shipment.  Tags can be used to categorize shipments, and shipments can be queried by their tags.  (optional)
         * @return Shipment0RequestBuilder
         */
        public Shipment0RequestBuilder tags(List<Tag> tags) {
            this.tags = tags;
            return this;
        }
        
        /**
         * Set shipmentId
         * @param shipmentId A string that uniquely identifies a ShipEngine resource, such as a carrier, label, shipment, etc. (optional)
         * @return Shipment0RequestBuilder
         */
        public Shipment0RequestBuilder shipmentId(String shipmentId) {
            this.shipmentId = shipmentId;
            return this;
        }
        
        /**
         * Set carrierId
         * @param carrierId A string that uniquely identifies a ShipEngine resource, such as a carrier, label, shipment, etc. (optional)
         * @return Shipment0RequestBuilder
         */
        public Shipment0RequestBuilder carrierId(String carrierId) {
            this.carrierId = carrierId;
            return this;
        }
        
        /**
         * Set serviceCode
         * @param serviceCode A [carrier service](https://www.shipengine.com/docs/shipping/use-a-carrier-service/), such as &#x60;fedex_ground&#x60;, &#x60;usps_first_class_mail&#x60;, &#x60;flat_rate_envelope&#x60;, etc.  (optional)
         * @return Shipment0RequestBuilder
         */
        public Shipment0RequestBuilder serviceCode(String serviceCode) {
            this.serviceCode = serviceCode;
            return this;
        }
        
        /**
         * Set externalOrderId
         * @param externalOrderId ID that the Order Source assigned (optional)
         * @return Shipment0RequestBuilder
         */
        public Shipment0RequestBuilder externalOrderId(String externalOrderId) {
            this.externalOrderId = externalOrderId;
            return this;
        }
        
        /**
         * Set items
         * @param items Describe the packages included in this shipment as related to potential metadata that was imported from external order sources  (optional)
         * @return Shipment0RequestBuilder
         */
        public Shipment0RequestBuilder items(List<ShipmentItem> items) {
            this.items = items;
            return this;
        }
        
        /**
         * Set taxIdentifiers
         * @param taxIdentifiers  (optional)
         * @return Shipment0RequestBuilder
         */
        public Shipment0RequestBuilder taxIdentifiers(List<TaxIdentifier> taxIdentifiers) {
            this.taxIdentifiers = taxIdentifiers;
            return this;
        }
        
        /**
         * Set externalShipmentId
         * @param externalShipmentId A unique user-defined key to identify a shipment.  This can be used to retrieve the shipment.  &gt; **Warning:** The &#x60;external_shipment_id&#x60; is limited to 50 characters. Any additional characters will be truncated.  (optional)
         * @return Shipment0RequestBuilder
         */
        public Shipment0RequestBuilder externalShipmentId(String externalShipmentId) {
            this.externalShipmentId = externalShipmentId;
            return this;
        }
        
        /**
         * Set shipmentNumber
         * @param shipmentNumber A non-unique user-defined number used to identify a shipment.  If undefined, this will match the external_shipment_id of the shipment.  &gt; **Warning:** The &#x60;shipment_number&#x60; is limited to 50 characters. Any additional characters will be truncated.  (optional)
         * @return Shipment0RequestBuilder
         */
        public Shipment0RequestBuilder shipmentNumber(String shipmentNumber) {
            this.shipmentNumber = shipmentNumber;
            return this;
        }
        
        /**
         * Set shipDate
         * @param shipDate An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date, but not a specific time.  The value _may_ contain a time component, but it will be set to &#x60;00:00:00&#x60; UTC by ShipEngine.  (optional)
         * @return Shipment0RequestBuilder
         */
        public Shipment0RequestBuilder shipDate(OffsetDateTime shipDate) {
            this.shipDate = shipDate;
            return this;
        }
        
        /**
         * Set createdAt
         * @param createdAt An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date and time.  (optional)
         * @return Shipment0RequestBuilder
         */
        public Shipment0RequestBuilder createdAt(OffsetDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }
        
        /**
         * Set modifiedAt
         * @param modifiedAt An [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) string that represents a date and time.  (optional)
         * @return Shipment0RequestBuilder
         */
        public Shipment0RequestBuilder modifiedAt(OffsetDateTime modifiedAt) {
            this.modifiedAt = modifiedAt;
            return this;
        }
        
        /**
         * Set shipmentStatus
         * @param shipmentStatus The current status of the shipment (optional)
         * @return Shipment0RequestBuilder
         */
        public Shipment0RequestBuilder shipmentStatus(ShipmentStatus shipmentStatus) {
            this.shipmentStatus = shipmentStatus;
            return this;
        }
        
        /**
         * Set warehouseId
         * @param warehouseId A string that uniquely identifies a ShipEngine resource, such as a carrier, label, shipment, etc. (optional)
         * @return Shipment0RequestBuilder
         */
        public Shipment0RequestBuilder warehouseId(String warehouseId) {
            this.warehouseId = warehouseId;
            return this;
        }
        
        /**
         * Set returnTo
         * @param returnTo The return address for this shipment.  Defaults to the &#x60;ship_from&#x60; address.  (optional)
         * @return Shipment0RequestBuilder
         */
        public Shipment0RequestBuilder returnTo(ShippingAddress returnTo) {
            this.returnTo = returnTo;
            return this;
        }
        
        /**
         * Set isReturn
         * @param isReturn An optional indicator if the shipment is intended to be a return. Defaults to false if not provided.  (optional, default to false)
         * @return Shipment0RequestBuilder
         */
        public Shipment0RequestBuilder isReturn(Boolean isReturn) {
            this.isReturn = isReturn;
            return this;
        }
        
        /**
         * Set confirmation
         * @param confirmation The type of delivery confirmation that is required for this shipment. (optional)
         * @return Shipment0RequestBuilder
         */
        public Shipment0RequestBuilder confirmation(DeliveryConfirmation confirmation) {
            this.confirmation = confirmation;
            return this;
        }
        
        /**
         * Set customs
         * @param customs Customs information.  This is usually only needed for international shipments.  (optional)
         * @return Shipment0RequestBuilder
         */
        public Shipment0RequestBuilder customs(InternationalShipmentOptionsNullable customs) {
            this.customs = customs;
            return this;
        }
        
        /**
         * Set advancedOptions
         * @param advancedOptions Advanced shipment options.  These are entirely optional. (optional)
         * @return Shipment0RequestBuilder
         */
        public Shipment0RequestBuilder advancedOptions(AdvancedShipmentOptions advancedOptions) {
            this.advancedOptions = advancedOptions;
            return this;
        }
        
        /**
         * Set insuranceProvider
         * @param insuranceProvider The insurance provider to use for any insured packages in the shipment.  (optional)
         * @return Shipment0RequestBuilder
         */
        public Shipment0RequestBuilder insuranceProvider(InsuranceProvider insuranceProvider) {
            this.insuranceProvider = insuranceProvider;
            return this;
        }
        
        /**
         * Set orderSourceCode
         * @param orderSourceCode  (optional)
         * @return Shipment0RequestBuilder
         */
        public Shipment0RequestBuilder orderSourceCode(OrderSourceName orderSourceCode) {
            this.orderSourceCode = orderSourceCode;
            return this;
        }
        
        /**
         * Set packages
         * @param packages The packages in the shipment.  &gt; **Note:** Some carriers only allow one package per shipment.  If you attempt to create a multi-package shipment for a carrier that doesn&#39;t allow it, an error will be returned.  (optional)
         * @return Shipment0RequestBuilder
         */
        public Shipment0RequestBuilder packages(List<ModelPackage> packages) {
            this.packages = packages;
            return this;
        }
        
        /**
         * Set totalWeight
         * @param totalWeight The combined weight of all packages in the shipment (optional)
         * @return Shipment0RequestBuilder
         */
        public Shipment0RequestBuilder totalWeight(Weight totalWeight) {
            this.totalWeight = totalWeight;
            return this;
        }
        
        /**
         * Set comparisonRateType
         * @param comparisonRateType Calculate a rate for this shipment with the requested carrier using a ratecard that differs from the default.  Only supported for UPS and USPS. (optional)
         * @return Shipment0RequestBuilder
         */
        public Shipment0RequestBuilder comparisonRateType(String comparisonRateType) {
            this.comparisonRateType = comparisonRateType;
            return this;
        }
        
        /**
         * Set validateAddress
         * @param validateAddress  (optional)
         * @return Shipment0RequestBuilder
         */
        public Shipment0RequestBuilder validateAddress(ValidateAddress validateAddress) {
            this.validateAddress = validateAddress;
            return this;
        }
        
        /**
         * Build call for shipment_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateShipmentRequestBody updateShipmentRequestBody = buildBodyParams();
            return shipment_0Call(shipmentId, updateShipmentRequestBody, _callback);
        }

        private UpdateShipmentRequestBody buildBodyParams() {
            UpdateShipmentRequestBody updateShipmentRequestBody = new UpdateShipmentRequestBody();
            return updateShipmentRequestBody;
        }

        /**
         * Execute shipment_0 request
         * @return CreateAndValidateShipment
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public CreateAndValidateShipment execute() throws ApiException {
            UpdateShipmentRequestBody updateShipmentRequestBody = buildBodyParams();
            ApiResponse<CreateAndValidateShipment> localVarResp = shipment_0WithHttpInfo(shipmentId, updateShipmentRequestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute shipment_0 request with HTTP info returned
         * @return ApiResponse&lt;CreateAndValidateShipment&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateAndValidateShipment> executeWithHttpInfo() throws ApiException {
            UpdateShipmentRequestBody updateShipmentRequestBody = buildBodyParams();
            return shipment_0WithHttpInfo(shipmentId, updateShipmentRequestBody);
        }

        /**
         * Execute shipment_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateAndValidateShipment> _callback) throws ApiException {
            UpdateShipmentRequestBody updateShipmentRequestBody = buildBodyParams();
            return shipment_0Async(shipmentId, updateShipmentRequestBody, _callback);
        }
    }

    /**
     * Update Shipment By ID
     * Update a shipment object based on its ID
     * @param shipmentId Shipment ID (required)
     * @param updateShipmentRequestBody  (required)
     * @return Shipment0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public Shipment0RequestBuilder shipment_0(ShippingAddressTo shipTo, ShippingAddress shipFrom, String shipmentId) throws IllegalArgumentException {
        if (shipTo == null) throw new IllegalArgumentException("\"shipTo\" is required but got null");
        if (shipFrom == null) throw new IllegalArgumentException("\"shipFrom\" is required but got null");
        if (shipmentId == null) throw new IllegalArgumentException("\"shipmentId\" is required but got null");
            if (shipmentId != null && shipmentId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for shipmentId. Length must be greater than or equal to 1.");
            }

        return new Shipment0RequestBuilder(shipTo, shipFrom, shipmentId);
    }
    private okhttp3.Call shipment_1Call(String shipmentId, String tagName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/shipments/{shipment_id}/tags/{tag_name}"
            .replace("{" + "shipment_id" + "}", localVarApiClient.escapeString(shipmentId.toString()))
            .replace("{" + "tag_name" + "}", localVarApiClient.escapeString(tagName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shipment_1ValidateBeforeCall(String shipmentId, String tagName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException("Missing the required parameter 'shipmentId' when calling shipment_1(Async)");
        }

        // verify the required parameter 'tagName' is set
        if (tagName == null) {
            throw new ApiException("Missing the required parameter 'tagName' when calling shipment_1(Async)");
        }

        return shipment_1Call(shipmentId, tagName, _callback);

    }


    private ApiResponse<TagShipmentResponseBody> shipment_1WithHttpInfo(String shipmentId, String tagName) throws ApiException {
        okhttp3.Call localVarCall = shipment_1ValidateBeforeCall(shipmentId, tagName, null);
        Type localVarReturnType = new TypeToken<TagShipmentResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call shipment_1Async(String shipmentId, String tagName, final ApiCallback<TagShipmentResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = shipment_1ValidateBeforeCall(shipmentId, tagName, _callback);
        Type localVarReturnType = new TypeToken<TagShipmentResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Shipment1RequestBuilder {
        private final String shipmentId;
        private final String tagName;

        private Shipment1RequestBuilder(String shipmentId, String tagName) {
            this.shipmentId = shipmentId;
            this.tagName = tagName;
        }

        /**
         * Build call for shipment_1
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return shipment_1Call(shipmentId, tagName, _callback);
        }


        /**
         * Execute shipment_1 request
         * @return TagShipmentResponseBody
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
         </table>
         */
        public TagShipmentResponseBody execute() throws ApiException {
            ApiResponse<TagShipmentResponseBody> localVarResp = shipment_1WithHttpInfo(shipmentId, tagName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute shipment_1 request with HTTP info returned
         * @return ApiResponse&lt;TagShipmentResponseBody&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TagShipmentResponseBody> executeWithHttpInfo() throws ApiException {
            return shipment_1WithHttpInfo(shipmentId, tagName);
        }

        /**
         * Execute shipment_1 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TagShipmentResponseBody> _callback) throws ApiException {
            return shipment_1Async(shipmentId, tagName, _callback);
        }
    }

    /**
     * Add Tag to Shipment
     * Add a tag to the shipment object
     * @param shipmentId Shipment ID (required)
     * @param tagName  (required)
     * @return Shipment1RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
     </table>
     */
    public Shipment1RequestBuilder shipment_1(String shipmentId, String tagName) throws IllegalArgumentException {
        if (shipmentId == null) throw new IllegalArgumentException("\"shipmentId\" is required but got null");
            if (shipmentId != null && shipmentId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for shipmentId. Length must be greater than or equal to 1.");
            }

        if (tagName == null) throw new IllegalArgumentException("\"tagName\" is required but got null");
            if (tagName != null && tagName.length() < 1) {
              throw new IllegalArgumentException("Invalid value for tagName. Length must be greater than or equal to 1.");
            }

        return new Shipment1RequestBuilder(shipmentId, tagName);
    }
    private okhttp3.Call shipment_2Call(String shipmentId, String tagName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/shipments/{shipment_id}/tags/{tag_name}"
            .replace("{" + "shipment_id" + "}", localVarApiClient.escapeString(shipmentId.toString()))
            .replace("{" + "tag_name" + "}", localVarApiClient.escapeString(tagName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shipment_2ValidateBeforeCall(String shipmentId, String tagName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException("Missing the required parameter 'shipmentId' when calling shipment_2(Async)");
        }

        // verify the required parameter 'tagName' is set
        if (tagName == null) {
            throw new ApiException("Missing the required parameter 'tagName' when calling shipment_2(Async)");
        }

        return shipment_2Call(shipmentId, tagName, _callback);

    }


    private ApiResponse<String> shipment_2WithHttpInfo(String shipmentId, String tagName) throws ApiException {
        okhttp3.Call localVarCall = shipment_2ValidateBeforeCall(shipmentId, tagName, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call shipment_2Async(String shipmentId, String tagName, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = shipment_2ValidateBeforeCall(shipmentId, tagName, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Shipment2RequestBuilder {
        private final String shipmentId;
        private final String tagName;

        private Shipment2RequestBuilder(String shipmentId, String tagName) {
            this.shipmentId = shipmentId;
            this.tagName = tagName;
        }

        /**
         * Build call for shipment_2
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return shipment_2Call(shipmentId, tagName, _callback);
        }


        /**
         * Execute shipment_2 request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = shipment_2WithHttpInfo(shipmentId, tagName);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute shipment_2 request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return shipment_2WithHttpInfo(shipmentId, tagName);
        }

        /**
         * Execute shipment_2 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return shipment_2Async(shipmentId, tagName, _callback);
        }
    }

    /**
     * Remove Tag from Shipment
     * Remove an existing tag from the Shipment object
     * @param shipmentId Shipment ID (required)
     * @param tagName  (required)
     * @return Shipment2RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
     </table>
     */
    public Shipment2RequestBuilder shipment_2(String shipmentId, String tagName) throws IllegalArgumentException {
        if (shipmentId == null) throw new IllegalArgumentException("\"shipmentId\" is required but got null");
            if (shipmentId != null && shipmentId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for shipmentId. Length must be greater than or equal to 1.");
            }

        if (tagName == null) throw new IllegalArgumentException("\"tagName\" is required but got null");
            if (tagName != null && tagName.length() < 1) {
              throw new IllegalArgumentException("Invalid value for tagName. Length must be greater than or equal to 1.");
            }

        return new Shipment2RequestBuilder(shipmentId, tagName);
    }
    private okhttp3.Call shipmentsCall(ShipmentStatus shipmentStatus, String batchId, String tag, OffsetDateTime createdAtStart, OffsetDateTime createdAtEnd, OffsetDateTime modifiedAtStart, OffsetDateTime modifiedAtEnd, Integer page, Integer pageSize, String salesOrderId, SortDir sortDir, ShipmentsSortBy sortBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/shipments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (shipmentStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shipment_status", shipmentStatus));
        }

        if (batchId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("batch_id", batchId));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (createdAtStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at_start", createdAtStart));
        }

        if (createdAtEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("created_at_end", createdAtEnd));
        }

        if (modifiedAtStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_at_start", modifiedAtStart));
        }

        if (modifiedAtEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modified_at_end", modifiedAtEnd));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_size", pageSize));
        }

        if (salesOrderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sales_order_id", salesOrderId));
        }

        if (sortDir != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_dir", sortDir));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_by", sortBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shipmentsValidateBeforeCall(ShipmentStatus shipmentStatus, String batchId, String tag, OffsetDateTime createdAtStart, OffsetDateTime createdAtEnd, OffsetDateTime modifiedAtStart, OffsetDateTime modifiedAtEnd, Integer page, Integer pageSize, String salesOrderId, SortDir sortDir, ShipmentsSortBy sortBy, final ApiCallback _callback) throws ApiException {
        return shipmentsCall(shipmentStatus, batchId, tag, createdAtStart, createdAtEnd, modifiedAtStart, modifiedAtEnd, page, pageSize, salesOrderId, sortDir, sortBy, _callback);

    }


    private ApiResponse<ListShipmentsResponseBody> shipmentsWithHttpInfo(ShipmentStatus shipmentStatus, String batchId, String tag, OffsetDateTime createdAtStart, OffsetDateTime createdAtEnd, OffsetDateTime modifiedAtStart, OffsetDateTime modifiedAtEnd, Integer page, Integer pageSize, String salesOrderId, SortDir sortDir, ShipmentsSortBy sortBy) throws ApiException {
        okhttp3.Call localVarCall = shipmentsValidateBeforeCall(shipmentStatus, batchId, tag, createdAtStart, createdAtEnd, modifiedAtStart, modifiedAtEnd, page, pageSize, salesOrderId, sortDir, sortBy, null);
        Type localVarReturnType = new TypeToken<ListShipmentsResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call shipmentsAsync(ShipmentStatus shipmentStatus, String batchId, String tag, OffsetDateTime createdAtStart, OffsetDateTime createdAtEnd, OffsetDateTime modifiedAtStart, OffsetDateTime modifiedAtEnd, Integer page, Integer pageSize, String salesOrderId, SortDir sortDir, ShipmentsSortBy sortBy, final ApiCallback<ListShipmentsResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = shipmentsValidateBeforeCall(shipmentStatus, batchId, tag, createdAtStart, createdAtEnd, modifiedAtStart, modifiedAtEnd, page, pageSize, salesOrderId, sortDir, sortBy, _callback);
        Type localVarReturnType = new TypeToken<ListShipmentsResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ShipmentsRequestBuilder {
        private ShipmentStatus shipmentStatus;
        private String batchId;
        private String tag;
        private OffsetDateTime createdAtStart;
        private OffsetDateTime createdAtEnd;
        private OffsetDateTime modifiedAtStart;
        private OffsetDateTime modifiedAtEnd;
        private Integer page;
        private Integer pageSize;
        private String salesOrderId;
        private SortDir sortDir;
        private ShipmentsSortBy sortBy;

        private ShipmentsRequestBuilder() {
        }

        /**
         * Set shipmentStatus
         * @param shipmentStatus  (optional)
         * @return ShipmentsRequestBuilder
         */
        public ShipmentsRequestBuilder shipmentStatus(ShipmentStatus shipmentStatus) {
            this.shipmentStatus = shipmentStatus;
            return this;
        }
        
        /**
         * Set batchId
         * @param batchId Batch ID (optional)
         * @return ShipmentsRequestBuilder
         */
        public ShipmentsRequestBuilder batchId(String batchId) {
            this.batchId = batchId;
            return this;
        }
        
        /**
         * Set tag
         * @param tag Search for shipments based on the custom tag added to the shipment object (optional)
         * @return ShipmentsRequestBuilder
         */
        public ShipmentsRequestBuilder tag(String tag) {
            this.tag = tag;
            return this;
        }
        
        /**
         * Set createdAtStart
         * @param createdAtStart Used to create a filter for when a resource was created (ex. A shipment that was created after a certain time) (optional)
         * @return ShipmentsRequestBuilder
         */
        public ShipmentsRequestBuilder createdAtStart(OffsetDateTime createdAtStart) {
            this.createdAtStart = createdAtStart;
            return this;
        }
        
        /**
         * Set createdAtEnd
         * @param createdAtEnd Used to create a filter for when a resource was created, (ex. A shipment that was created before a certain time) (optional)
         * @return ShipmentsRequestBuilder
         */
        public ShipmentsRequestBuilder createdAtEnd(OffsetDateTime createdAtEnd) {
            this.createdAtEnd = createdAtEnd;
            return this;
        }
        
        /**
         * Set modifiedAtStart
         * @param modifiedAtStart Used to create a filter for when a resource was modified (ex. A shipment that was modified after a certain time) (optional)
         * @return ShipmentsRequestBuilder
         */
        public ShipmentsRequestBuilder modifiedAtStart(OffsetDateTime modifiedAtStart) {
            this.modifiedAtStart = modifiedAtStart;
            return this;
        }
        
        /**
         * Set modifiedAtEnd
         * @param modifiedAtEnd Used to create a filter for when a resource was modified (ex. A shipment that was modified before a certain time) (optional)
         * @return ShipmentsRequestBuilder
         */
        public ShipmentsRequestBuilder modifiedAtEnd(OffsetDateTime modifiedAtEnd) {
            this.modifiedAtEnd = modifiedAtEnd;
            return this;
        }
        
        /**
         * Set page
         * @param page Return a specific page of results. Defaults to the first page. If set to a number that&#39;s greater than the number of pages of results, an empty page is returned.  (optional, default to 1)
         * @return ShipmentsRequestBuilder
         */
        public ShipmentsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set pageSize
         * @param pageSize The number of results to return per response. (optional, default to 25)
         * @return ShipmentsRequestBuilder
         */
        public ShipmentsRequestBuilder pageSize(Integer pageSize) {
            this.pageSize = pageSize;
            return this;
        }
        
        /**
         * Set salesOrderId
         * @param salesOrderId Sales Order ID (optional)
         * @return ShipmentsRequestBuilder
         */
        public ShipmentsRequestBuilder salesOrderId(String salesOrderId) {
            this.salesOrderId = salesOrderId;
            return this;
        }
        
        /**
         * Set sortDir
         * @param sortDir Controls the sort order of the query. (optional)
         * @return ShipmentsRequestBuilder
         */
        public ShipmentsRequestBuilder sortDir(SortDir sortDir) {
            this.sortDir = sortDir;
            return this;
        }
        
        /**
         * Set sortBy
         * @param sortBy  (optional)
         * @return ShipmentsRequestBuilder
         */
        public ShipmentsRequestBuilder sortBy(ShipmentsSortBy sortBy) {
            this.sortBy = sortBy;
            return this;
        }
        
        /**
         * Build call for shipments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return shipmentsCall(shipmentStatus, batchId, tag, createdAtStart, createdAtEnd, modifiedAtStart, modifiedAtEnd, page, pageSize, salesOrderId, sortDir, sortBy, _callback);
        }


        /**
         * Execute shipments request
         * @return ListShipmentsResponseBody
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ListShipmentsResponseBody execute() throws ApiException {
            ApiResponse<ListShipmentsResponseBody> localVarResp = shipmentsWithHttpInfo(shipmentStatus, batchId, tag, createdAtStart, createdAtEnd, modifiedAtStart, modifiedAtEnd, page, pageSize, salesOrderId, sortDir, sortBy);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute shipments request with HTTP info returned
         * @return ApiResponse&lt;ListShipmentsResponseBody&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ListShipmentsResponseBody> executeWithHttpInfo() throws ApiException {
            return shipmentsWithHttpInfo(shipmentStatus, batchId, tag, createdAtStart, createdAtEnd, modifiedAtStart, modifiedAtEnd, page, pageSize, salesOrderId, sortDir, sortBy);
        }

        /**
         * Execute shipments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ListShipmentsResponseBody> _callback) throws ApiException {
            return shipmentsAsync(shipmentStatus, batchId, tag, createdAtStart, createdAtEnd, modifiedAtStart, modifiedAtEnd, page, pageSize, salesOrderId, sortDir, sortBy, _callback);
        }
    }

    /**
     * List Shipments
     * Get list of Shipments
     * @return ShipmentsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was a success. </td><td>  -  </td></tr>
     </table>
     */
    public ShipmentsRequestBuilder shipments() throws IllegalArgumentException {
        return new ShipmentsRequestBuilder();
    }
    private okhttp3.Call shipments_0Call(CreateShipmentsRequestBody createShipmentsRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createShipmentsRequestBody;

        // create path and map variables
        String localVarPath = "/v1/shipments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shipments_0ValidateBeforeCall(CreateShipmentsRequestBody createShipmentsRequestBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createShipmentsRequestBody' is set
        if (createShipmentsRequestBody == null) {
            throw new ApiException("Missing the required parameter 'createShipmentsRequestBody' when calling shipments_0(Async)");
        }

        return shipments_0Call(createShipmentsRequestBody, _callback);

    }


    private ApiResponse<CreateShipmentsResponseBody> shipments_0WithHttpInfo(CreateShipmentsRequestBody createShipmentsRequestBody) throws ApiException {
        okhttp3.Call localVarCall = shipments_0ValidateBeforeCall(createShipmentsRequestBody, null);
        Type localVarReturnType = new TypeToken<CreateShipmentsResponseBody>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call shipments_0Async(CreateShipmentsRequestBody createShipmentsRequestBody, final ApiCallback<CreateShipmentsResponseBody> _callback) throws ApiException {

        okhttp3.Call localVarCall = shipments_0ValidateBeforeCall(createShipmentsRequestBody, _callback);
        Type localVarReturnType = new TypeToken<CreateShipmentsResponseBody>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Shipments0RequestBuilder {
        private final List<AddressValidatingShipment> shipments;

        private Shipments0RequestBuilder(List<AddressValidatingShipment> shipments) {
            this.shipments = shipments;
        }

        /**
         * Build call for shipments_0
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            CreateShipmentsRequestBody createShipmentsRequestBody = buildBodyParams();
            return shipments_0Call(createShipmentsRequestBody, _callback);
        }

        private CreateShipmentsRequestBody buildBodyParams() {
            CreateShipmentsRequestBody createShipmentsRequestBody = new CreateShipmentsRequestBody();
            createShipmentsRequestBody.shipments(this.shipments);
            return createShipmentsRequestBody;
        }

        /**
         * Execute shipments_0 request
         * @return CreateShipmentsResponseBody
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
         </table>
         */
        public CreateShipmentsResponseBody execute() throws ApiException {
            CreateShipmentsRequestBody createShipmentsRequestBody = buildBodyParams();
            ApiResponse<CreateShipmentsResponseBody> localVarResp = shipments_0WithHttpInfo(createShipmentsRequestBody);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute shipments_0 request with HTTP info returned
         * @return ApiResponse&lt;CreateShipmentsResponseBody&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateShipmentsResponseBody> executeWithHttpInfo() throws ApiException {
            CreateShipmentsRequestBody createShipmentsRequestBody = buildBodyParams();
            return shipments_0WithHttpInfo(createShipmentsRequestBody);
        }

        /**
         * Execute shipments_0 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateShipmentsResponseBody> _callback) throws ApiException {
            CreateShipmentsRequestBody createShipmentsRequestBody = buildBodyParams();
            return shipments_0Async(createShipmentsRequestBody, _callback);
        }
    }

    /**
     * Create Shipments
     * Create one or multiple shipments.
     * @param createShipmentsRequestBody  (required)
     * @return Shipments0RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The requested object creation was a success. </td><td>  -  </td></tr>
     </table>
     */
    public Shipments0RequestBuilder shipments_0(List<AddressValidatingShipment> shipments) throws IllegalArgumentException {
        if (shipments == null) throw new IllegalArgumentException("\"shipments\" is required but got null");
        return new Shipments0RequestBuilder(shipments);
    }
    private okhttp3.Call shipments_1Call(String shipmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/shipments/{shipment_id}/cancel"
            .replace("{" + "shipment_id" + "}", localVarApiClient.escapeString(shipmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shipments_1ValidateBeforeCall(String shipmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shipmentId' is set
        if (shipmentId == null) {
            throw new ApiException("Missing the required parameter 'shipmentId' when calling shipments_1(Async)");
        }

        return shipments_1Call(shipmentId, _callback);

    }


    private ApiResponse<String> shipments_1WithHttpInfo(String shipmentId) throws ApiException {
        okhttp3.Call localVarCall = shipments_1ValidateBeforeCall(shipmentId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call shipments_1Async(String shipmentId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = shipments_1ValidateBeforeCall(shipmentId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class Shipments1RequestBuilder {
        private final String shipmentId;

        private Shipments1RequestBuilder(String shipmentId) {
            this.shipmentId = shipmentId;
        }

        /**
         * Build call for shipments_1
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return shipments_1Call(shipmentId, _callback);
        }


        /**
         * Execute shipments_1 request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = shipments_1WithHttpInfo(shipmentId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute shipments_1 request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return shipments_1WithHttpInfo(shipmentId);
        }

        /**
         * Execute shipments_1 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return shipments_1Async(shipmentId, _callback);
        }
    }

    /**
     * Cancel a Shipment
     * Mark a shipment cancelled, if it is no longer needed or being used by your organized. Any label associated with the shipment needs to be voided first An example use case would be if a batch label creation job is going to run at a set time and only queries &#x60;pending&#x60; shipments. Marking a shipment as cancelled would remove it from this process 
     * @param shipmentId Shipment ID (required)
     * @return Shipments1RequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The request was successful. </td><td>  -  </td></tr>
     </table>
     */
    public Shipments1RequestBuilder shipments_1(String shipmentId) throws IllegalArgumentException {
        if (shipmentId == null) throw new IllegalArgumentException("\"shipmentId\" is required but got null");
            if (shipmentId != null && shipmentId.length() < 1) {
              throw new IllegalArgumentException("Invalid value for shipmentId. Length must be greater than or equal to 1.");
            }

        return new Shipments1RequestBuilder(shipmentId);
    }
    private okhttp3.Call updateTagsCall(UpdateShipmentsTags updateShipmentsTags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateShipmentsTags;

        // create path and map variables
        String localVarPath = "/v1/shipments/tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTagsValidateBeforeCall(UpdateShipmentsTags updateShipmentsTags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateShipmentsTags' is set
        if (updateShipmentsTags == null) {
            throw new ApiException("Missing the required parameter 'updateShipmentsTags' when calling updateTags(Async)");
        }

        return updateTagsCall(updateShipmentsTags, _callback);

    }


    private ApiResponse<Void> updateTagsWithHttpInfo(UpdateShipmentsTags updateShipmentsTags) throws ApiException {
        okhttp3.Call localVarCall = updateTagsValidateBeforeCall(updateShipmentsTags, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateTagsAsync(UpdateShipmentsTags updateShipmentsTags, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTagsValidateBeforeCall(updateShipmentsTags, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class UpdateTagsRequestBuilder {
        private List<UpdateShipmentsTagsShipmentsTagsInner> shipmentsTags;

        private UpdateTagsRequestBuilder() {
        }

        /**
         * Set shipmentsTags
         * @param shipmentsTags  (optional)
         * @return UpdateTagsRequestBuilder
         */
        public UpdateTagsRequestBuilder shipmentsTags(List<UpdateShipmentsTagsShipmentsTagsInner> shipmentsTags) {
            this.shipmentsTags = shipmentsTags;
            return this;
        }
        
        /**
         * Build call for updateTags
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UpdateShipmentsTags updateShipmentsTags = buildBodyParams();
            return updateTagsCall(updateShipmentsTags, _callback);
        }

        private UpdateShipmentsTags buildBodyParams() {
            UpdateShipmentsTags updateShipmentsTags = new UpdateShipmentsTags();
            updateShipmentsTags.shipmentsTags(this.shipmentsTags);
            return updateShipmentsTags;
        }

        /**
         * Execute updateTags request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            UpdateShipmentsTags updateShipmentsTags = buildBodyParams();
            updateTagsWithHttpInfo(updateShipmentsTags);
        }

        /**
         * Execute updateTags request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            UpdateShipmentsTags updateShipmentsTags = buildBodyParams();
            return updateTagsWithHttpInfo(updateShipmentsTags);
        }

        /**
         * Execute updateTags request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            UpdateShipmentsTags updateShipmentsTags = buildBodyParams();
            return updateTagsAsync(updateShipmentsTags, _callback);
        }
    }

    /**
     * Update Shipments Tags
     * Update Shipments Tags
     * @param updateShipmentsTags  (required)
     * @return UpdateTagsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> NoContent </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTagsRequestBuilder updateTags() throws IllegalArgumentException {
        return new UpdateTagsRequestBuilder();
    }
}
