/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202403202303
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AlternativeIdentifier;
import com.konfigthis.client.model.CreateLabelFromShipmentRequestBody;
import com.konfigthis.client.model.CreateReturnLabelRequestBody;
import com.konfigthis.client.model.DisplayScheme;
import com.konfigthis.client.model.Label;
import com.konfigthis.client.model.LabelChargeEvent;
import com.konfigthis.client.model.LabelDownload;
import com.konfigthis.client.model.LabelDownloadType;
import com.konfigthis.client.model.LabelFormat;
import com.konfigthis.client.model.LabelInsuranceClaim;
import com.konfigthis.client.model.LabelLayout;
import com.konfigthis.client.model.LabelPackagesInner;
import com.konfigthis.client.model.LabelStatus;
import com.konfigthis.client.model.MonetaryValue;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.OptionalLinkNullable;
import com.konfigthis.client.model.PagedListResponseBody;
import com.konfigthis.client.model.PartialShipment;
import com.konfigthis.client.model.PurchaseLabelWithoutShipment;
import com.konfigthis.client.model.SortDir;
import com.konfigthis.client.model.TrackingInformation;
import com.konfigthis.client.model.TrackingStatus;
import com.konfigthis.client.model.ValidateAddress;
import com.konfigthis.client.model.VoidLabelResponseBody;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for LabelsApi
 */
@Disabled
public class LabelsApiTest {

    private static LabelsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new LabelsApi(apiClient);
    }

    /**
     * Create a return label
     *
     * Create a return label
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createReturnLabelTest() throws ApiException {
        String labelId = null;
        LabelChargeEvent chargeEvent = null;
        LabelLayout labelLayout = null;
        LabelFormat labelFormat = null;
        LabelDownloadType labelDownloadType = null;
        DisplayScheme displayScheme = null;
        String labelImageId = null;
        Label response = api.createReturnLabel(labelId)
                .chargeEvent(chargeEvent)
                .labelLayout(labelLayout)
                .labelFormat(labelFormat)
                .labelDownloadType(labelDownloadType)
                .displayScheme(displayScheme)
                .labelImageId(labelImageId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Label By External Shipment ID
     *
     * Find a label by using the external shipment id that was used during label creation 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByExternalShipmentIdTest() throws ApiException {
        String externalShipmentId = null;
        LabelDownloadType labelDownloadType = null;
        Label response = api.getByExternalShipmentId(externalShipmentId)
                .labelDownloadType(labelDownloadType)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Label By ID
     *
     * Retrieve information for individual labels.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String labelId = null;
        LabelDownloadType labelDownloadType = null;
        Label response = api.getById(labelId)
                .labelDownloadType(labelDownloadType)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Label Tracking Information
     *
     * Retrieve the label&#39;s tracking information
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTrackingInfoTest() throws ApiException {
        String labelId = null;
        TrackingInformation response = api.getTrackingInfo(labelId)
                .execute();
        // TODO: test validations
    }

    /**
     * Purchase Label
     *
     * Purchase and print a label for shipment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void labelTest() throws ApiException {
        String labelId = null;
        LabelStatus status = null;
        String shipmentId = null;
        PartialShipment shipment = null;
        OffsetDateTime shipDate = null;
        OffsetDateTime createdAt = null;
        MonetaryValue shipmentCost = null;
        MonetaryValue insuranceCost = null;
        MonetaryValue requestedComparisonAmount = null;
        String trackingNumber = null;
        Boolean isReturnLabel = null;
        String rmaNumber = null;
        Boolean isInternational = null;
        String batchId = null;
        String carrierId = null;
        LabelChargeEvent chargeEvent = null;
        String outboundLabelId = null;
        String serviceCode = null;
        Boolean testLabel = null;
        String packageCode = null;
        ValidateAddress validateAddress = null;
        Boolean voided = null;
        OffsetDateTime voidedAt = null;
        LabelDownloadType labelDownloadType = null;
        LabelFormat labelFormat = null;
        DisplayScheme displayScheme = null;
        LabelLayout labelLayout = null;
        Boolean trackable = null;
        String labelImageId = null;
        String carrierCode = null;
        TrackingStatus trackingStatus = null;
        LabelDownload labelDownload = null;
        OptionalLinkNullable formDownload = null;
        LabelInsuranceClaim insuranceClaim = null;
        List<LabelPackagesInner> packages = null;
        List<AlternativeIdentifier> alternativeIdentifiers = null;
        Label response = api.label()
                .labelId(labelId)
                .status(status)
                .shipmentId(shipmentId)
                .shipment(shipment)
                .shipDate(shipDate)
                .createdAt(createdAt)
                .shipmentCost(shipmentCost)
                .insuranceCost(insuranceCost)
                .requestedComparisonAmount(requestedComparisonAmount)
                .trackingNumber(trackingNumber)
                .isReturnLabel(isReturnLabel)
                .rmaNumber(rmaNumber)
                .isInternational(isInternational)
                .batchId(batchId)
                .carrierId(carrierId)
                .chargeEvent(chargeEvent)
                .outboundLabelId(outboundLabelId)
                .serviceCode(serviceCode)
                .testLabel(testLabel)
                .packageCode(packageCode)
                .validateAddress(validateAddress)
                .voided(voided)
                .voidedAt(voidedAt)
                .labelDownloadType(labelDownloadType)
                .labelFormat(labelFormat)
                .displayScheme(displayScheme)
                .labelLayout(labelLayout)
                .trackable(trackable)
                .labelImageId(labelImageId)
                .carrierCode(carrierCode)
                .trackingStatus(trackingStatus)
                .labelDownload(labelDownload)
                .formDownload(formDownload)
                .insuranceClaim(insuranceClaim)
                .packages(packages)
                .alternativeIdentifiers(alternativeIdentifiers)
                .execute();
        // TODO: test validations
    }

    /**
     * Void a Label By ID
     *
     * Void a label by ID to get a refund.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void label_0Test() throws ApiException {
        String labelId = null;
        VoidLabelResponseBody response = api.label_0(labelId)
                .execute();
        // TODO: test validations
    }

    /**
     * List labels
     *
     * This endpoint returns a list of labels that you&#39;ve [created](https://www.shipengine.com/docs/labels/create-a-label/). You can optionally filter the results as well as control their sort order and the number of results returned at a time.  By default, all labels are returned, 25 at a time, starting with the most recently created ones.  You can combine multiple filter options to narrow-down the results.  For example, if you only want to get your UPS labels for your east coast warehouse you could query by both &#x60;warehouse_id&#x60; and &#x60;carrier_id&#x60; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void labelsTest() throws ApiException {
        LabelStatus labelStatus = null;
        String serviceCode = null;
        String carrierId = null;
        String trackingNumber = null;
        String batchId = null;
        String rateId = null;
        String shipmentId = null;
        String warehouseId = null;
        OffsetDateTime createdAtStart = null;
        OffsetDateTime createdAtEnd = null;
        Integer page = null;
        Integer pageSize = null;
        SortDir sortDir = null;
        String sortBy = null;
        PagedListResponseBody response = api.labels()
                .labelStatus(labelStatus)
                .serviceCode(serviceCode)
                .carrierId(carrierId)
                .trackingNumber(trackingNumber)
                .batchId(batchId)
                .rateId(rateId)
                .shipmentId(shipmentId)
                .warehouseId(warehouseId)
                .createdAtStart(createdAtStart)
                .createdAtEnd(createdAtEnd)
                .page(page)
                .pageSize(pageSize)
                .sortDir(sortDir)
                .sortBy(sortBy)
                .execute();
        // TODO: test validations
    }

    /**
     * Purchase Label with Rate ID
     *
     * When retrieving rates for shipments using the &#x60;/rates&#x60; endpoint, the returned information contains a &#x60;rate_id&#x60; property that can be used to generate a label without having to refill in the shipment information repeatedly. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void purchaseLabelWithRateIdTest() throws ApiException {
        String rateId = null;
        ValidateAddress validateAddress = null;
        LabelLayout labelLayout = null;
        LabelFormat labelFormat = null;
        LabelDownloadType labelDownloadType = null;
        DisplayScheme displayScheme = null;
        Label response = api.purchaseLabelWithRateId(rateId)
                .validateAddress(validateAddress)
                .labelLayout(labelLayout)
                .labelFormat(labelFormat)
                .labelDownloadType(labelDownloadType)
                .displayScheme(displayScheme)
                .execute();
        // TODO: test validations
    }

    /**
     * Purchase Label with Shipment ID
     *
     * Purchase a label using a shipment ID that has already been created with the desired address and package info. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void purchaseLabelWithShipmentIdTest() throws ApiException {
        String shipmentId = null;
        ValidateAddress validateAddress = null;
        LabelLayout labelLayout = null;
        LabelFormat labelFormat = null;
        LabelDownloadType labelDownloadType = null;
        DisplayScheme displayScheme = null;
        Label response = api.purchaseLabelWithShipmentId(shipmentId)
                .validateAddress(validateAddress)
                .labelLayout(labelLayout)
                .labelFormat(labelFormat)
                .labelDownloadType(labelDownloadType)
                .displayScheme(displayScheme)
                .execute();
        // TODO: test validations
    }

}
