/*
 * ShipEngine API
 * ShipEngine's easy-to-use REST API lets you manage all of your shipping needs without worrying about the complexities of different carrier APIs and protocols. We handle all the heavy lifting so you can focus on providing a first-class shipping experience for your customers at the best possible prices.  Each of ShipEngine's features can be used by itself or in conjunction with each other to build powerful shipping functionality into your application or service.  ## Getting Started If you're new to REST APIs then be sure to read our [introduction to REST](https://www.shipengine.com/docs/rest/) to understand the basics.  Learn how to [authenticate yourself to ShipEngine](https://www.shipengine.com/docs/auth/), and then use our [sandbox environment](https://www.shipengine.com/docs/sandbox/) to kick the tires and get familiar with our API. If you run into any problems, then be sure to check the [error handling guide](https://www.shipengine.com/docs/errors/) for tips.  Here are some step-by-step **tutorials** to get you started:    - [Learn how to create your first shipping label](https://www.shipengine.com/docs/labels/create-a-label/)   - [Calculate shipping costs and compare rates across carriers](https://www.shipengine.com/docs/rates/)   - [Track packages on-demand or in real time](https://www.shipengine.com/docs/tracking/)   - [Validate mailing addresses anywhere on Earth](https://www.shipengine.com/docs/addresses/validation/)   ## Shipping Labels for Every Major Carrier ShipEngine makes it easy to [create shipping labels for any carrier](https://www.shipengine.com/docs/labels/create-a-label/) and [download them](https://www.shipengine.com/docs/labels/downloading/) in a [variety of file formats](https://www.shipengine.com/docs/labels/formats/). You can even customize labels with your own [messages](https://www.shipengine.com/docs/labels/messages/) and [images](https://www.shipengine.com/docs/labels/branding/).   ## Real-Time Package Tracking With ShipEngine you can [get the current status of a package](https://www.shipengine.com/docs/tracking/) or [subscribe to real-time tracking updates](https://www.shipengine.com/docs/tracking/webhooks/) via webhooks. You can also create [custimized tracking pages](https://www.shipengine.com/docs/tracking/branded-tracking-page/) with your own branding so your customers will always know where their package is.   ## Compare Shipping Costs Across Carriers Make sure you ship as cost-effectively as possible by [comparing rates across carriers](https://www.shipengine.com/docs/rates/get-shipment-rates/) using the ShipEngine Rates API. Or if you don't know the full shipment details yet, then you can [get rate estimates](https://www.shipengine.com/docs/rates/estimate/) with limited address info.   ## Worldwide Address Validation ShipEngine supports [address validation](https://www.shipengine.com/docs/addresses/validation/) for virtually [every country on Earth](https://www.shipengine.com/docs/addresses/validation/countries/), including the United States, Canada, Great Britain, Australia, Germany, France, Norway, Spain, Sweden, Israel, Italy, and over 160 others. 
 *
 * The version of the OpenAPI document: 1.1.202403202303
 * Contact: sales@shipengine.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.AddressValidatingShipment;
import com.konfigthis.client.model.AdvancedShipmentOptions;
import com.konfigthis.client.model.CreateAndValidateShipment;
import com.konfigthis.client.model.CreateShipmentsRequestBody;
import com.konfigthis.client.model.CreateShipmentsResponseBody;
import com.konfigthis.client.model.DeliveryConfirmation;
import com.konfigthis.client.model.InsuranceProvider;
import com.konfigthis.client.model.InternationalShipmentOptionsNullable;
import com.konfigthis.client.model.ListShipmentsResponseBody;
import com.konfigthis.client.model.ModelPackage;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.OrderSourceName;
import com.konfigthis.client.model.ParseShipmentRequestBody;
import com.konfigthis.client.model.ParseShipmentResponseBody;
import com.konfigthis.client.model.PartialShipment;
import com.konfigthis.client.model.RatesInformation;
import com.konfigthis.client.model.ShipmentItem;
import com.konfigthis.client.model.ShipmentStatus;
import com.konfigthis.client.model.ShipmentsSortBy;
import com.konfigthis.client.model.ShippingAddress;
import com.konfigthis.client.model.ShippingAddressTo;
import com.konfigthis.client.model.SortDir;
import com.konfigthis.client.model.Tag;
import com.konfigthis.client.model.TagShipmentResponseBody;
import com.konfigthis.client.model.TaxIdentifier;
import com.konfigthis.client.model.UpdateShipmentRequestBody;
import com.konfigthis.client.model.UpdateShipmentsTags;
import com.konfigthis.client.model.UpdateShipmentsTagsShipmentsTagsInner;
import com.konfigthis.client.model.ValidateAddress;
import com.konfigthis.client.model.Weight;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ShipmentsApi
 */
@Disabled
public class ShipmentsApiTest {

    private static ShipmentsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new ShipmentsApi(apiClient);
    }

    /**
     * Get Shipment By External ID
     *
     * Query Shipments created using your own custom ID convention using this endpint
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByExternalIdTest() throws ApiException {
        String externalShipmentId = null;
        PartialShipment response = api.getByExternalId(externalShipmentId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Shipment By ID
     *
     * Get an individual shipment based on its ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String shipmentId = null;
        PartialShipment response = api.getById(shipmentId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Shipment Rates
     *
     * Get Rates for the shipment information associated with the shipment ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRatesForShipmentTest() throws ApiException {
        String shipmentId = null;
        OffsetDateTime createdAtStart = null;
        RatesInformation response = api.getRatesForShipment(shipmentId)
                .createdAtStart(createdAtStart)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Shipment Tags
     *
     * Get Shipment tags based on its ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagsByIdTest() throws ApiException {
        String shipmentId = null;
        TagShipmentResponseBody response = api.getTagsById(shipmentId)
                .execute();
        // TODO: test validations
    }

    /**
     * Parse shipping info
     *
     * The shipment-recognition API makes it easy for you to extract shipping data from unstructured text, including people&#39;s names, addresses, package weights and dimensions, insurance and delivery requirements, and more.  Data often enters your system as unstructured text (for example: emails, SMS messages, support tickets, or other documents). ShipEngine&#39;s shipment-recognition API helps you extract meaningful, structured data from this unstructured text. The parsed shipment data is returned in the same structure that&#39;s used for other ShipEngine APIs, so you can easily use the parsed data to create a shipping label.  &gt; **Note:** Shipment recognition is currently supported for the United States, Canada, Australia, New Zealand, the United Kingdom, and Ireland. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void shipmentTest() throws ApiException {
        String text = null;
        PartialShipment shipment = null;
        ParseShipmentResponseBody response = api.shipment(text)
                .shipment(shipment)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Shipment By ID
     *
     * Update a shipment object based on its ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void shipment_0Test() throws ApiException {
        ShippingAddressTo shipTo = null;
        ShippingAddress shipFrom = null;
        String shipmentId = null;
        List<Tag> tags = null;
        String shipmentId = null;
        String carrierId = null;
        String serviceCode = null;
        String externalOrderId = null;
        List<ShipmentItem> items = null;
        List<TaxIdentifier> taxIdentifiers = null;
        String externalShipmentId = null;
        String shipmentNumber = null;
        OffsetDateTime shipDate = null;
        OffsetDateTime createdAt = null;
        OffsetDateTime modifiedAt = null;
        ShipmentStatus shipmentStatus = null;
        String warehouseId = null;
        ShippingAddress returnTo = null;
        Boolean isReturn = null;
        DeliveryConfirmation confirmation = null;
        InternationalShipmentOptionsNullable customs = null;
        AdvancedShipmentOptions advancedOptions = null;
        InsuranceProvider insuranceProvider = null;
        OrderSourceName orderSourceCode = null;
        List<ModelPackage> packages = null;
        Weight totalWeight = null;
        String comparisonRateType = null;
        ValidateAddress validateAddress = null;
        CreateAndValidateShipment response = api.shipment_0(shipTo, shipFrom, shipmentId)
                .tags(tags)
                .shipmentId(shipmentId)
                .carrierId(carrierId)
                .serviceCode(serviceCode)
                .externalOrderId(externalOrderId)
                .items(items)
                .taxIdentifiers(taxIdentifiers)
                .externalShipmentId(externalShipmentId)
                .shipmentNumber(shipmentNumber)
                .shipDate(shipDate)
                .createdAt(createdAt)
                .modifiedAt(modifiedAt)
                .shipmentStatus(shipmentStatus)
                .warehouseId(warehouseId)
                .returnTo(returnTo)
                .isReturn(isReturn)
                .confirmation(confirmation)
                .customs(customs)
                .advancedOptions(advancedOptions)
                .insuranceProvider(insuranceProvider)
                .orderSourceCode(orderSourceCode)
                .packages(packages)
                .totalWeight(totalWeight)
                .comparisonRateType(comparisonRateType)
                .validateAddress(validateAddress)
                .execute();
        // TODO: test validations
    }

    /**
     * Add Tag to Shipment
     *
     * Add a tag to the shipment object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void shipment_1Test() throws ApiException {
        String shipmentId = null;
        String tagName = null;
        TagShipmentResponseBody response = api.shipment_1(shipmentId, tagName)
                .execute();
        // TODO: test validations
    }

    /**
     * Remove Tag from Shipment
     *
     * Remove an existing tag from the Shipment object
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void shipment_2Test() throws ApiException {
        String shipmentId = null;
        String tagName = null;
        String response = api.shipment_2(shipmentId, tagName)
                .execute();
        // TODO: test validations
    }

    /**
     * List Shipments
     *
     * Get list of Shipments
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void shipmentsTest() throws ApiException {
        ShipmentStatus shipmentStatus = null;
        String batchId = null;
        String tag = null;
        OffsetDateTime createdAtStart = null;
        OffsetDateTime createdAtEnd = null;
        OffsetDateTime modifiedAtStart = null;
        OffsetDateTime modifiedAtEnd = null;
        Integer page = null;
        Integer pageSize = null;
        String salesOrderId = null;
        SortDir sortDir = null;
        ShipmentsSortBy sortBy = null;
        ListShipmentsResponseBody response = api.shipments()
                .shipmentStatus(shipmentStatus)
                .batchId(batchId)
                .tag(tag)
                .createdAtStart(createdAtStart)
                .createdAtEnd(createdAtEnd)
                .modifiedAtStart(modifiedAtStart)
                .modifiedAtEnd(modifiedAtEnd)
                .page(page)
                .pageSize(pageSize)
                .salesOrderId(salesOrderId)
                .sortDir(sortDir)
                .sortBy(sortBy)
                .execute();
        // TODO: test validations
    }

    /**
     * Create Shipments
     *
     * Create one or multiple shipments.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void shipments_0Test() throws ApiException {
        List<AddressValidatingShipment> shipments = null;
        CreateShipmentsResponseBody response = api.shipments_0(shipments)
                .execute();
        // TODO: test validations
    }

    /**
     * Cancel a Shipment
     *
     * Mark a shipment cancelled, if it is no longer needed or being used by your organized. Any label associated with the shipment needs to be voided first An example use case would be if a batch label creation job is going to run at a set time and only queries &#x60;pending&#x60; shipments. Marking a shipment as cancelled would remove it from this process 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void shipments_1Test() throws ApiException {
        String shipmentId = null;
        String response = api.shipments_1(shipmentId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Shipments Tags
     *
     * Update Shipments Tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTagsTest() throws ApiException {
        List<UpdateShipmentsTagsShipmentsTagsInner> shipmentsTags = null;
        api.updateTags()
                .shipmentsTags(shipmentsTags)
                .execute();
        // TODO: test validations
    }

}
